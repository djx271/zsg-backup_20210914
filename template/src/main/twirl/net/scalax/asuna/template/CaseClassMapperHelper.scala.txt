@(count: Int)

@* def withRep[@for(i <- 1 to count) {
    Rep@{i},
    Data@{i},
    Target@{i},
    Column@{i} <: MacroColumnInfo
    @if(i < count) { , }
}](@for(i <- 1 to count) {
    rep@{i}: Rep@{i},
    property@{i}: PropertyType[Data@{i}],
    defaultValue@{i}: => Option[Data@{i}],
    column@{i}: Column@{i}
    @if(i < count) { , }
})(implicit @for(i <- 1 to count) {
    wrap@{i}: RepGroupColumnWrapper.Aux[Rep@{i}, Data@{i}, Column@{i}, Target@{i}]
    @if(i < count) { , }
}): CaseClassRepMapper@{count}[@for(i <- 1 to count) {
    Target@{i},
    Data@{i}
    @if(i < count) { , }
}] = {

    new CaseClassRepMapper@{count}[@for(i <- 1 to count) {
        Target@{i},
        Data@{i}
        @if(i < count) { , }
    }](@for(i <- 1 to count) {
        rep@{i} = wrap@{i}.inputColumn(rep = rep@{i}, columnInfo = column@{i}, defaultValue = defaultValue@{i})
        @if(i < count) { , }
    })

} *@

def inputColumnRep[@for(i <- 1 to count) {
    Rep@{i},
    Column@{i} <: MacroColumnInfo
    @if(i < count) { , }
}](@for(i <- 1 to count) {
    rep@{i}: Rep@{i},
    column@{i}: Column@{i}
    @if(i < count) { , }
}): RepDataSetter1@{count}[@for(i <- 1 to count) {
                               Rep@{i},
                               Column@{i}
                               @if(i < count) { , }
                           }] = {

    new RepDataSetter1@{count}[@for(i <- 1 to count) {
        Rep@{i},
        Column@{i}
        @if(i < count) { , }
    }] {

        override def withDataType[@for(i <- 1 to count) {
            Data@{i}
            @if(i < count) { , }
        }](@for(i <- 1 to count) {
            defaultValue@{i}: => Option[Data@{i}]
            @if(i < count) { , }
        }): RepDataSetter2@{count}[@for(i <- 1 to count) {
            Rep@{i},
            Column@{i},
            Data@{i}
            @if(i < count) { , }
        }] = {

            new RepDataSetter2@{count}[@for(i <- 1 to count) {
                Rep@{i},
                Column@{i},
                Data@{i}
                @if(i < count) { , }
            }] {
                override def output[@for(i <- 1 to count) {
                                                    Target@{i}
                                                    @if(i < count) { , }
                                                }](implicit @for(i <- 1 to count) {
                    wrap@{i}: RepGroupColumnWrapper.Aux[Rep@{i}, Data@{i}, Column@{i}, Target@{i}]
                    @if(i < count) { , }
                }) = {
                    new CaseClassRepMapper@{count}[@for(i <- 1 to count) {
                        Target@{i},
                        Data@{i}
                        @if(i < count) { , }
                    }](@for(i <- 1 to count) {
                        rep@{i} = wrap@{i}.inputColumn(rep = rep@{i}, columnInfo = column@{i}, defaultValue = defaultValue@{i})
                        @if(i < count) { , }
                    })
                }
            }

        }

    }

}

def mergeRep[@for(i <- 1 to count) {
                 Rep@{i} <: BaseClassRep
                 @if(i < count) { , }
}](@for(i <- 1 to count) {
    rep@{i}: Rep@{i}
    @if(i < count) { , }
}): CaseClassRepMapper@{count}[@for(i <- 1 to count) {
    Rep@{i},
    Rep@{i}#DataType
    @if(i < count) { , }
}] = {
    new CaseClassRepMapper@{count}[@for(i <- 1 to count) {
        Rep@{i},
        Rep@{i}#DataType
        @if(i < count) { , }
    }](@for(i <- 1 to count) {
        rep@{i} = rep@{i}
        @if(i < count) { , }
    })
}