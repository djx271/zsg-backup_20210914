@(count: Int)

def withRep[@for(i <- 1 to count) {
    Rep@{i},
    Data@{i},
    Target@{i},
    Column@{i} <: MacroColumnInfo
    @if(i < count) { , }
}](@for(i <- 1 to count) {
    rep@{i}: => Rep@{i},
    property@{i}: PropertyType[Data@{i}],
    column@{i}: Column@{i}
    @if(i < count) { , }
})(implicit @for(i <- 1 to count) {
    wrap@{i}: RepGroupColumnWrapper.Aux[Rep@{i}, Data@{i}, Column@{i}, Target@{i}]
    @if(i < count) { , }
}): CaseClassRepMapper@{count}[@for(i <- 1 to count) {
    Target@{i},
    Data@{i}
    @if(i < count) { , }
}] = {

    @for(i <- 1 to count) {
        def repInput@{i} = wrap@{i}.inputColumn(rep@{i}, column@{i})
    }

    new CaseClassRepMapper@{count}[@for(i <- 1 to count) {
        Target@{i},
        Data@{i}
        @if(i < count) { , }
    }](@for(i <- 1 to count) {
        property@{i} = property@{i}
        @if(i < count) { , }
    }) {
        @for(i <- 1 to count) {
            override lazy val rep@{i} = repInput@{i}
        }
    }

}