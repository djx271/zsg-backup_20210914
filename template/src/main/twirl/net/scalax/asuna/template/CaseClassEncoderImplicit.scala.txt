@(count: Int)

implicit def caseClassHelper@{count}EncoderGen[@for(i <- 1 to count) {
        Rep@{i},
        Data@{i},
        Target@{i},
    } RepCol, DataCol](
    implicit @for(i <- 1 to count) {
        shape@{i}: Lazy[EncoderShape.Aux[Rep@{i}, Data@{i}, Target@{i}, RepCol, DataCol]] @if(i < count) { , }
    })
    : EncoderShape.Aux[CaseClassHelper@{count}[@for(i <- 1 to count) {
        Rep@{i},
        Data@{i}
        @if(i < count) { , }
    }],
    CaseClassDataHelper@{count}[@for(i <- 1 to count) {
        Data@{i}
        @if(i < count) { , }
    }],
    CaseClassHelper@{count}[
        @for(i <- 1 to count) {
            Target@{i},
            Data@{i}
            @if(i < count) { , }
    }], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper@{count}[@for(i <- 1 to count) {
        Rep@{i},
        Data@{i}
        @if(i < count) { , }
    }],
    CaseClassDataHelper@{count}[@for(i <- 1 to count) {
        Data@{i}
        @if(i < count) { , }
    }], RepCol, DataCol] {
        override type Target = CaseClassHelper@{count}[@for(i <- 1 to count) {
            Target@{i},
            Data@{i}
            @if(i < count) { , }
        }]
        override def wrapRep(base: CaseClassHelper@{count}[@for(i <- 1 to count) {
            Rep@{i},
            Data@{i}
            @if(i < count) { , }
        }]): CaseClassHelper@{count}[
            @for(i <- 1 to count) {
            Target@{i},
            Data@{i}
            @if(i < count) { , }
        }] = {
        new CaseClassHelper@{count}(@for(i <- 1 to count) {
            rep@{i} = shape@{i}.value.wrapRep(base.rep@{i}),
            property@{i} = base.property@{i},
            column@{i} = base.column@{i}
            @if(i < count) { , }
        })
        }
        override def toLawRep(base: CaseClassHelper@{count}[@for(i <- 1 to count) {
            Target@{i},
            Data@{i}
            @if(i < count) { , }
        }], oldRep: RepCol): RepCol = {
            val rep@{count + 1} = oldRep
            @for(i <- (count to 1 by - 1)) {
                val rep@{i} = shape@{i}.value.toLawRep(base.rep@{i}, rep@{i + 1})
            }
            rep1
        }
        override def buildData(data: CaseClassDataHelper@{count}[@for(i <- 1 to count) {
            Data@{i}
            @if(i < count) { , }
        }], rep: CaseClassHelper@{count}[@for(i <- 1 to count) {
            Target@{i},
            Data@{i}
            @if(i < count) { , }
        }], oldData: DataCol): DataCol = {
            val data@{count + 1} = oldData
            @for(i <- (count to 1 by - 1)) {
                val data@{i} = shape@{i}.value.buildData(data.data@{i}, rep.rep@{i}, data@{i + 1})
            }
            data1
        }
    }
}

implicit def caseClassHelper@{count}EncoderImplicit[@for(i <- 1 to count) {
        Rep@{i},
        Data@{i},
        Target@{i},
    } RepCol, DataCol](
    implicit @for(i <- 1 to count) {
        shape@{i}: Lazy[EncoderShape.Aux[Rep@{i}, Data@{i}, Target@{i}, RepCol, DataCol]] @if(i < count) { , }
    })
    : EncoderShape.Aux[CaseClassHelper@{count}[@for(i <- 1 to count) {
        Rep@{i},
        Data@{i}
        @if(i < count) { , }
    }],
    Symbol => Any,
    CaseClassHelper@{count}[
        @for(i <- 1 to count) {
            Target@{i},
            Data@{i}
            @if(i < count) { , }
    }], RepCol, DataCol] = {
    caseClassHelper@{count}EncoderGen(
        @for(i <- 1 to count) {
            shape@{i}
            @if(i < count) { , }
        }
    ).emap { (rep, s: Symbol => Any) => CaseClassDataHelper@{count}.fromModel(rep, s) }
}