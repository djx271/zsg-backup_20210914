@(count: Int)

@* def withRawRep[@for(i <- 1 to count) {
    Rep@{i},
    Data@{i}
    @if(i < count) { , }
}](@for(i <- 1 to count) {
    rep@{i}: Rep@{i},
    property@{i}: PropertyType[Data@{i}]
    @if(i < count) { , }
}): CaseClassRepMapper@{count}[@for(i <- 1 to count) {
    Rep@{i},
    Data@{i}
    @if(i < count) { , }
}] = {

    new CaseClassRepMapper@{count}[@for(i <- 1 to count) {
        Rep@{i},
        Data@{i}
        @if(i < count) { , }
    }](@for(i <- 1 to count) {
        rep@{i} = rep@{i}
        @if(i < count) { , }
    })

} *@

def inputRep[@for(i <- 1 to count) {
    Rep@{i}
    @if(i < count) { , }
}](@for(i <- 1 to count) {
    rep@{i}: Rep@{i}
    @if(i < count) { , }
}): RepSetter@{count}[@for(i <- 1 to count) {
    Rep@{i}
    @if(i < count) { , }
}] = {

    new RepSetter@{count}[@for(i <- 1 to count) {
        Rep@{i}
        @if(i < count) { , }
    }] {
        override def withDataType[@for(i <- 1 to count) {
            Data@{i}
            @if(i < count) { , }
        }]: CaseClassRepMapper@{count}[@for(i <- 1 to count) {
            Rep@{i},
            Data@{i}
            @if(i < count) { , }
        }] = {
            new CaseClassRepMapper@{count}[@for(i <- 1 to count) {
                Rep@{i},
                Data@{i}
                @if(i < count) { , }
            }](@for(i <- 1 to count) {
                rep@{i} = rep@{i}
                @if(i < count) { , }
            })
        }
    }

}