package net.scalax.asuna.helper.template
import net.scalax.asuna.helper.MacroColumnInfo
import net.scalax.asuna.core.encoder.EncoderShape
import net.scalax.asuna.core.decoder.{ DecoderShape, SplitData }
import net.scalax.asuna.helper.decoder.macroImpl.PropertyType
import net.scalax.asuna.helper.data.macroImpl.DataGenWrap
import net.scalax.asuna.helper.data.macroImpl.RepGroupColumnWrapper
import shapeless._
trait CaseClassHelper
object CaseClassHelper {
  def withRep[Rep1, Data1, Target1](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo)(implicit wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1]): CaseClassHelper1[Target1, Data1] = {
    new CaseClassHelper1(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2]): CaseClassHelper2[Target1, Data1, Target2, Data2] = {
    new CaseClassHelper2(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3]): CaseClassHelper3[Target1, Data1, Target2, Data2, Target3, Data3] = {
    new CaseClassHelper3(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4]): CaseClassHelper4[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4] = {
    new CaseClassHelper4(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5]): CaseClassHelper5[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5] = {
    new CaseClassHelper5(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6]): CaseClassHelper6[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6] = {
    new CaseClassHelper6(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7]): CaseClassHelper7[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7] = {
    new CaseClassHelper7(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8]): CaseClassHelper8[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8] = {
    new CaseClassHelper8(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9]): CaseClassHelper9[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9] = {
    new CaseClassHelper9(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10]): CaseClassHelper10[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10] = {
    new CaseClassHelper10(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11]): CaseClassHelper11[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11] = {
    new CaseClassHelper11(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12]): CaseClassHelper12[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12] = {
    new CaseClassHelper12(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13]): CaseClassHelper13[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13] = {
    new CaseClassHelper13(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14]): CaseClassHelper14[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14] = {
    new CaseClassHelper14(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15]): CaseClassHelper15[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15] = {
    new CaseClassHelper15(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16]): CaseClassHelper16[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16] = {
    new CaseClassHelper16(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17]): CaseClassHelper17[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17] = {
    new CaseClassHelper17(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18]): CaseClassHelper18[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18] = {
    new CaseClassHelper18(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19]): CaseClassHelper19[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19] = {
    new CaseClassHelper19(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20]): CaseClassHelper20[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20] = {
    new CaseClassHelper20(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21]): CaseClassHelper21[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21] = {
    new CaseClassHelper21(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22]): CaseClassHelper22[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22] = {
    new CaseClassHelper22(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23]): CaseClassHelper23[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23] = {
    new CaseClassHelper23(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24]): CaseClassHelper24[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24] = {
    new CaseClassHelper24(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25]): CaseClassHelper25[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25] = {
    new CaseClassHelper25(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26]): CaseClassHelper26[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26] = {
    new CaseClassHelper26(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27]): CaseClassHelper27[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27] = {
    new CaseClassHelper27(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28]): CaseClassHelper28[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28] = {
    new CaseClassHelper28(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29]): CaseClassHelper29[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29] = {
    new CaseClassHelper29(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30]): CaseClassHelper30[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30] = {
    new CaseClassHelper30(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31]): CaseClassHelper31[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31] = {
    new CaseClassHelper31(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32]): CaseClassHelper32[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32] = {
    new CaseClassHelper32(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33]): CaseClassHelper33[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33] = {
    new CaseClassHelper33(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34]): CaseClassHelper34[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34] = {
    new CaseClassHelper34(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35]): CaseClassHelper35[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35] = {
    new CaseClassHelper35(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36]): CaseClassHelper36[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36] = {
    new CaseClassHelper36(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37]): CaseClassHelper37[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37] = {
    new CaseClassHelper37(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38]): CaseClassHelper38[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38] = {
    new CaseClassHelper38(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39]): CaseClassHelper39[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39] = {
    new CaseClassHelper39(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40]): CaseClassHelper40[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40] = {
    new CaseClassHelper40(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41]): CaseClassHelper41[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41] = {
    new CaseClassHelper41(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42]): CaseClassHelper42[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42] = {
    new CaseClassHelper42(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43]): CaseClassHelper43[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43] = {
    new CaseClassHelper43(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44]): CaseClassHelper44[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44] = {
    new CaseClassHelper44(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45]): CaseClassHelper45[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45] = {
    new CaseClassHelper45(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46]): CaseClassHelper46[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46] = {
    new CaseClassHelper46(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47]): CaseClassHelper47[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47] = {
    new CaseClassHelper47(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48]): CaseClassHelper48[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48] = {
    new CaseClassHelper48(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49]): CaseClassHelper49[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49] = {
    new CaseClassHelper49(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50]): CaseClassHelper50[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50] = {
    new CaseClassHelper50(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51]): CaseClassHelper51[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51] = {
    new CaseClassHelper51(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52]): CaseClassHelper52[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52] = {
    new CaseClassHelper52(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53]): CaseClassHelper53[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53] = {
    new CaseClassHelper53(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54]): CaseClassHelper54[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54] = {
    new CaseClassHelper54(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55]): CaseClassHelper55[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55] = {
    new CaseClassHelper55(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56]): CaseClassHelper56[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56] = {
    new CaseClassHelper56(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo,
    rep57: Rep57,
    property57: PropertyType[Data57],
    column57: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56],
    wrap57: RepGroupColumnWrapper.Aux[Rep57, Data57, Target57]): CaseClassHelper57[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57] = {
    new CaseClassHelper57(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56,
      rep57 = wrap57.inputColumn(rep57, column57),
      property57 = property57,
      column57 = column57)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo,
    rep57: Rep57,
    property57: PropertyType[Data57],
    column57: MacroColumnInfo,
    rep58: Rep58,
    property58: PropertyType[Data58],
    column58: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56],
    wrap57: RepGroupColumnWrapper.Aux[Rep57, Data57, Target57],
    wrap58: RepGroupColumnWrapper.Aux[Rep58, Data58, Target58]): CaseClassHelper58[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58] = {
    new CaseClassHelper58(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56,
      rep57 = wrap57.inputColumn(rep57, column57),
      property57 = property57,
      column57 = column57,
      rep58 = wrap58.inputColumn(rep58, column58),
      property58 = property58,
      column58 = column58)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo,
    rep57: Rep57,
    property57: PropertyType[Data57],
    column57: MacroColumnInfo,
    rep58: Rep58,
    property58: PropertyType[Data58],
    column58: MacroColumnInfo,
    rep59: Rep59,
    property59: PropertyType[Data59],
    column59: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56],
    wrap57: RepGroupColumnWrapper.Aux[Rep57, Data57, Target57],
    wrap58: RepGroupColumnWrapper.Aux[Rep58, Data58, Target58],
    wrap59: RepGroupColumnWrapper.Aux[Rep59, Data59, Target59]): CaseClassHelper59[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59] = {
    new CaseClassHelper59(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56,
      rep57 = wrap57.inputColumn(rep57, column57),
      property57 = property57,
      column57 = column57,
      rep58 = wrap58.inputColumn(rep58, column58),
      property58 = property58,
      column58 = column58,
      rep59 = wrap59.inputColumn(rep59, column59),
      property59 = property59,
      column59 = column59)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo,
    rep57: Rep57,
    property57: PropertyType[Data57],
    column57: MacroColumnInfo,
    rep58: Rep58,
    property58: PropertyType[Data58],
    column58: MacroColumnInfo,
    rep59: Rep59,
    property59: PropertyType[Data59],
    column59: MacroColumnInfo,
    rep60: Rep60,
    property60: PropertyType[Data60],
    column60: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56],
    wrap57: RepGroupColumnWrapper.Aux[Rep57, Data57, Target57],
    wrap58: RepGroupColumnWrapper.Aux[Rep58, Data58, Target58],
    wrap59: RepGroupColumnWrapper.Aux[Rep59, Data59, Target59],
    wrap60: RepGroupColumnWrapper.Aux[Rep60, Data60, Target60]): CaseClassHelper60[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60] = {
    new CaseClassHelper60(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56,
      rep57 = wrap57.inputColumn(rep57, column57),
      property57 = property57,
      column57 = column57,
      rep58 = wrap58.inputColumn(rep58, column58),
      property58 = property58,
      column58 = column58,
      rep59 = wrap59.inputColumn(rep59, column59),
      property59 = property59,
      column59 = column59,
      rep60 = wrap60.inputColumn(rep60, column60),
      property60 = property60,
      column60 = column60)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60, Rep61, Data61, Target61](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo,
    rep57: Rep57,
    property57: PropertyType[Data57],
    column57: MacroColumnInfo,
    rep58: Rep58,
    property58: PropertyType[Data58],
    column58: MacroColumnInfo,
    rep59: Rep59,
    property59: PropertyType[Data59],
    column59: MacroColumnInfo,
    rep60: Rep60,
    property60: PropertyType[Data60],
    column60: MacroColumnInfo,
    rep61: Rep61,
    property61: PropertyType[Data61],
    column61: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56],
    wrap57: RepGroupColumnWrapper.Aux[Rep57, Data57, Target57],
    wrap58: RepGroupColumnWrapper.Aux[Rep58, Data58, Target58],
    wrap59: RepGroupColumnWrapper.Aux[Rep59, Data59, Target59],
    wrap60: RepGroupColumnWrapper.Aux[Rep60, Data60, Target60],
    wrap61: RepGroupColumnWrapper.Aux[Rep61, Data61, Target61]): CaseClassHelper61[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61] = {
    new CaseClassHelper61(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56,
      rep57 = wrap57.inputColumn(rep57, column57),
      property57 = property57,
      column57 = column57,
      rep58 = wrap58.inputColumn(rep58, column58),
      property58 = property58,
      column58 = column58,
      rep59 = wrap59.inputColumn(rep59, column59),
      property59 = property59,
      column59 = column59,
      rep60 = wrap60.inputColumn(rep60, column60),
      property60 = property60,
      column60 = column60,
      rep61 = wrap61.inputColumn(rep61, column61),
      property61 = property61,
      column61 = column61)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60, Rep61, Data61, Target61, Rep62, Data62, Target62](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo,
    rep57: Rep57,
    property57: PropertyType[Data57],
    column57: MacroColumnInfo,
    rep58: Rep58,
    property58: PropertyType[Data58],
    column58: MacroColumnInfo,
    rep59: Rep59,
    property59: PropertyType[Data59],
    column59: MacroColumnInfo,
    rep60: Rep60,
    property60: PropertyType[Data60],
    column60: MacroColumnInfo,
    rep61: Rep61,
    property61: PropertyType[Data61],
    column61: MacroColumnInfo,
    rep62: Rep62,
    property62: PropertyType[Data62],
    column62: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56],
    wrap57: RepGroupColumnWrapper.Aux[Rep57, Data57, Target57],
    wrap58: RepGroupColumnWrapper.Aux[Rep58, Data58, Target58],
    wrap59: RepGroupColumnWrapper.Aux[Rep59, Data59, Target59],
    wrap60: RepGroupColumnWrapper.Aux[Rep60, Data60, Target60],
    wrap61: RepGroupColumnWrapper.Aux[Rep61, Data61, Target61],
    wrap62: RepGroupColumnWrapper.Aux[Rep62, Data62, Target62]): CaseClassHelper62[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62] = {
    new CaseClassHelper62(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56,
      rep57 = wrap57.inputColumn(rep57, column57),
      property57 = property57,
      column57 = column57,
      rep58 = wrap58.inputColumn(rep58, column58),
      property58 = property58,
      column58 = column58,
      rep59 = wrap59.inputColumn(rep59, column59),
      property59 = property59,
      column59 = column59,
      rep60 = wrap60.inputColumn(rep60, column60),
      property60 = property60,
      column60 = column60,
      rep61 = wrap61.inputColumn(rep61, column61),
      property61 = property61,
      column61 = column61,
      rep62 = wrap62.inputColumn(rep62, column62),
      property62 = property62,
      column62 = column62)
  }
  def withRep[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60, Rep61, Data61, Target61, Rep62, Data62, Target62, Rep63, Data63, Target63](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo,
    rep57: Rep57,
    property57: PropertyType[Data57],
    column57: MacroColumnInfo,
    rep58: Rep58,
    property58: PropertyType[Data58],
    column58: MacroColumnInfo,
    rep59: Rep59,
    property59: PropertyType[Data59],
    column59: MacroColumnInfo,
    rep60: Rep60,
    property60: PropertyType[Data60],
    column60: MacroColumnInfo,
    rep61: Rep61,
    property61: PropertyType[Data61],
    column61: MacroColumnInfo,
    rep62: Rep62,
    property62: PropertyType[Data62],
    column62: MacroColumnInfo,
    rep63: Rep63,
    property63: PropertyType[Data63],
    column63: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56],
    wrap57: RepGroupColumnWrapper.Aux[Rep57, Data57, Target57],
    wrap58: RepGroupColumnWrapper.Aux[Rep58, Data58, Target58],
    wrap59: RepGroupColumnWrapper.Aux[Rep59, Data59, Target59],
    wrap60: RepGroupColumnWrapper.Aux[Rep60, Data60, Target60],
    wrap61: RepGroupColumnWrapper.Aux[Rep61, Data61, Target61],
    wrap62: RepGroupColumnWrapper.Aux[Rep62, Data62, Target62],
    wrap63: RepGroupColumnWrapper.Aux[Rep63, Data63, Target63]): CaseClassHelper63[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62, Target63, Data63] = {
    new CaseClassHelper63(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56,
      rep57 = wrap57.inputColumn(rep57, column57),
      property57 = property57,
      column57 = column57,
      rep58 = wrap58.inputColumn(rep58, column58),
      property58 = property58,
      column58 = column58,
      rep59 = wrap59.inputColumn(rep59, column59),
      property59 = property59,
      column59 = column59,
      rep60 = wrap60.inputColumn(rep60, column60),
      property60 = property60,
      column60 = column60,
      rep61 = wrap61.inputColumn(rep61, column61),
      property61 = property61,
      column61 = column61,
      rep62 = wrap62.inputColumn(rep62, column62),
      property62 = property62,
      column62 = column62,
      rep63 = wrap63.inputColumn(rep63, column63),
      property63 = property63,
      column63 = column63)
  }
}
trait CaseClassDataHelper
object CaseClassDataHelper {
  def withDataDescribe[Rep1, Data1, Target1](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo)(implicit wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1]): DataGenWrap.Aux[CaseClassHelper1[Target1, Data1], CaseClassDataHelper1[Data1]] = {
    DataGenWrap.value[CaseClassHelper1[Target1, Data1], CaseClassDataHelper1[Data1]](new CaseClassHelper1(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2]): DataGenWrap.Aux[CaseClassHelper2[Target1, Data1, Target2, Data2], CaseClassDataHelper2[Data1, Data2]] = {
    DataGenWrap.value[CaseClassHelper2[Target1, Data1, Target2, Data2], CaseClassDataHelper2[Data1, Data2]](new CaseClassHelper2(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3]): DataGenWrap.Aux[CaseClassHelper3[Target1, Data1, Target2, Data2, Target3, Data3], CaseClassDataHelper3[Data1, Data2, Data3]] = {
    DataGenWrap.value[CaseClassHelper3[Target1, Data1, Target2, Data2, Target3, Data3], CaseClassDataHelper3[Data1, Data2, Data3]](new CaseClassHelper3(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4]): DataGenWrap.Aux[CaseClassHelper4[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4], CaseClassDataHelper4[Data1, Data2, Data3, Data4]] = {
    DataGenWrap.value[CaseClassHelper4[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4], CaseClassDataHelper4[Data1, Data2, Data3, Data4]](new CaseClassHelper4(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5]): DataGenWrap.Aux[CaseClassHelper5[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5], CaseClassDataHelper5[Data1, Data2, Data3, Data4, Data5]] = {
    DataGenWrap.value[CaseClassHelper5[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5], CaseClassDataHelper5[Data1, Data2, Data3, Data4, Data5]](new CaseClassHelper5(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6]): DataGenWrap.Aux[CaseClassHelper6[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6], CaseClassDataHelper6[Data1, Data2, Data3, Data4, Data5, Data6]] = {
    DataGenWrap.value[CaseClassHelper6[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6], CaseClassDataHelper6[Data1, Data2, Data3, Data4, Data5, Data6]](new CaseClassHelper6(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7]): DataGenWrap.Aux[CaseClassHelper7[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7], CaseClassDataHelper7[Data1, Data2, Data3, Data4, Data5, Data6, Data7]] = {
    DataGenWrap.value[CaseClassHelper7[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7], CaseClassDataHelper7[Data1, Data2, Data3, Data4, Data5, Data6, Data7]](new CaseClassHelper7(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8]): DataGenWrap.Aux[CaseClassHelper8[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8], CaseClassDataHelper8[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8]] = {
    DataGenWrap.value[CaseClassHelper8[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8], CaseClassDataHelper8[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8]](new CaseClassHelper8(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9]): DataGenWrap.Aux[CaseClassHelper9[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9], CaseClassDataHelper9[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9]] = {
    DataGenWrap.value[CaseClassHelper9[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9], CaseClassDataHelper9[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9]](new CaseClassHelper9(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10]): DataGenWrap.Aux[CaseClassHelper10[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10], CaseClassDataHelper10[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10]] = {
    DataGenWrap.value[CaseClassHelper10[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10], CaseClassDataHelper10[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10]](new CaseClassHelper10(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11]): DataGenWrap.Aux[CaseClassHelper11[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11], CaseClassDataHelper11[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11]] = {
    DataGenWrap.value[CaseClassHelper11[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11], CaseClassDataHelper11[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11]](new CaseClassHelper11(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12]): DataGenWrap.Aux[CaseClassHelper12[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12], CaseClassDataHelper12[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12]] = {
    DataGenWrap.value[CaseClassHelper12[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12], CaseClassDataHelper12[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12]](new CaseClassHelper12(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13]): DataGenWrap.Aux[CaseClassHelper13[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13], CaseClassDataHelper13[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13]] = {
    DataGenWrap.value[CaseClassHelper13[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13], CaseClassDataHelper13[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13]](new CaseClassHelper13(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14]): DataGenWrap.Aux[CaseClassHelper14[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14], CaseClassDataHelper14[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14]] = {
    DataGenWrap.value[CaseClassHelper14[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14], CaseClassDataHelper14[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14]](new CaseClassHelper14(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15]): DataGenWrap.Aux[CaseClassHelper15[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15], CaseClassDataHelper15[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15]] = {
    DataGenWrap.value[CaseClassHelper15[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15], CaseClassDataHelper15[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15]](new CaseClassHelper15(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16]): DataGenWrap.Aux[CaseClassHelper16[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16], CaseClassDataHelper16[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16]] = {
    DataGenWrap.value[CaseClassHelper16[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16], CaseClassDataHelper16[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16]](new CaseClassHelper16(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17]): DataGenWrap.Aux[CaseClassHelper17[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17], CaseClassDataHelper17[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17]] = {
    DataGenWrap.value[CaseClassHelper17[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17], CaseClassDataHelper17[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17]](new CaseClassHelper17(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18]): DataGenWrap.Aux[CaseClassHelper18[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18], CaseClassDataHelper18[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18]] = {
    DataGenWrap.value[CaseClassHelper18[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18], CaseClassDataHelper18[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18]](new CaseClassHelper18(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19]): DataGenWrap.Aux[CaseClassHelper19[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19], CaseClassDataHelper19[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19]] = {
    DataGenWrap.value[CaseClassHelper19[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19], CaseClassDataHelper19[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19]](new CaseClassHelper19(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20]): DataGenWrap.Aux[CaseClassHelper20[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20], CaseClassDataHelper20[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20]] = {
    DataGenWrap.value[CaseClassHelper20[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20], CaseClassDataHelper20[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20]](new CaseClassHelper20(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21]): DataGenWrap.Aux[CaseClassHelper21[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21], CaseClassDataHelper21[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21]] = {
    DataGenWrap.value[CaseClassHelper21[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21], CaseClassDataHelper21[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21]](new CaseClassHelper21(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22]): DataGenWrap.Aux[CaseClassHelper22[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22], CaseClassDataHelper22[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22]] = {
    DataGenWrap.value[CaseClassHelper22[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22], CaseClassDataHelper22[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22]](new CaseClassHelper22(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23]): DataGenWrap.Aux[CaseClassHelper23[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23], CaseClassDataHelper23[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23]] = {
    DataGenWrap.value[CaseClassHelper23[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23], CaseClassDataHelper23[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23]](new CaseClassHelper23(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24]): DataGenWrap.Aux[CaseClassHelper24[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24], CaseClassDataHelper24[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24]] = {
    DataGenWrap.value[CaseClassHelper24[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24], CaseClassDataHelper24[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24]](new CaseClassHelper24(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25]): DataGenWrap.Aux[CaseClassHelper25[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25], CaseClassDataHelper25[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25]] = {
    DataGenWrap.value[CaseClassHelper25[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25], CaseClassDataHelper25[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25]](new CaseClassHelper25(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26]): DataGenWrap.Aux[CaseClassHelper26[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26], CaseClassDataHelper26[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26]] = {
    DataGenWrap.value[CaseClassHelper26[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26], CaseClassDataHelper26[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26]](new CaseClassHelper26(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27]): DataGenWrap.Aux[CaseClassHelper27[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27], CaseClassDataHelper27[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27]] = {
    DataGenWrap.value[CaseClassHelper27[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27], CaseClassDataHelper27[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27]](new CaseClassHelper27(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28]): DataGenWrap.Aux[CaseClassHelper28[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28], CaseClassDataHelper28[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28]] = {
    DataGenWrap.value[CaseClassHelper28[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28], CaseClassDataHelper28[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28]](new CaseClassHelper28(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29]): DataGenWrap.Aux[CaseClassHelper29[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29], CaseClassDataHelper29[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29]] = {
    DataGenWrap.value[CaseClassHelper29[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29], CaseClassDataHelper29[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29]](new CaseClassHelper29(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30]): DataGenWrap.Aux[CaseClassHelper30[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30], CaseClassDataHelper30[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30]] = {
    DataGenWrap.value[CaseClassHelper30[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30], CaseClassDataHelper30[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30]](new CaseClassHelper30(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31]): DataGenWrap.Aux[CaseClassHelper31[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31], CaseClassDataHelper31[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31]] = {
    DataGenWrap.value[CaseClassHelper31[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31], CaseClassDataHelper31[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31]](new CaseClassHelper31(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32]): DataGenWrap.Aux[CaseClassHelper32[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32], CaseClassDataHelper32[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32]] = {
    DataGenWrap.value[CaseClassHelper32[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32], CaseClassDataHelper32[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32]](new CaseClassHelper32(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33]): DataGenWrap.Aux[CaseClassHelper33[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33], CaseClassDataHelper33[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33]] = {
    DataGenWrap.value[CaseClassHelper33[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33], CaseClassDataHelper33[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33]](new CaseClassHelper33(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34]): DataGenWrap.Aux[CaseClassHelper34[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34], CaseClassDataHelper34[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34]] = {
    DataGenWrap.value[CaseClassHelper34[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34], CaseClassDataHelper34[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34]](new CaseClassHelper34(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35]): DataGenWrap.Aux[CaseClassHelper35[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35], CaseClassDataHelper35[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35]] = {
    DataGenWrap.value[CaseClassHelper35[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35], CaseClassDataHelper35[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35]](new CaseClassHelper35(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36]): DataGenWrap.Aux[CaseClassHelper36[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36], CaseClassDataHelper36[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36]] = {
    DataGenWrap.value[CaseClassHelper36[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36], CaseClassDataHelper36[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36]](new CaseClassHelper36(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37]): DataGenWrap.Aux[CaseClassHelper37[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37], CaseClassDataHelper37[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37]] = {
    DataGenWrap.value[CaseClassHelper37[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37], CaseClassDataHelper37[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37]](new CaseClassHelper37(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38]): DataGenWrap.Aux[CaseClassHelper38[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38], CaseClassDataHelper38[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38]] = {
    DataGenWrap.value[CaseClassHelper38[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38], CaseClassDataHelper38[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38]](new CaseClassHelper38(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39]): DataGenWrap.Aux[CaseClassHelper39[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39], CaseClassDataHelper39[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39]] = {
    DataGenWrap.value[CaseClassHelper39[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39], CaseClassDataHelper39[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39]](new CaseClassHelper39(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40]): DataGenWrap.Aux[CaseClassHelper40[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40], CaseClassDataHelper40[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40]] = {
    DataGenWrap.value[CaseClassHelper40[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40], CaseClassDataHelper40[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40]](new CaseClassHelper40(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41]): DataGenWrap.Aux[CaseClassHelper41[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41], CaseClassDataHelper41[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41]] = {
    DataGenWrap.value[CaseClassHelper41[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41], CaseClassDataHelper41[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41]](new CaseClassHelper41(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42]): DataGenWrap.Aux[CaseClassHelper42[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42], CaseClassDataHelper42[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42]] = {
    DataGenWrap.value[CaseClassHelper42[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42], CaseClassDataHelper42[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42]](new CaseClassHelper42(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43]): DataGenWrap.Aux[CaseClassHelper43[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43], CaseClassDataHelper43[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43]] = {
    DataGenWrap.value[CaseClassHelper43[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43], CaseClassDataHelper43[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43]](new CaseClassHelper43(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44]): DataGenWrap.Aux[CaseClassHelper44[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44], CaseClassDataHelper44[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44]] = {
    DataGenWrap.value[CaseClassHelper44[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44], CaseClassDataHelper44[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44]](new CaseClassHelper44(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45]): DataGenWrap.Aux[CaseClassHelper45[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45], CaseClassDataHelper45[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45]] = {
    DataGenWrap.value[CaseClassHelper45[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45], CaseClassDataHelper45[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45]](new CaseClassHelper45(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46]): DataGenWrap.Aux[CaseClassHelper46[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46], CaseClassDataHelper46[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46]] = {
    DataGenWrap.value[CaseClassHelper46[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46], CaseClassDataHelper46[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46]](new CaseClassHelper46(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47]): DataGenWrap.Aux[CaseClassHelper47[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47], CaseClassDataHelper47[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47]] = {
    DataGenWrap.value[CaseClassHelper47[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47], CaseClassDataHelper47[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47]](new CaseClassHelper47(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48]): DataGenWrap.Aux[CaseClassHelper48[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48], CaseClassDataHelper48[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48]] = {
    DataGenWrap.value[CaseClassHelper48[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48], CaseClassDataHelper48[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48]](new CaseClassHelper48(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49]): DataGenWrap.Aux[CaseClassHelper49[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49], CaseClassDataHelper49[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49]] = {
    DataGenWrap.value[CaseClassHelper49[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49], CaseClassDataHelper49[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49]](new CaseClassHelper49(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50]): DataGenWrap.Aux[CaseClassHelper50[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50], CaseClassDataHelper50[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50]] = {
    DataGenWrap.value[CaseClassHelper50[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50], CaseClassDataHelper50[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50]](new CaseClassHelper50(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51]): DataGenWrap.Aux[CaseClassHelper51[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51], CaseClassDataHelper51[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51]] = {
    DataGenWrap.value[CaseClassHelper51[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51], CaseClassDataHelper51[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51]](new CaseClassHelper51(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52]): DataGenWrap.Aux[CaseClassHelper52[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52], CaseClassDataHelper52[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52]] = {
    DataGenWrap.value[CaseClassHelper52[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52], CaseClassDataHelper52[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52]](new CaseClassHelper52(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53]): DataGenWrap.Aux[CaseClassHelper53[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53], CaseClassDataHelper53[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53]] = {
    DataGenWrap.value[CaseClassHelper53[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53], CaseClassDataHelper53[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53]](new CaseClassHelper53(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54]): DataGenWrap.Aux[CaseClassHelper54[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54], CaseClassDataHelper54[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54]] = {
    DataGenWrap.value[CaseClassHelper54[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54], CaseClassDataHelper54[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54]](new CaseClassHelper54(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55]): DataGenWrap.Aux[CaseClassHelper55[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55], CaseClassDataHelper55[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55]] = {
    DataGenWrap.value[CaseClassHelper55[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55], CaseClassDataHelper55[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55]](new CaseClassHelper55(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56]): DataGenWrap.Aux[CaseClassHelper56[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56], CaseClassDataHelper56[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56]] = {
    DataGenWrap.value[CaseClassHelper56[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56], CaseClassDataHelper56[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56]](new CaseClassHelper56(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo,
    rep57: Rep57,
    property57: PropertyType[Data57],
    column57: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56],
    wrap57: RepGroupColumnWrapper.Aux[Rep57, Data57, Target57]): DataGenWrap.Aux[CaseClassHelper57[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57], CaseClassDataHelper57[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57]] = {
    DataGenWrap.value[CaseClassHelper57[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57], CaseClassDataHelper57[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57]](new CaseClassHelper57(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56,
      rep57 = wrap57.inputColumn(rep57, column57),
      property57 = property57,
      column57 = column57))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo,
    rep57: Rep57,
    property57: PropertyType[Data57],
    column57: MacroColumnInfo,
    rep58: Rep58,
    property58: PropertyType[Data58],
    column58: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56],
    wrap57: RepGroupColumnWrapper.Aux[Rep57, Data57, Target57],
    wrap58: RepGroupColumnWrapper.Aux[Rep58, Data58, Target58]): DataGenWrap.Aux[CaseClassHelper58[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58], CaseClassDataHelper58[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58]] = {
    DataGenWrap.value[CaseClassHelper58[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58], CaseClassDataHelper58[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58]](new CaseClassHelper58(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56,
      rep57 = wrap57.inputColumn(rep57, column57),
      property57 = property57,
      column57 = column57,
      rep58 = wrap58.inputColumn(rep58, column58),
      property58 = property58,
      column58 = column58))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo,
    rep57: Rep57,
    property57: PropertyType[Data57],
    column57: MacroColumnInfo,
    rep58: Rep58,
    property58: PropertyType[Data58],
    column58: MacroColumnInfo,
    rep59: Rep59,
    property59: PropertyType[Data59],
    column59: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56],
    wrap57: RepGroupColumnWrapper.Aux[Rep57, Data57, Target57],
    wrap58: RepGroupColumnWrapper.Aux[Rep58, Data58, Target58],
    wrap59: RepGroupColumnWrapper.Aux[Rep59, Data59, Target59]): DataGenWrap.Aux[CaseClassHelper59[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59], CaseClassDataHelper59[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59]] = {
    DataGenWrap.value[CaseClassHelper59[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59], CaseClassDataHelper59[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59]](new CaseClassHelper59(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56,
      rep57 = wrap57.inputColumn(rep57, column57),
      property57 = property57,
      column57 = column57,
      rep58 = wrap58.inputColumn(rep58, column58),
      property58 = property58,
      column58 = column58,
      rep59 = wrap59.inputColumn(rep59, column59),
      property59 = property59,
      column59 = column59))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo,
    rep57: Rep57,
    property57: PropertyType[Data57],
    column57: MacroColumnInfo,
    rep58: Rep58,
    property58: PropertyType[Data58],
    column58: MacroColumnInfo,
    rep59: Rep59,
    property59: PropertyType[Data59],
    column59: MacroColumnInfo,
    rep60: Rep60,
    property60: PropertyType[Data60],
    column60: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56],
    wrap57: RepGroupColumnWrapper.Aux[Rep57, Data57, Target57],
    wrap58: RepGroupColumnWrapper.Aux[Rep58, Data58, Target58],
    wrap59: RepGroupColumnWrapper.Aux[Rep59, Data59, Target59],
    wrap60: RepGroupColumnWrapper.Aux[Rep60, Data60, Target60]): DataGenWrap.Aux[CaseClassHelper60[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60], CaseClassDataHelper60[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60]] = {
    DataGenWrap.value[CaseClassHelper60[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60], CaseClassDataHelper60[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60]](new CaseClassHelper60(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56,
      rep57 = wrap57.inputColumn(rep57, column57),
      property57 = property57,
      column57 = column57,
      rep58 = wrap58.inputColumn(rep58, column58),
      property58 = property58,
      column58 = column58,
      rep59 = wrap59.inputColumn(rep59, column59),
      property59 = property59,
      column59 = column59,
      rep60 = wrap60.inputColumn(rep60, column60),
      property60 = property60,
      column60 = column60))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60, Rep61, Data61, Target61](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo,
    rep57: Rep57,
    property57: PropertyType[Data57],
    column57: MacroColumnInfo,
    rep58: Rep58,
    property58: PropertyType[Data58],
    column58: MacroColumnInfo,
    rep59: Rep59,
    property59: PropertyType[Data59],
    column59: MacroColumnInfo,
    rep60: Rep60,
    property60: PropertyType[Data60],
    column60: MacroColumnInfo,
    rep61: Rep61,
    property61: PropertyType[Data61],
    column61: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56],
    wrap57: RepGroupColumnWrapper.Aux[Rep57, Data57, Target57],
    wrap58: RepGroupColumnWrapper.Aux[Rep58, Data58, Target58],
    wrap59: RepGroupColumnWrapper.Aux[Rep59, Data59, Target59],
    wrap60: RepGroupColumnWrapper.Aux[Rep60, Data60, Target60],
    wrap61: RepGroupColumnWrapper.Aux[Rep61, Data61, Target61]): DataGenWrap.Aux[CaseClassHelper61[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61], CaseClassDataHelper61[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61]] = {
    DataGenWrap.value[CaseClassHelper61[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61], CaseClassDataHelper61[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61]](new CaseClassHelper61(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56,
      rep57 = wrap57.inputColumn(rep57, column57),
      property57 = property57,
      column57 = column57,
      rep58 = wrap58.inputColumn(rep58, column58),
      property58 = property58,
      column58 = column58,
      rep59 = wrap59.inputColumn(rep59, column59),
      property59 = property59,
      column59 = column59,
      rep60 = wrap60.inputColumn(rep60, column60),
      property60 = property60,
      column60 = column60,
      rep61 = wrap61.inputColumn(rep61, column61),
      property61 = property61,
      column61 = column61))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60, Rep61, Data61, Target61, Rep62, Data62, Target62](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo,
    rep57: Rep57,
    property57: PropertyType[Data57],
    column57: MacroColumnInfo,
    rep58: Rep58,
    property58: PropertyType[Data58],
    column58: MacroColumnInfo,
    rep59: Rep59,
    property59: PropertyType[Data59],
    column59: MacroColumnInfo,
    rep60: Rep60,
    property60: PropertyType[Data60],
    column60: MacroColumnInfo,
    rep61: Rep61,
    property61: PropertyType[Data61],
    column61: MacroColumnInfo,
    rep62: Rep62,
    property62: PropertyType[Data62],
    column62: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56],
    wrap57: RepGroupColumnWrapper.Aux[Rep57, Data57, Target57],
    wrap58: RepGroupColumnWrapper.Aux[Rep58, Data58, Target58],
    wrap59: RepGroupColumnWrapper.Aux[Rep59, Data59, Target59],
    wrap60: RepGroupColumnWrapper.Aux[Rep60, Data60, Target60],
    wrap61: RepGroupColumnWrapper.Aux[Rep61, Data61, Target61],
    wrap62: RepGroupColumnWrapper.Aux[Rep62, Data62, Target62]): DataGenWrap.Aux[CaseClassHelper62[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62], CaseClassDataHelper62[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62]] = {
    DataGenWrap.value[CaseClassHelper62[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62], CaseClassDataHelper62[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62]](new CaseClassHelper62(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56,
      rep57 = wrap57.inputColumn(rep57, column57),
      property57 = property57,
      column57 = column57,
      rep58 = wrap58.inputColumn(rep58, column58),
      property58 = property58,
      column58 = column58,
      rep59 = wrap59.inputColumn(rep59, column59),
      property59 = property59,
      column59 = column59,
      rep60 = wrap60.inputColumn(rep60, column60),
      property60 = property60,
      column60 = column60,
      rep61 = wrap61.inputColumn(rep61, column61),
      property61 = property61,
      column61 = column61,
      rep62 = wrap62.inputColumn(rep62, column62),
      property62 = property62,
      column62 = column62))
  }
  def withDataDescribe[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60, Rep61, Data61, Target61, Rep62, Data62, Target62, Rep63, Data63, Target63](
    rep1: Rep1,
    property1: PropertyType[Data1],
    column1: MacroColumnInfo,
    rep2: Rep2,
    property2: PropertyType[Data2],
    column2: MacroColumnInfo,
    rep3: Rep3,
    property3: PropertyType[Data3],
    column3: MacroColumnInfo,
    rep4: Rep4,
    property4: PropertyType[Data4],
    column4: MacroColumnInfo,
    rep5: Rep5,
    property5: PropertyType[Data5],
    column5: MacroColumnInfo,
    rep6: Rep6,
    property6: PropertyType[Data6],
    column6: MacroColumnInfo,
    rep7: Rep7,
    property7: PropertyType[Data7],
    column7: MacroColumnInfo,
    rep8: Rep8,
    property8: PropertyType[Data8],
    column8: MacroColumnInfo,
    rep9: Rep9,
    property9: PropertyType[Data9],
    column9: MacroColumnInfo,
    rep10: Rep10,
    property10: PropertyType[Data10],
    column10: MacroColumnInfo,
    rep11: Rep11,
    property11: PropertyType[Data11],
    column11: MacroColumnInfo,
    rep12: Rep12,
    property12: PropertyType[Data12],
    column12: MacroColumnInfo,
    rep13: Rep13,
    property13: PropertyType[Data13],
    column13: MacroColumnInfo,
    rep14: Rep14,
    property14: PropertyType[Data14],
    column14: MacroColumnInfo,
    rep15: Rep15,
    property15: PropertyType[Data15],
    column15: MacroColumnInfo,
    rep16: Rep16,
    property16: PropertyType[Data16],
    column16: MacroColumnInfo,
    rep17: Rep17,
    property17: PropertyType[Data17],
    column17: MacroColumnInfo,
    rep18: Rep18,
    property18: PropertyType[Data18],
    column18: MacroColumnInfo,
    rep19: Rep19,
    property19: PropertyType[Data19],
    column19: MacroColumnInfo,
    rep20: Rep20,
    property20: PropertyType[Data20],
    column20: MacroColumnInfo,
    rep21: Rep21,
    property21: PropertyType[Data21],
    column21: MacroColumnInfo,
    rep22: Rep22,
    property22: PropertyType[Data22],
    column22: MacroColumnInfo,
    rep23: Rep23,
    property23: PropertyType[Data23],
    column23: MacroColumnInfo,
    rep24: Rep24,
    property24: PropertyType[Data24],
    column24: MacroColumnInfo,
    rep25: Rep25,
    property25: PropertyType[Data25],
    column25: MacroColumnInfo,
    rep26: Rep26,
    property26: PropertyType[Data26],
    column26: MacroColumnInfo,
    rep27: Rep27,
    property27: PropertyType[Data27],
    column27: MacroColumnInfo,
    rep28: Rep28,
    property28: PropertyType[Data28],
    column28: MacroColumnInfo,
    rep29: Rep29,
    property29: PropertyType[Data29],
    column29: MacroColumnInfo,
    rep30: Rep30,
    property30: PropertyType[Data30],
    column30: MacroColumnInfo,
    rep31: Rep31,
    property31: PropertyType[Data31],
    column31: MacroColumnInfo,
    rep32: Rep32,
    property32: PropertyType[Data32],
    column32: MacroColumnInfo,
    rep33: Rep33,
    property33: PropertyType[Data33],
    column33: MacroColumnInfo,
    rep34: Rep34,
    property34: PropertyType[Data34],
    column34: MacroColumnInfo,
    rep35: Rep35,
    property35: PropertyType[Data35],
    column35: MacroColumnInfo,
    rep36: Rep36,
    property36: PropertyType[Data36],
    column36: MacroColumnInfo,
    rep37: Rep37,
    property37: PropertyType[Data37],
    column37: MacroColumnInfo,
    rep38: Rep38,
    property38: PropertyType[Data38],
    column38: MacroColumnInfo,
    rep39: Rep39,
    property39: PropertyType[Data39],
    column39: MacroColumnInfo,
    rep40: Rep40,
    property40: PropertyType[Data40],
    column40: MacroColumnInfo,
    rep41: Rep41,
    property41: PropertyType[Data41],
    column41: MacroColumnInfo,
    rep42: Rep42,
    property42: PropertyType[Data42],
    column42: MacroColumnInfo,
    rep43: Rep43,
    property43: PropertyType[Data43],
    column43: MacroColumnInfo,
    rep44: Rep44,
    property44: PropertyType[Data44],
    column44: MacroColumnInfo,
    rep45: Rep45,
    property45: PropertyType[Data45],
    column45: MacroColumnInfo,
    rep46: Rep46,
    property46: PropertyType[Data46],
    column46: MacroColumnInfo,
    rep47: Rep47,
    property47: PropertyType[Data47],
    column47: MacroColumnInfo,
    rep48: Rep48,
    property48: PropertyType[Data48],
    column48: MacroColumnInfo,
    rep49: Rep49,
    property49: PropertyType[Data49],
    column49: MacroColumnInfo,
    rep50: Rep50,
    property50: PropertyType[Data50],
    column50: MacroColumnInfo,
    rep51: Rep51,
    property51: PropertyType[Data51],
    column51: MacroColumnInfo,
    rep52: Rep52,
    property52: PropertyType[Data52],
    column52: MacroColumnInfo,
    rep53: Rep53,
    property53: PropertyType[Data53],
    column53: MacroColumnInfo,
    rep54: Rep54,
    property54: PropertyType[Data54],
    column54: MacroColumnInfo,
    rep55: Rep55,
    property55: PropertyType[Data55],
    column55: MacroColumnInfo,
    rep56: Rep56,
    property56: PropertyType[Data56],
    column56: MacroColumnInfo,
    rep57: Rep57,
    property57: PropertyType[Data57],
    column57: MacroColumnInfo,
    rep58: Rep58,
    property58: PropertyType[Data58],
    column58: MacroColumnInfo,
    rep59: Rep59,
    property59: PropertyType[Data59],
    column59: MacroColumnInfo,
    rep60: Rep60,
    property60: PropertyType[Data60],
    column60: MacroColumnInfo,
    rep61: Rep61,
    property61: PropertyType[Data61],
    column61: MacroColumnInfo,
    rep62: Rep62,
    property62: PropertyType[Data62],
    column62: MacroColumnInfo,
    rep63: Rep63,
    property63: PropertyType[Data63],
    column63: MacroColumnInfo)(implicit
    wrap1: RepGroupColumnWrapper.Aux[Rep1, Data1, Target1],
    wrap2: RepGroupColumnWrapper.Aux[Rep2, Data2, Target2],
    wrap3: RepGroupColumnWrapper.Aux[Rep3, Data3, Target3],
    wrap4: RepGroupColumnWrapper.Aux[Rep4, Data4, Target4],
    wrap5: RepGroupColumnWrapper.Aux[Rep5, Data5, Target5],
    wrap6: RepGroupColumnWrapper.Aux[Rep6, Data6, Target6],
    wrap7: RepGroupColumnWrapper.Aux[Rep7, Data7, Target7],
    wrap8: RepGroupColumnWrapper.Aux[Rep8, Data8, Target8],
    wrap9: RepGroupColumnWrapper.Aux[Rep9, Data9, Target9],
    wrap10: RepGroupColumnWrapper.Aux[Rep10, Data10, Target10],
    wrap11: RepGroupColumnWrapper.Aux[Rep11, Data11, Target11],
    wrap12: RepGroupColumnWrapper.Aux[Rep12, Data12, Target12],
    wrap13: RepGroupColumnWrapper.Aux[Rep13, Data13, Target13],
    wrap14: RepGroupColumnWrapper.Aux[Rep14, Data14, Target14],
    wrap15: RepGroupColumnWrapper.Aux[Rep15, Data15, Target15],
    wrap16: RepGroupColumnWrapper.Aux[Rep16, Data16, Target16],
    wrap17: RepGroupColumnWrapper.Aux[Rep17, Data17, Target17],
    wrap18: RepGroupColumnWrapper.Aux[Rep18, Data18, Target18],
    wrap19: RepGroupColumnWrapper.Aux[Rep19, Data19, Target19],
    wrap20: RepGroupColumnWrapper.Aux[Rep20, Data20, Target20],
    wrap21: RepGroupColumnWrapper.Aux[Rep21, Data21, Target21],
    wrap22: RepGroupColumnWrapper.Aux[Rep22, Data22, Target22],
    wrap23: RepGroupColumnWrapper.Aux[Rep23, Data23, Target23],
    wrap24: RepGroupColumnWrapper.Aux[Rep24, Data24, Target24],
    wrap25: RepGroupColumnWrapper.Aux[Rep25, Data25, Target25],
    wrap26: RepGroupColumnWrapper.Aux[Rep26, Data26, Target26],
    wrap27: RepGroupColumnWrapper.Aux[Rep27, Data27, Target27],
    wrap28: RepGroupColumnWrapper.Aux[Rep28, Data28, Target28],
    wrap29: RepGroupColumnWrapper.Aux[Rep29, Data29, Target29],
    wrap30: RepGroupColumnWrapper.Aux[Rep30, Data30, Target30],
    wrap31: RepGroupColumnWrapper.Aux[Rep31, Data31, Target31],
    wrap32: RepGroupColumnWrapper.Aux[Rep32, Data32, Target32],
    wrap33: RepGroupColumnWrapper.Aux[Rep33, Data33, Target33],
    wrap34: RepGroupColumnWrapper.Aux[Rep34, Data34, Target34],
    wrap35: RepGroupColumnWrapper.Aux[Rep35, Data35, Target35],
    wrap36: RepGroupColumnWrapper.Aux[Rep36, Data36, Target36],
    wrap37: RepGroupColumnWrapper.Aux[Rep37, Data37, Target37],
    wrap38: RepGroupColumnWrapper.Aux[Rep38, Data38, Target38],
    wrap39: RepGroupColumnWrapper.Aux[Rep39, Data39, Target39],
    wrap40: RepGroupColumnWrapper.Aux[Rep40, Data40, Target40],
    wrap41: RepGroupColumnWrapper.Aux[Rep41, Data41, Target41],
    wrap42: RepGroupColumnWrapper.Aux[Rep42, Data42, Target42],
    wrap43: RepGroupColumnWrapper.Aux[Rep43, Data43, Target43],
    wrap44: RepGroupColumnWrapper.Aux[Rep44, Data44, Target44],
    wrap45: RepGroupColumnWrapper.Aux[Rep45, Data45, Target45],
    wrap46: RepGroupColumnWrapper.Aux[Rep46, Data46, Target46],
    wrap47: RepGroupColumnWrapper.Aux[Rep47, Data47, Target47],
    wrap48: RepGroupColumnWrapper.Aux[Rep48, Data48, Target48],
    wrap49: RepGroupColumnWrapper.Aux[Rep49, Data49, Target49],
    wrap50: RepGroupColumnWrapper.Aux[Rep50, Data50, Target50],
    wrap51: RepGroupColumnWrapper.Aux[Rep51, Data51, Target51],
    wrap52: RepGroupColumnWrapper.Aux[Rep52, Data52, Target52],
    wrap53: RepGroupColumnWrapper.Aux[Rep53, Data53, Target53],
    wrap54: RepGroupColumnWrapper.Aux[Rep54, Data54, Target54],
    wrap55: RepGroupColumnWrapper.Aux[Rep55, Data55, Target55],
    wrap56: RepGroupColumnWrapper.Aux[Rep56, Data56, Target56],
    wrap57: RepGroupColumnWrapper.Aux[Rep57, Data57, Target57],
    wrap58: RepGroupColumnWrapper.Aux[Rep58, Data58, Target58],
    wrap59: RepGroupColumnWrapper.Aux[Rep59, Data59, Target59],
    wrap60: RepGroupColumnWrapper.Aux[Rep60, Data60, Target60],
    wrap61: RepGroupColumnWrapper.Aux[Rep61, Data61, Target61],
    wrap62: RepGroupColumnWrapper.Aux[Rep62, Data62, Target62],
    wrap63: RepGroupColumnWrapper.Aux[Rep63, Data63, Target63]): DataGenWrap.Aux[CaseClassHelper63[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62, Target63, Data63], CaseClassDataHelper63[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62, Data63]] = {
    DataGenWrap.value[CaseClassHelper63[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62, Target63, Data63], CaseClassDataHelper63[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62, Data63]](new CaseClassHelper63(
      rep1 = wrap1.inputColumn(rep1, column1),
      property1 = property1,
      column1 = column1,
      rep2 = wrap2.inputColumn(rep2, column2),
      property2 = property2,
      column2 = column2,
      rep3 = wrap3.inputColumn(rep3, column3),
      property3 = property3,
      column3 = column3,
      rep4 = wrap4.inputColumn(rep4, column4),
      property4 = property4,
      column4 = column4,
      rep5 = wrap5.inputColumn(rep5, column5),
      property5 = property5,
      column5 = column5,
      rep6 = wrap6.inputColumn(rep6, column6),
      property6 = property6,
      column6 = column6,
      rep7 = wrap7.inputColumn(rep7, column7),
      property7 = property7,
      column7 = column7,
      rep8 = wrap8.inputColumn(rep8, column8),
      property8 = property8,
      column8 = column8,
      rep9 = wrap9.inputColumn(rep9, column9),
      property9 = property9,
      column9 = column9,
      rep10 = wrap10.inputColumn(rep10, column10),
      property10 = property10,
      column10 = column10,
      rep11 = wrap11.inputColumn(rep11, column11),
      property11 = property11,
      column11 = column11,
      rep12 = wrap12.inputColumn(rep12, column12),
      property12 = property12,
      column12 = column12,
      rep13 = wrap13.inputColumn(rep13, column13),
      property13 = property13,
      column13 = column13,
      rep14 = wrap14.inputColumn(rep14, column14),
      property14 = property14,
      column14 = column14,
      rep15 = wrap15.inputColumn(rep15, column15),
      property15 = property15,
      column15 = column15,
      rep16 = wrap16.inputColumn(rep16, column16),
      property16 = property16,
      column16 = column16,
      rep17 = wrap17.inputColumn(rep17, column17),
      property17 = property17,
      column17 = column17,
      rep18 = wrap18.inputColumn(rep18, column18),
      property18 = property18,
      column18 = column18,
      rep19 = wrap19.inputColumn(rep19, column19),
      property19 = property19,
      column19 = column19,
      rep20 = wrap20.inputColumn(rep20, column20),
      property20 = property20,
      column20 = column20,
      rep21 = wrap21.inputColumn(rep21, column21),
      property21 = property21,
      column21 = column21,
      rep22 = wrap22.inputColumn(rep22, column22),
      property22 = property22,
      column22 = column22,
      rep23 = wrap23.inputColumn(rep23, column23),
      property23 = property23,
      column23 = column23,
      rep24 = wrap24.inputColumn(rep24, column24),
      property24 = property24,
      column24 = column24,
      rep25 = wrap25.inputColumn(rep25, column25),
      property25 = property25,
      column25 = column25,
      rep26 = wrap26.inputColumn(rep26, column26),
      property26 = property26,
      column26 = column26,
      rep27 = wrap27.inputColumn(rep27, column27),
      property27 = property27,
      column27 = column27,
      rep28 = wrap28.inputColumn(rep28, column28),
      property28 = property28,
      column28 = column28,
      rep29 = wrap29.inputColumn(rep29, column29),
      property29 = property29,
      column29 = column29,
      rep30 = wrap30.inputColumn(rep30, column30),
      property30 = property30,
      column30 = column30,
      rep31 = wrap31.inputColumn(rep31, column31),
      property31 = property31,
      column31 = column31,
      rep32 = wrap32.inputColumn(rep32, column32),
      property32 = property32,
      column32 = column32,
      rep33 = wrap33.inputColumn(rep33, column33),
      property33 = property33,
      column33 = column33,
      rep34 = wrap34.inputColumn(rep34, column34),
      property34 = property34,
      column34 = column34,
      rep35 = wrap35.inputColumn(rep35, column35),
      property35 = property35,
      column35 = column35,
      rep36 = wrap36.inputColumn(rep36, column36),
      property36 = property36,
      column36 = column36,
      rep37 = wrap37.inputColumn(rep37, column37),
      property37 = property37,
      column37 = column37,
      rep38 = wrap38.inputColumn(rep38, column38),
      property38 = property38,
      column38 = column38,
      rep39 = wrap39.inputColumn(rep39, column39),
      property39 = property39,
      column39 = column39,
      rep40 = wrap40.inputColumn(rep40, column40),
      property40 = property40,
      column40 = column40,
      rep41 = wrap41.inputColumn(rep41, column41),
      property41 = property41,
      column41 = column41,
      rep42 = wrap42.inputColumn(rep42, column42),
      property42 = property42,
      column42 = column42,
      rep43 = wrap43.inputColumn(rep43, column43),
      property43 = property43,
      column43 = column43,
      rep44 = wrap44.inputColumn(rep44, column44),
      property44 = property44,
      column44 = column44,
      rep45 = wrap45.inputColumn(rep45, column45),
      property45 = property45,
      column45 = column45,
      rep46 = wrap46.inputColumn(rep46, column46),
      property46 = property46,
      column46 = column46,
      rep47 = wrap47.inputColumn(rep47, column47),
      property47 = property47,
      column47 = column47,
      rep48 = wrap48.inputColumn(rep48, column48),
      property48 = property48,
      column48 = column48,
      rep49 = wrap49.inputColumn(rep49, column49),
      property49 = property49,
      column49 = column49,
      rep50 = wrap50.inputColumn(rep50, column50),
      property50 = property50,
      column50 = column50,
      rep51 = wrap51.inputColumn(rep51, column51),
      property51 = property51,
      column51 = column51,
      rep52 = wrap52.inputColumn(rep52, column52),
      property52 = property52,
      column52 = column52,
      rep53 = wrap53.inputColumn(rep53, column53),
      property53 = property53,
      column53 = column53,
      rep54 = wrap54.inputColumn(rep54, column54),
      property54 = property54,
      column54 = column54,
      rep55 = wrap55.inputColumn(rep55, column55),
      property55 = property55,
      column55 = column55,
      rep56 = wrap56.inputColumn(rep56, column56),
      property56 = property56,
      column56 = column56,
      rep57 = wrap57.inputColumn(rep57, column57),
      property57 = property57,
      column57 = column57,
      rep58 = wrap58.inputColumn(rep58, column58),
      property58 = property58,
      column58 = column58,
      rep59 = wrap59.inputColumn(rep59, column59),
      property59 = property59,
      column59 = column59,
      rep60 = wrap60.inputColumn(rep60, column60),
      property60 = property60,
      column60 = column60,
      rep61 = wrap61.inputColumn(rep61, column61),
      property61 = property61,
      column61 = column61,
      rep62 = wrap62.inputColumn(rep62, column62),
      property62 = property62,
      column62 = column62,
      rep63 = wrap63.inputColumn(rep63, column63),
      property63 = property63,
      column63 = column63))
  }
}
class CaseClassHelper1[Rep1, Data1](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo) {
}
class CaseClassDataHelper1[Data1](
  val data1: Data1,
  val column1: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper1
object CaseClassHelper1 {
  implicit def caseClassHelper1EncoderGen[Rep1, Data1, Target1, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper1[Rep1, Data1], CaseClassDataHelper1[Data1], CaseClassHelper1[Target1, Data1], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper1[Rep1, Data1], RepCol, DataCol] {
      override type Target = CaseClassHelper1[Target1, Data1]
      override type Data = CaseClassDataHelper1[Data1]
      override def wrapRep(base: CaseClassHelper1[Rep1, Data1]): CaseClassHelper1[Target1, Data1] = {
        new CaseClassHelper1(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1)
      }
      override def toLawRep(base: CaseClassHelper1[Target1, Data1], oldRep: RepCol): RepCol = {
        val rep2 = oldRep
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper1[Data1], rep: CaseClassHelper1[Target1, Data1], oldData: DataCol): DataCol = {
        val data2 = oldData
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper1DecoderGen[Rep1, Data1, Target1, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper1[Rep1, Data1], CaseClassDataHelper1[Data1], CaseClassHelper1[Target1, Data1], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper1[Rep1, Data1], RepCol, DataCol] {
      override type Target = CaseClassHelper1[Target1, Data1]
      override type Data = CaseClassDataHelper1[Data1]
      override def wrapRep(base: CaseClassHelper1[Rep1, Data1]): CaseClassHelper1[Target1, Data1] = {
        new CaseClassHelper1(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1)
      }
      override def toLawRep(base: CaseClassHelper1[Target1, Data1], oldRep: RepCol): RepCol = {
        val rep2 = oldRep
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper1[Target1, Data1], oldDataCol: DataCol): SplitData[CaseClassDataHelper1[Data1], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        SplitData(
          current = new CaseClassDataHelper1(
            data1 = item1,
            column1 = rep.column1),
          left = dataCol1)
      }
    }
  }
}
class CaseClassHelper2[Rep1, Data1, Rep2, Data2](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo) {
}
class CaseClassDataHelper2[Data1, Data2](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper2
object CaseClassHelper2 {
  implicit def caseClassHelper2EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper2[Rep1, Data1, Rep2, Data2], CaseClassDataHelper2[Data1, Data2], CaseClassHelper2[Target1, Data1, Target2, Data2], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper2[Rep1, Data1, Rep2, Data2], RepCol, DataCol] {
      override type Target = CaseClassHelper2[Target1, Data1, Target2, Data2]
      override type Data = CaseClassDataHelper2[Data1, Data2]
      override def wrapRep(base: CaseClassHelper2[Rep1, Data1, Rep2, Data2]): CaseClassHelper2[Target1, Data1, Target2, Data2] = {
        new CaseClassHelper2(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2)
      }
      override def toLawRep(base: CaseClassHelper2[Target1, Data1, Target2, Data2], oldRep: RepCol): RepCol = {
        val rep3 = oldRep
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper2[Data1, Data2], rep: CaseClassHelper2[Target1, Data1, Target2, Data2], oldData: DataCol): DataCol = {
        val data3 = oldData
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper2DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper2[Rep1, Data1, Rep2, Data2], CaseClassDataHelper2[Data1, Data2], CaseClassHelper2[Target1, Data1, Target2, Data2], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper2[Rep1, Data1, Rep2, Data2], RepCol, DataCol] {
      override type Target = CaseClassHelper2[Target1, Data1, Target2, Data2]
      override type Data = CaseClassDataHelper2[Data1, Data2]
      override def wrapRep(base: CaseClassHelper2[Rep1, Data1, Rep2, Data2]): CaseClassHelper2[Target1, Data1, Target2, Data2] = {
        new CaseClassHelper2(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2)
      }
      override def toLawRep(base: CaseClassHelper2[Target1, Data1, Target2, Data2], oldRep: RepCol): RepCol = {
        val rep3 = oldRep
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper2[Target1, Data1, Target2, Data2], oldDataCol: DataCol): SplitData[CaseClassDataHelper2[Data1, Data2], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        SplitData(
          current = new CaseClassDataHelper2(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2),
          left = dataCol2)
      }
    }
  }
}
class CaseClassHelper3[Rep1, Data1, Rep2, Data2, Rep3, Data3](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo) {
}
class CaseClassDataHelper3[Data1, Data2, Data3](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper3
object CaseClassHelper3 {
  implicit def caseClassHelper3EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper3[Rep1, Data1, Rep2, Data2, Rep3, Data3], CaseClassDataHelper3[Data1, Data2, Data3], CaseClassHelper3[Target1, Data1, Target2, Data2, Target3, Data3], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper3[Rep1, Data1, Rep2, Data2, Rep3, Data3], RepCol, DataCol] {
      override type Target = CaseClassHelper3[Target1, Data1, Target2, Data2, Target3, Data3]
      override type Data = CaseClassDataHelper3[Data1, Data2, Data3]
      override def wrapRep(base: CaseClassHelper3[Rep1, Data1, Rep2, Data2, Rep3, Data3]): CaseClassHelper3[Target1, Data1, Target2, Data2, Target3, Data3] = {
        new CaseClassHelper3(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3)
      }
      override def toLawRep(base: CaseClassHelper3[Target1, Data1, Target2, Data2, Target3, Data3], oldRep: RepCol): RepCol = {
        val rep4 = oldRep
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper3[Data1, Data2, Data3], rep: CaseClassHelper3[Target1, Data1, Target2, Data2, Target3, Data3], oldData: DataCol): DataCol = {
        val data4 = oldData
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper3DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper3[Rep1, Data1, Rep2, Data2, Rep3, Data3], CaseClassDataHelper3[Data1, Data2, Data3], CaseClassHelper3[Target1, Data1, Target2, Data2, Target3, Data3], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper3[Rep1, Data1, Rep2, Data2, Rep3, Data3], RepCol, DataCol] {
      override type Target = CaseClassHelper3[Target1, Data1, Target2, Data2, Target3, Data3]
      override type Data = CaseClassDataHelper3[Data1, Data2, Data3]
      override def wrapRep(base: CaseClassHelper3[Rep1, Data1, Rep2, Data2, Rep3, Data3]): CaseClassHelper3[Target1, Data1, Target2, Data2, Target3, Data3] = {
        new CaseClassHelper3(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3)
      }
      override def toLawRep(base: CaseClassHelper3[Target1, Data1, Target2, Data2, Target3, Data3], oldRep: RepCol): RepCol = {
        val rep4 = oldRep
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper3[Target1, Data1, Target2, Data2, Target3, Data3], oldDataCol: DataCol): SplitData[CaseClassDataHelper3[Data1, Data2, Data3], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        SplitData(
          current = new CaseClassDataHelper3(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3),
          left = dataCol3)
      }
    }
  }
}
class CaseClassHelper4[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo) {
}
class CaseClassDataHelper4[Data1, Data2, Data3, Data4](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper4
object CaseClassHelper4 {
  implicit def caseClassHelper4EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper4[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4], CaseClassDataHelper4[Data1, Data2, Data3, Data4], CaseClassHelper4[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper4[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4], RepCol, DataCol] {
      override type Target = CaseClassHelper4[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4]
      override type Data = CaseClassDataHelper4[Data1, Data2, Data3, Data4]
      override def wrapRep(base: CaseClassHelper4[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4]): CaseClassHelper4[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4] = {
        new CaseClassHelper4(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4)
      }
      override def toLawRep(base: CaseClassHelper4[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4], oldRep: RepCol): RepCol = {
        val rep5 = oldRep
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper4[Data1, Data2, Data3, Data4], rep: CaseClassHelper4[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4], oldData: DataCol): DataCol = {
        val data5 = oldData
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper4DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper4[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4], CaseClassDataHelper4[Data1, Data2, Data3, Data4], CaseClassHelper4[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper4[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4], RepCol, DataCol] {
      override type Target = CaseClassHelper4[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4]
      override type Data = CaseClassDataHelper4[Data1, Data2, Data3, Data4]
      override def wrapRep(base: CaseClassHelper4[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4]): CaseClassHelper4[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4] = {
        new CaseClassHelper4(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4)
      }
      override def toLawRep(base: CaseClassHelper4[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4], oldRep: RepCol): RepCol = {
        val rep5 = oldRep
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper4[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4], oldDataCol: DataCol): SplitData[CaseClassDataHelper4[Data1, Data2, Data3, Data4], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        SplitData(
          current = new CaseClassDataHelper4(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4),
          left = dataCol4)
      }
    }
  }
}
class CaseClassHelper5[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo) {
}
class CaseClassDataHelper5[Data1, Data2, Data3, Data4, Data5](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper5
object CaseClassHelper5 {
  implicit def caseClassHelper5EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper5[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5], CaseClassDataHelper5[Data1, Data2, Data3, Data4, Data5], CaseClassHelper5[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper5[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5], RepCol, DataCol] {
      override type Target = CaseClassHelper5[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5]
      override type Data = CaseClassDataHelper5[Data1, Data2, Data3, Data4, Data5]
      override def wrapRep(base: CaseClassHelper5[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5]): CaseClassHelper5[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5] = {
        new CaseClassHelper5(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5)
      }
      override def toLawRep(base: CaseClassHelper5[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5], oldRep: RepCol): RepCol = {
        val rep6 = oldRep
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper5[Data1, Data2, Data3, Data4, Data5], rep: CaseClassHelper5[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5], oldData: DataCol): DataCol = {
        val data6 = oldData
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper5DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper5[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5], CaseClassDataHelper5[Data1, Data2, Data3, Data4, Data5], CaseClassHelper5[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper5[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5], RepCol, DataCol] {
      override type Target = CaseClassHelper5[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5]
      override type Data = CaseClassDataHelper5[Data1, Data2, Data3, Data4, Data5]
      override def wrapRep(base: CaseClassHelper5[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5]): CaseClassHelper5[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5] = {
        new CaseClassHelper5(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5)
      }
      override def toLawRep(base: CaseClassHelper5[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5], oldRep: RepCol): RepCol = {
        val rep6 = oldRep
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper5[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5], oldDataCol: DataCol): SplitData[CaseClassDataHelper5[Data1, Data2, Data3, Data4, Data5], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        SplitData(
          current = new CaseClassDataHelper5(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5),
          left = dataCol5)
      }
    }
  }
}
class CaseClassHelper6[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo) {
}
class CaseClassDataHelper6[Data1, Data2, Data3, Data4, Data5, Data6](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper6
object CaseClassHelper6 {
  implicit def caseClassHelper6EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper6[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6], CaseClassDataHelper6[Data1, Data2, Data3, Data4, Data5, Data6], CaseClassHelper6[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper6[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6], RepCol, DataCol] {
      override type Target = CaseClassHelper6[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6]
      override type Data = CaseClassDataHelper6[Data1, Data2, Data3, Data4, Data5, Data6]
      override def wrapRep(base: CaseClassHelper6[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6]): CaseClassHelper6[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6] = {
        new CaseClassHelper6(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6)
      }
      override def toLawRep(base: CaseClassHelper6[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6], oldRep: RepCol): RepCol = {
        val rep7 = oldRep
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper6[Data1, Data2, Data3, Data4, Data5, Data6], rep: CaseClassHelper6[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6], oldData: DataCol): DataCol = {
        val data7 = oldData
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper6DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper6[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6], CaseClassDataHelper6[Data1, Data2, Data3, Data4, Data5, Data6], CaseClassHelper6[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper6[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6], RepCol, DataCol] {
      override type Target = CaseClassHelper6[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6]
      override type Data = CaseClassDataHelper6[Data1, Data2, Data3, Data4, Data5, Data6]
      override def wrapRep(base: CaseClassHelper6[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6]): CaseClassHelper6[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6] = {
        new CaseClassHelper6(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6)
      }
      override def toLawRep(base: CaseClassHelper6[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6], oldRep: RepCol): RepCol = {
        val rep7 = oldRep
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper6[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6], oldDataCol: DataCol): SplitData[CaseClassDataHelper6[Data1, Data2, Data3, Data4, Data5, Data6], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        SplitData(
          current = new CaseClassDataHelper6(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6),
          left = dataCol6)
      }
    }
  }
}
class CaseClassHelper7[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo) {
}
class CaseClassDataHelper7[Data1, Data2, Data3, Data4, Data5, Data6, Data7](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper7
object CaseClassHelper7 {
  implicit def caseClassHelper7EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper7[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7], CaseClassDataHelper7[Data1, Data2, Data3, Data4, Data5, Data6, Data7], CaseClassHelper7[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper7[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7], RepCol, DataCol] {
      override type Target = CaseClassHelper7[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7]
      override type Data = CaseClassDataHelper7[Data1, Data2, Data3, Data4, Data5, Data6, Data7]
      override def wrapRep(base: CaseClassHelper7[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7]): CaseClassHelper7[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7] = {
        new CaseClassHelper7(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7)
      }
      override def toLawRep(base: CaseClassHelper7[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7], oldRep: RepCol): RepCol = {
        val rep8 = oldRep
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper7[Data1, Data2, Data3, Data4, Data5, Data6, Data7], rep: CaseClassHelper7[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7], oldData: DataCol): DataCol = {
        val data8 = oldData
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper7DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper7[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7], CaseClassDataHelper7[Data1, Data2, Data3, Data4, Data5, Data6, Data7], CaseClassHelper7[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper7[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7], RepCol, DataCol] {
      override type Target = CaseClassHelper7[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7]
      override type Data = CaseClassDataHelper7[Data1, Data2, Data3, Data4, Data5, Data6, Data7]
      override def wrapRep(base: CaseClassHelper7[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7]): CaseClassHelper7[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7] = {
        new CaseClassHelper7(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7)
      }
      override def toLawRep(base: CaseClassHelper7[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7], oldRep: RepCol): RepCol = {
        val rep8 = oldRep
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper7[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7], oldDataCol: DataCol): SplitData[CaseClassDataHelper7[Data1, Data2, Data3, Data4, Data5, Data6, Data7], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        SplitData(
          current = new CaseClassDataHelper7(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7),
          left = dataCol7)
      }
    }
  }
}
class CaseClassHelper8[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo) {
}
class CaseClassDataHelper8[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper8
object CaseClassHelper8 {
  implicit def caseClassHelper8EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper8[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8], CaseClassDataHelper8[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8], CaseClassHelper8[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper8[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8], RepCol, DataCol] {
      override type Target = CaseClassHelper8[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8]
      override type Data = CaseClassDataHelper8[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8]
      override def wrapRep(base: CaseClassHelper8[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8]): CaseClassHelper8[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8] = {
        new CaseClassHelper8(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8)
      }
      override def toLawRep(base: CaseClassHelper8[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8], oldRep: RepCol): RepCol = {
        val rep9 = oldRep
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper8[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8], rep: CaseClassHelper8[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8], oldData: DataCol): DataCol = {
        val data9 = oldData
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper8DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper8[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8], CaseClassDataHelper8[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8], CaseClassHelper8[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper8[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8], RepCol, DataCol] {
      override type Target = CaseClassHelper8[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8]
      override type Data = CaseClassDataHelper8[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8]
      override def wrapRep(base: CaseClassHelper8[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8]): CaseClassHelper8[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8] = {
        new CaseClassHelper8(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8)
      }
      override def toLawRep(base: CaseClassHelper8[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8], oldRep: RepCol): RepCol = {
        val rep9 = oldRep
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper8[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8], oldDataCol: DataCol): SplitData[CaseClassDataHelper8[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        SplitData(
          current = new CaseClassDataHelper8(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8),
          left = dataCol8)
      }
    }
  }
}
class CaseClassHelper9[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo) {
}
class CaseClassDataHelper9[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper9
object CaseClassHelper9 {
  implicit def caseClassHelper9EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper9[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9], CaseClassDataHelper9[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9], CaseClassHelper9[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper9[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9], RepCol, DataCol] {
      override type Target = CaseClassHelper9[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9]
      override type Data = CaseClassDataHelper9[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9]
      override def wrapRep(base: CaseClassHelper9[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9]): CaseClassHelper9[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9] = {
        new CaseClassHelper9(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9)
      }
      override def toLawRep(base: CaseClassHelper9[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9], oldRep: RepCol): RepCol = {
        val rep10 = oldRep
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper9[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9], rep: CaseClassHelper9[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9], oldData: DataCol): DataCol = {
        val data10 = oldData
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper9DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper9[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9], CaseClassDataHelper9[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9], CaseClassHelper9[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper9[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9], RepCol, DataCol] {
      override type Target = CaseClassHelper9[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9]
      override type Data = CaseClassDataHelper9[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9]
      override def wrapRep(base: CaseClassHelper9[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9]): CaseClassHelper9[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9] = {
        new CaseClassHelper9(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9)
      }
      override def toLawRep(base: CaseClassHelper9[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9], oldRep: RepCol): RepCol = {
        val rep10 = oldRep
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper9[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9], oldDataCol: DataCol): SplitData[CaseClassDataHelper9[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        SplitData(
          current = new CaseClassDataHelper9(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9),
          left = dataCol9)
      }
    }
  }
}
class CaseClassHelper10[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo) {
}
class CaseClassDataHelper10[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper10
object CaseClassHelper10 {
  implicit def caseClassHelper10EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper10[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10], CaseClassDataHelper10[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10], CaseClassHelper10[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper10[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10], RepCol, DataCol] {
      override type Target = CaseClassHelper10[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10]
      override type Data = CaseClassDataHelper10[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10]
      override def wrapRep(base: CaseClassHelper10[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10]): CaseClassHelper10[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10] = {
        new CaseClassHelper10(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10)
      }
      override def toLawRep(base: CaseClassHelper10[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10], oldRep: RepCol): RepCol = {
        val rep11 = oldRep
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper10[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10], rep: CaseClassHelper10[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10], oldData: DataCol): DataCol = {
        val data11 = oldData
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper10DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper10[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10], CaseClassDataHelper10[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10], CaseClassHelper10[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper10[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10], RepCol, DataCol] {
      override type Target = CaseClassHelper10[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10]
      override type Data = CaseClassDataHelper10[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10]
      override def wrapRep(base: CaseClassHelper10[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10]): CaseClassHelper10[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10] = {
        new CaseClassHelper10(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10)
      }
      override def toLawRep(base: CaseClassHelper10[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10], oldRep: RepCol): RepCol = {
        val rep11 = oldRep
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper10[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10], oldDataCol: DataCol): SplitData[CaseClassDataHelper10[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        SplitData(
          current = new CaseClassDataHelper10(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10),
          left = dataCol10)
      }
    }
  }
}
class CaseClassHelper11[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo) {
}
class CaseClassDataHelper11[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper11
object CaseClassHelper11 {
  implicit def caseClassHelper11EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper11[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11], CaseClassDataHelper11[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11], CaseClassHelper11[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper11[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11], RepCol, DataCol] {
      override type Target = CaseClassHelper11[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11]
      override type Data = CaseClassDataHelper11[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11]
      override def wrapRep(base: CaseClassHelper11[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11]): CaseClassHelper11[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11] = {
        new CaseClassHelper11(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11)
      }
      override def toLawRep(base: CaseClassHelper11[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11], oldRep: RepCol): RepCol = {
        val rep12 = oldRep
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper11[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11], rep: CaseClassHelper11[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11], oldData: DataCol): DataCol = {
        val data12 = oldData
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper11DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper11[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11], CaseClassDataHelper11[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11], CaseClassHelper11[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper11[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11], RepCol, DataCol] {
      override type Target = CaseClassHelper11[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11]
      override type Data = CaseClassDataHelper11[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11]
      override def wrapRep(base: CaseClassHelper11[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11]): CaseClassHelper11[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11] = {
        new CaseClassHelper11(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11)
      }
      override def toLawRep(base: CaseClassHelper11[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11], oldRep: RepCol): RepCol = {
        val rep12 = oldRep
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper11[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11], oldDataCol: DataCol): SplitData[CaseClassDataHelper11[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        SplitData(
          current = new CaseClassDataHelper11(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11),
          left = dataCol11)
      }
    }
  }
}
class CaseClassHelper12[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo) {
}
class CaseClassDataHelper12[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper12
object CaseClassHelper12 {
  implicit def caseClassHelper12EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper12[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12], CaseClassDataHelper12[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12], CaseClassHelper12[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper12[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12], RepCol, DataCol] {
      override type Target = CaseClassHelper12[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12]
      override type Data = CaseClassDataHelper12[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12]
      override def wrapRep(base: CaseClassHelper12[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12]): CaseClassHelper12[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12] = {
        new CaseClassHelper12(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12)
      }
      override def toLawRep(base: CaseClassHelper12[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12], oldRep: RepCol): RepCol = {
        val rep13 = oldRep
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper12[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12], rep: CaseClassHelper12[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12], oldData: DataCol): DataCol = {
        val data13 = oldData
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper12DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper12[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12], CaseClassDataHelper12[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12], CaseClassHelper12[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper12[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12], RepCol, DataCol] {
      override type Target = CaseClassHelper12[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12]
      override type Data = CaseClassDataHelper12[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12]
      override def wrapRep(base: CaseClassHelper12[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12]): CaseClassHelper12[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12] = {
        new CaseClassHelper12(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12)
      }
      override def toLawRep(base: CaseClassHelper12[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12], oldRep: RepCol): RepCol = {
        val rep13 = oldRep
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper12[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12], oldDataCol: DataCol): SplitData[CaseClassDataHelper12[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        SplitData(
          current = new CaseClassDataHelper12(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12),
          left = dataCol12)
      }
    }
  }
}
class CaseClassHelper13[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo) {
}
class CaseClassDataHelper13[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper13
object CaseClassHelper13 {
  implicit def caseClassHelper13EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper13[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13], CaseClassDataHelper13[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13], CaseClassHelper13[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper13[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13], RepCol, DataCol] {
      override type Target = CaseClassHelper13[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13]
      override type Data = CaseClassDataHelper13[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13]
      override def wrapRep(base: CaseClassHelper13[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13]): CaseClassHelper13[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13] = {
        new CaseClassHelper13(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13)
      }
      override def toLawRep(base: CaseClassHelper13[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13], oldRep: RepCol): RepCol = {
        val rep14 = oldRep
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper13[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13], rep: CaseClassHelper13[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13], oldData: DataCol): DataCol = {
        val data14 = oldData
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper13DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper13[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13], CaseClassDataHelper13[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13], CaseClassHelper13[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper13[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13], RepCol, DataCol] {
      override type Target = CaseClassHelper13[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13]
      override type Data = CaseClassDataHelper13[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13]
      override def wrapRep(base: CaseClassHelper13[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13]): CaseClassHelper13[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13] = {
        new CaseClassHelper13(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13)
      }
      override def toLawRep(base: CaseClassHelper13[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13], oldRep: RepCol): RepCol = {
        val rep14 = oldRep
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper13[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13], oldDataCol: DataCol): SplitData[CaseClassDataHelper13[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        SplitData(
          current = new CaseClassDataHelper13(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13),
          left = dataCol13)
      }
    }
  }
}
class CaseClassHelper14[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo) {
}
class CaseClassDataHelper14[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper14
object CaseClassHelper14 {
  implicit def caseClassHelper14EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper14[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14], CaseClassDataHelper14[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14], CaseClassHelper14[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper14[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14], RepCol, DataCol] {
      override type Target = CaseClassHelper14[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14]
      override type Data = CaseClassDataHelper14[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14]
      override def wrapRep(base: CaseClassHelper14[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14]): CaseClassHelper14[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14] = {
        new CaseClassHelper14(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14)
      }
      override def toLawRep(base: CaseClassHelper14[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14], oldRep: RepCol): RepCol = {
        val rep15 = oldRep
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper14[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14], rep: CaseClassHelper14[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14], oldData: DataCol): DataCol = {
        val data15 = oldData
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper14DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper14[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14], CaseClassDataHelper14[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14], CaseClassHelper14[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper14[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14], RepCol, DataCol] {
      override type Target = CaseClassHelper14[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14]
      override type Data = CaseClassDataHelper14[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14]
      override def wrapRep(base: CaseClassHelper14[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14]): CaseClassHelper14[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14] = {
        new CaseClassHelper14(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14)
      }
      override def toLawRep(base: CaseClassHelper14[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14], oldRep: RepCol): RepCol = {
        val rep15 = oldRep
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper14[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14], oldDataCol: DataCol): SplitData[CaseClassDataHelper14[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        SplitData(
          current = new CaseClassDataHelper14(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14),
          left = dataCol14)
      }
    }
  }
}
class CaseClassHelper15[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo) {
}
class CaseClassDataHelper15[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper15
object CaseClassHelper15 {
  implicit def caseClassHelper15EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper15[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15], CaseClassDataHelper15[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15], CaseClassHelper15[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper15[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15], RepCol, DataCol] {
      override type Target = CaseClassHelper15[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15]
      override type Data = CaseClassDataHelper15[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15]
      override def wrapRep(base: CaseClassHelper15[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15]): CaseClassHelper15[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15] = {
        new CaseClassHelper15(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15)
      }
      override def toLawRep(base: CaseClassHelper15[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15], oldRep: RepCol): RepCol = {
        val rep16 = oldRep
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper15[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15], rep: CaseClassHelper15[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15], oldData: DataCol): DataCol = {
        val data16 = oldData
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper15DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper15[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15], CaseClassDataHelper15[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15], CaseClassHelper15[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper15[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15], RepCol, DataCol] {
      override type Target = CaseClassHelper15[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15]
      override type Data = CaseClassDataHelper15[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15]
      override def wrapRep(base: CaseClassHelper15[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15]): CaseClassHelper15[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15] = {
        new CaseClassHelper15(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15)
      }
      override def toLawRep(base: CaseClassHelper15[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15], oldRep: RepCol): RepCol = {
        val rep16 = oldRep
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper15[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15], oldDataCol: DataCol): SplitData[CaseClassDataHelper15[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        SplitData(
          current = new CaseClassDataHelper15(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15),
          left = dataCol15)
      }
    }
  }
}
class CaseClassHelper16[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo) {
}
class CaseClassDataHelper16[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper16
object CaseClassHelper16 {
  implicit def caseClassHelper16EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper16[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16], CaseClassDataHelper16[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16], CaseClassHelper16[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper16[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16], RepCol, DataCol] {
      override type Target = CaseClassHelper16[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16]
      override type Data = CaseClassDataHelper16[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16]
      override def wrapRep(base: CaseClassHelper16[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16]): CaseClassHelper16[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16] = {
        new CaseClassHelper16(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16)
      }
      override def toLawRep(base: CaseClassHelper16[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16], oldRep: RepCol): RepCol = {
        val rep17 = oldRep
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper16[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16], rep: CaseClassHelper16[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16], oldData: DataCol): DataCol = {
        val data17 = oldData
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper16DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper16[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16], CaseClassDataHelper16[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16], CaseClassHelper16[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper16[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16], RepCol, DataCol] {
      override type Target = CaseClassHelper16[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16]
      override type Data = CaseClassDataHelper16[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16]
      override def wrapRep(base: CaseClassHelper16[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16]): CaseClassHelper16[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16] = {
        new CaseClassHelper16(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16)
      }
      override def toLawRep(base: CaseClassHelper16[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16], oldRep: RepCol): RepCol = {
        val rep17 = oldRep
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper16[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16], oldDataCol: DataCol): SplitData[CaseClassDataHelper16[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        SplitData(
          current = new CaseClassDataHelper16(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16),
          left = dataCol16)
      }
    }
  }
}
class CaseClassHelper17[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo) {
}
class CaseClassDataHelper17[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper17
object CaseClassHelper17 {
  implicit def caseClassHelper17EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper17[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17], CaseClassDataHelper17[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17], CaseClassHelper17[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper17[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17], RepCol, DataCol] {
      override type Target = CaseClassHelper17[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17]
      override type Data = CaseClassDataHelper17[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17]
      override def wrapRep(base: CaseClassHelper17[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17]): CaseClassHelper17[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17] = {
        new CaseClassHelper17(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17)
      }
      override def toLawRep(base: CaseClassHelper17[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17], oldRep: RepCol): RepCol = {
        val rep18 = oldRep
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper17[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17], rep: CaseClassHelper17[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17], oldData: DataCol): DataCol = {
        val data18 = oldData
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper17DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper17[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17], CaseClassDataHelper17[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17], CaseClassHelper17[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper17[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17], RepCol, DataCol] {
      override type Target = CaseClassHelper17[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17]
      override type Data = CaseClassDataHelper17[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17]
      override def wrapRep(base: CaseClassHelper17[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17]): CaseClassHelper17[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17] = {
        new CaseClassHelper17(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17)
      }
      override def toLawRep(base: CaseClassHelper17[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17], oldRep: RepCol): RepCol = {
        val rep18 = oldRep
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper17[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17], oldDataCol: DataCol): SplitData[CaseClassDataHelper17[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        SplitData(
          current = new CaseClassDataHelper17(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17),
          left = dataCol17)
      }
    }
  }
}
class CaseClassHelper18[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo) {
}
class CaseClassDataHelper18[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper18
object CaseClassHelper18 {
  implicit def caseClassHelper18EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper18[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18], CaseClassDataHelper18[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18], CaseClassHelper18[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper18[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18], RepCol, DataCol] {
      override type Target = CaseClassHelper18[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18]
      override type Data = CaseClassDataHelper18[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18]
      override def wrapRep(base: CaseClassHelper18[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18]): CaseClassHelper18[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18] = {
        new CaseClassHelper18(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18)
      }
      override def toLawRep(base: CaseClassHelper18[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18], oldRep: RepCol): RepCol = {
        val rep19 = oldRep
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper18[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18], rep: CaseClassHelper18[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18], oldData: DataCol): DataCol = {
        val data19 = oldData
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper18DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper18[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18], CaseClassDataHelper18[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18], CaseClassHelper18[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper18[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18], RepCol, DataCol] {
      override type Target = CaseClassHelper18[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18]
      override type Data = CaseClassDataHelper18[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18]
      override def wrapRep(base: CaseClassHelper18[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18]): CaseClassHelper18[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18] = {
        new CaseClassHelper18(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18)
      }
      override def toLawRep(base: CaseClassHelper18[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18], oldRep: RepCol): RepCol = {
        val rep19 = oldRep
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper18[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18], oldDataCol: DataCol): SplitData[CaseClassDataHelper18[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        SplitData(
          current = new CaseClassDataHelper18(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18),
          left = dataCol18)
      }
    }
  }
}
class CaseClassHelper19[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo) {
}
class CaseClassDataHelper19[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper19
object CaseClassHelper19 {
  implicit def caseClassHelper19EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper19[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19], CaseClassDataHelper19[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19], CaseClassHelper19[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper19[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19], RepCol, DataCol] {
      override type Target = CaseClassHelper19[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19]
      override type Data = CaseClassDataHelper19[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19]
      override def wrapRep(base: CaseClassHelper19[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19]): CaseClassHelper19[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19] = {
        new CaseClassHelper19(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19)
      }
      override def toLawRep(base: CaseClassHelper19[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19], oldRep: RepCol): RepCol = {
        val rep20 = oldRep
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper19[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19], rep: CaseClassHelper19[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19], oldData: DataCol): DataCol = {
        val data20 = oldData
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper19DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper19[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19], CaseClassDataHelper19[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19], CaseClassHelper19[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper19[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19], RepCol, DataCol] {
      override type Target = CaseClassHelper19[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19]
      override type Data = CaseClassDataHelper19[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19]
      override def wrapRep(base: CaseClassHelper19[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19]): CaseClassHelper19[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19] = {
        new CaseClassHelper19(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19)
      }
      override def toLawRep(base: CaseClassHelper19[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19], oldRep: RepCol): RepCol = {
        val rep20 = oldRep
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper19[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19], oldDataCol: DataCol): SplitData[CaseClassDataHelper19[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        SplitData(
          current = new CaseClassDataHelper19(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19),
          left = dataCol19)
      }
    }
  }
}
class CaseClassHelper20[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo) {
}
class CaseClassDataHelper20[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper20
object CaseClassHelper20 {
  implicit def caseClassHelper20EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper20[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20], CaseClassDataHelper20[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20], CaseClassHelper20[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper20[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20], RepCol, DataCol] {
      override type Target = CaseClassHelper20[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20]
      override type Data = CaseClassDataHelper20[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20]
      override def wrapRep(base: CaseClassHelper20[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20]): CaseClassHelper20[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20] = {
        new CaseClassHelper20(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20)
      }
      override def toLawRep(base: CaseClassHelper20[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20], oldRep: RepCol): RepCol = {
        val rep21 = oldRep
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper20[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20], rep: CaseClassHelper20[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20], oldData: DataCol): DataCol = {
        val data21 = oldData
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper20DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper20[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20], CaseClassDataHelper20[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20], CaseClassHelper20[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper20[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20], RepCol, DataCol] {
      override type Target = CaseClassHelper20[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20]
      override type Data = CaseClassDataHelper20[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20]
      override def wrapRep(base: CaseClassHelper20[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20]): CaseClassHelper20[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20] = {
        new CaseClassHelper20(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20)
      }
      override def toLawRep(base: CaseClassHelper20[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20], oldRep: RepCol): RepCol = {
        val rep21 = oldRep
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper20[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20], oldDataCol: DataCol): SplitData[CaseClassDataHelper20[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        SplitData(
          current = new CaseClassDataHelper20(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20),
          left = dataCol20)
      }
    }
  }
}
class CaseClassHelper21[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo) {
}
class CaseClassDataHelper21[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper21
object CaseClassHelper21 {
  implicit def caseClassHelper21EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper21[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21], CaseClassDataHelper21[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21], CaseClassHelper21[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper21[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21], RepCol, DataCol] {
      override type Target = CaseClassHelper21[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21]
      override type Data = CaseClassDataHelper21[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21]
      override def wrapRep(base: CaseClassHelper21[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21]): CaseClassHelper21[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21] = {
        new CaseClassHelper21(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21)
      }
      override def toLawRep(base: CaseClassHelper21[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21], oldRep: RepCol): RepCol = {
        val rep22 = oldRep
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper21[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21], rep: CaseClassHelper21[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21], oldData: DataCol): DataCol = {
        val data22 = oldData
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper21DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper21[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21], CaseClassDataHelper21[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21], CaseClassHelper21[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper21[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21], RepCol, DataCol] {
      override type Target = CaseClassHelper21[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21]
      override type Data = CaseClassDataHelper21[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21]
      override def wrapRep(base: CaseClassHelper21[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21]): CaseClassHelper21[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21] = {
        new CaseClassHelper21(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21)
      }
      override def toLawRep(base: CaseClassHelper21[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21], oldRep: RepCol): RepCol = {
        val rep22 = oldRep
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper21[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21], oldDataCol: DataCol): SplitData[CaseClassDataHelper21[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        SplitData(
          current = new CaseClassDataHelper21(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21),
          left = dataCol21)
      }
    }
  }
}
class CaseClassHelper22[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo) {
}
class CaseClassDataHelper22[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper22
object CaseClassHelper22 {
  implicit def caseClassHelper22EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper22[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22], CaseClassDataHelper22[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22], CaseClassHelper22[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper22[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22], RepCol, DataCol] {
      override type Target = CaseClassHelper22[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22]
      override type Data = CaseClassDataHelper22[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22]
      override def wrapRep(base: CaseClassHelper22[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22]): CaseClassHelper22[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22] = {
        new CaseClassHelper22(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22)
      }
      override def toLawRep(base: CaseClassHelper22[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22], oldRep: RepCol): RepCol = {
        val rep23 = oldRep
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper22[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22], rep: CaseClassHelper22[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22], oldData: DataCol): DataCol = {
        val data23 = oldData
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper22DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper22[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22], CaseClassDataHelper22[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22], CaseClassHelper22[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper22[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22], RepCol, DataCol] {
      override type Target = CaseClassHelper22[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22]
      override type Data = CaseClassDataHelper22[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22]
      override def wrapRep(base: CaseClassHelper22[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22]): CaseClassHelper22[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22] = {
        new CaseClassHelper22(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22)
      }
      override def toLawRep(base: CaseClassHelper22[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22], oldRep: RepCol): RepCol = {
        val rep23 = oldRep
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper22[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22], oldDataCol: DataCol): SplitData[CaseClassDataHelper22[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        SplitData(
          current = new CaseClassDataHelper22(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22),
          left = dataCol22)
      }
    }
  }
}
class CaseClassHelper23[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo) {
}
class CaseClassDataHelper23[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper23
object CaseClassHelper23 {
  implicit def caseClassHelper23EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper23[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23], CaseClassDataHelper23[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23], CaseClassHelper23[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper23[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23], RepCol, DataCol] {
      override type Target = CaseClassHelper23[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23]
      override type Data = CaseClassDataHelper23[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23]
      override def wrapRep(base: CaseClassHelper23[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23]): CaseClassHelper23[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23] = {
        new CaseClassHelper23(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23)
      }
      override def toLawRep(base: CaseClassHelper23[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23], oldRep: RepCol): RepCol = {
        val rep24 = oldRep
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper23[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23], rep: CaseClassHelper23[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23], oldData: DataCol): DataCol = {
        val data24 = oldData
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper23DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper23[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23], CaseClassDataHelper23[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23], CaseClassHelper23[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper23[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23], RepCol, DataCol] {
      override type Target = CaseClassHelper23[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23]
      override type Data = CaseClassDataHelper23[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23]
      override def wrapRep(base: CaseClassHelper23[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23]): CaseClassHelper23[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23] = {
        new CaseClassHelper23(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23)
      }
      override def toLawRep(base: CaseClassHelper23[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23], oldRep: RepCol): RepCol = {
        val rep24 = oldRep
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper23[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23], oldDataCol: DataCol): SplitData[CaseClassDataHelper23[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        SplitData(
          current = new CaseClassDataHelper23(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23),
          left = dataCol23)
      }
    }
  }
}
class CaseClassHelper24[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo) {
}
class CaseClassDataHelper24[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper24
object CaseClassHelper24 {
  implicit def caseClassHelper24EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper24[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24], CaseClassDataHelper24[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24], CaseClassHelper24[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper24[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24], RepCol, DataCol] {
      override type Target = CaseClassHelper24[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24]
      override type Data = CaseClassDataHelper24[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24]
      override def wrapRep(base: CaseClassHelper24[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24]): CaseClassHelper24[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24] = {
        new CaseClassHelper24(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24)
      }
      override def toLawRep(base: CaseClassHelper24[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24], oldRep: RepCol): RepCol = {
        val rep25 = oldRep
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper24[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24], rep: CaseClassHelper24[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24], oldData: DataCol): DataCol = {
        val data25 = oldData
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper24DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper24[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24], CaseClassDataHelper24[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24], CaseClassHelper24[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper24[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24], RepCol, DataCol] {
      override type Target = CaseClassHelper24[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24]
      override type Data = CaseClassDataHelper24[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24]
      override def wrapRep(base: CaseClassHelper24[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24]): CaseClassHelper24[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24] = {
        new CaseClassHelper24(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24)
      }
      override def toLawRep(base: CaseClassHelper24[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24], oldRep: RepCol): RepCol = {
        val rep25 = oldRep
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper24[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24], oldDataCol: DataCol): SplitData[CaseClassDataHelper24[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        SplitData(
          current = new CaseClassDataHelper24(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24),
          left = dataCol24)
      }
    }
  }
}
class CaseClassHelper25[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo) {
}
class CaseClassDataHelper25[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper25
object CaseClassHelper25 {
  implicit def caseClassHelper25EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper25[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25], CaseClassDataHelper25[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25], CaseClassHelper25[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper25[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25], RepCol, DataCol] {
      override type Target = CaseClassHelper25[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25]
      override type Data = CaseClassDataHelper25[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25]
      override def wrapRep(base: CaseClassHelper25[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25]): CaseClassHelper25[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25] = {
        new CaseClassHelper25(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25)
      }
      override def toLawRep(base: CaseClassHelper25[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25], oldRep: RepCol): RepCol = {
        val rep26 = oldRep
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper25[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25], rep: CaseClassHelper25[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25], oldData: DataCol): DataCol = {
        val data26 = oldData
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper25DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper25[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25], CaseClassDataHelper25[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25], CaseClassHelper25[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper25[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25], RepCol, DataCol] {
      override type Target = CaseClassHelper25[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25]
      override type Data = CaseClassDataHelper25[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25]
      override def wrapRep(base: CaseClassHelper25[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25]): CaseClassHelper25[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25] = {
        new CaseClassHelper25(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25)
      }
      override def toLawRep(base: CaseClassHelper25[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25], oldRep: RepCol): RepCol = {
        val rep26 = oldRep
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper25[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25], oldDataCol: DataCol): SplitData[CaseClassDataHelper25[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        SplitData(
          current = new CaseClassDataHelper25(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25),
          left = dataCol25)
      }
    }
  }
}
class CaseClassHelper26[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo) {
}
class CaseClassDataHelper26[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper26
object CaseClassHelper26 {
  implicit def caseClassHelper26EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper26[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26], CaseClassDataHelper26[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26], CaseClassHelper26[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper26[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26], RepCol, DataCol] {
      override type Target = CaseClassHelper26[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26]
      override type Data = CaseClassDataHelper26[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26]
      override def wrapRep(base: CaseClassHelper26[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26]): CaseClassHelper26[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26] = {
        new CaseClassHelper26(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26)
      }
      override def toLawRep(base: CaseClassHelper26[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26], oldRep: RepCol): RepCol = {
        val rep27 = oldRep
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper26[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26], rep: CaseClassHelper26[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26], oldData: DataCol): DataCol = {
        val data27 = oldData
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper26DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper26[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26], CaseClassDataHelper26[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26], CaseClassHelper26[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper26[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26], RepCol, DataCol] {
      override type Target = CaseClassHelper26[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26]
      override type Data = CaseClassDataHelper26[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26]
      override def wrapRep(base: CaseClassHelper26[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26]): CaseClassHelper26[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26] = {
        new CaseClassHelper26(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26)
      }
      override def toLawRep(base: CaseClassHelper26[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26], oldRep: RepCol): RepCol = {
        val rep27 = oldRep
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper26[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26], oldDataCol: DataCol): SplitData[CaseClassDataHelper26[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        SplitData(
          current = new CaseClassDataHelper26(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26),
          left = dataCol26)
      }
    }
  }
}
class CaseClassHelper27[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo) {
}
class CaseClassDataHelper27[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper27
object CaseClassHelper27 {
  implicit def caseClassHelper27EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper27[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27], CaseClassDataHelper27[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27], CaseClassHelper27[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper27[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27], RepCol, DataCol] {
      override type Target = CaseClassHelper27[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27]
      override type Data = CaseClassDataHelper27[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27]
      override def wrapRep(base: CaseClassHelper27[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27]): CaseClassHelper27[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27] = {
        new CaseClassHelper27(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27)
      }
      override def toLawRep(base: CaseClassHelper27[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27], oldRep: RepCol): RepCol = {
        val rep28 = oldRep
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper27[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27], rep: CaseClassHelper27[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27], oldData: DataCol): DataCol = {
        val data28 = oldData
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper27DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper27[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27], CaseClassDataHelper27[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27], CaseClassHelper27[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper27[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27], RepCol, DataCol] {
      override type Target = CaseClassHelper27[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27]
      override type Data = CaseClassDataHelper27[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27]
      override def wrapRep(base: CaseClassHelper27[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27]): CaseClassHelper27[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27] = {
        new CaseClassHelper27(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27)
      }
      override def toLawRep(base: CaseClassHelper27[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27], oldRep: RepCol): RepCol = {
        val rep28 = oldRep
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper27[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27], oldDataCol: DataCol): SplitData[CaseClassDataHelper27[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        SplitData(
          current = new CaseClassDataHelper27(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27),
          left = dataCol27)
      }
    }
  }
}
class CaseClassHelper28[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo) {
}
class CaseClassDataHelper28[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper28
object CaseClassHelper28 {
  implicit def caseClassHelper28EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper28[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28], CaseClassDataHelper28[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28], CaseClassHelper28[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper28[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28], RepCol, DataCol] {
      override type Target = CaseClassHelper28[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28]
      override type Data = CaseClassDataHelper28[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28]
      override def wrapRep(base: CaseClassHelper28[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28]): CaseClassHelper28[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28] = {
        new CaseClassHelper28(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28)
      }
      override def toLawRep(base: CaseClassHelper28[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28], oldRep: RepCol): RepCol = {
        val rep29 = oldRep
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper28[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28], rep: CaseClassHelper28[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28], oldData: DataCol): DataCol = {
        val data29 = oldData
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper28DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper28[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28], CaseClassDataHelper28[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28], CaseClassHelper28[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper28[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28], RepCol, DataCol] {
      override type Target = CaseClassHelper28[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28]
      override type Data = CaseClassDataHelper28[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28]
      override def wrapRep(base: CaseClassHelper28[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28]): CaseClassHelper28[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28] = {
        new CaseClassHelper28(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28)
      }
      override def toLawRep(base: CaseClassHelper28[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28], oldRep: RepCol): RepCol = {
        val rep29 = oldRep
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper28[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28], oldDataCol: DataCol): SplitData[CaseClassDataHelper28[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        SplitData(
          current = new CaseClassDataHelper28(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28),
          left = dataCol28)
      }
    }
  }
}
class CaseClassHelper29[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo) {
}
class CaseClassDataHelper29[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper29
object CaseClassHelper29 {
  implicit def caseClassHelper29EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper29[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29], CaseClassDataHelper29[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29], CaseClassHelper29[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper29[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29], RepCol, DataCol] {
      override type Target = CaseClassHelper29[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29]
      override type Data = CaseClassDataHelper29[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29]
      override def wrapRep(base: CaseClassHelper29[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29]): CaseClassHelper29[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29] = {
        new CaseClassHelper29(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29)
      }
      override def toLawRep(base: CaseClassHelper29[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29], oldRep: RepCol): RepCol = {
        val rep30 = oldRep
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper29[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29], rep: CaseClassHelper29[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29], oldData: DataCol): DataCol = {
        val data30 = oldData
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper29DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper29[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29], CaseClassDataHelper29[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29], CaseClassHelper29[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper29[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29], RepCol, DataCol] {
      override type Target = CaseClassHelper29[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29]
      override type Data = CaseClassDataHelper29[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29]
      override def wrapRep(base: CaseClassHelper29[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29]): CaseClassHelper29[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29] = {
        new CaseClassHelper29(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29)
      }
      override def toLawRep(base: CaseClassHelper29[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29], oldRep: RepCol): RepCol = {
        val rep30 = oldRep
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper29[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29], oldDataCol: DataCol): SplitData[CaseClassDataHelper29[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        SplitData(
          current = new CaseClassDataHelper29(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29),
          left = dataCol29)
      }
    }
  }
}
class CaseClassHelper30[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo) {
}
class CaseClassDataHelper30[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper30
object CaseClassHelper30 {
  implicit def caseClassHelper30EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper30[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30], CaseClassDataHelper30[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30], CaseClassHelper30[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper30[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30], RepCol, DataCol] {
      override type Target = CaseClassHelper30[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30]
      override type Data = CaseClassDataHelper30[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30]
      override def wrapRep(base: CaseClassHelper30[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30]): CaseClassHelper30[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30] = {
        new CaseClassHelper30(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30)
      }
      override def toLawRep(base: CaseClassHelper30[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30], oldRep: RepCol): RepCol = {
        val rep31 = oldRep
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper30[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30], rep: CaseClassHelper30[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30], oldData: DataCol): DataCol = {
        val data31 = oldData
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper30DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper30[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30], CaseClassDataHelper30[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30], CaseClassHelper30[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper30[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30], RepCol, DataCol] {
      override type Target = CaseClassHelper30[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30]
      override type Data = CaseClassDataHelper30[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30]
      override def wrapRep(base: CaseClassHelper30[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30]): CaseClassHelper30[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30] = {
        new CaseClassHelper30(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30)
      }
      override def toLawRep(base: CaseClassHelper30[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30], oldRep: RepCol): RepCol = {
        val rep31 = oldRep
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper30[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30], oldDataCol: DataCol): SplitData[CaseClassDataHelper30[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        SplitData(
          current = new CaseClassDataHelper30(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30),
          left = dataCol30)
      }
    }
  }
}
class CaseClassHelper31[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo) {
}
class CaseClassDataHelper31[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper31
object CaseClassHelper31 {
  implicit def caseClassHelper31EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper31[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31], CaseClassDataHelper31[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31], CaseClassHelper31[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper31[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31], RepCol, DataCol] {
      override type Target = CaseClassHelper31[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31]
      override type Data = CaseClassDataHelper31[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31]
      override def wrapRep(base: CaseClassHelper31[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31]): CaseClassHelper31[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31] = {
        new CaseClassHelper31(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31)
      }
      override def toLawRep(base: CaseClassHelper31[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31], oldRep: RepCol): RepCol = {
        val rep32 = oldRep
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper31[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31], rep: CaseClassHelper31[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31], oldData: DataCol): DataCol = {
        val data32 = oldData
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper31DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper31[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31], CaseClassDataHelper31[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31], CaseClassHelper31[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper31[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31], RepCol, DataCol] {
      override type Target = CaseClassHelper31[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31]
      override type Data = CaseClassDataHelper31[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31]
      override def wrapRep(base: CaseClassHelper31[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31]): CaseClassHelper31[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31] = {
        new CaseClassHelper31(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31)
      }
      override def toLawRep(base: CaseClassHelper31[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31], oldRep: RepCol): RepCol = {
        val rep32 = oldRep
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper31[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31], oldDataCol: DataCol): SplitData[CaseClassDataHelper31[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        SplitData(
          current = new CaseClassDataHelper31(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31),
          left = dataCol31)
      }
    }
  }
}
class CaseClassHelper32[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo) {
}
class CaseClassDataHelper32[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper32
object CaseClassHelper32 {
  implicit def caseClassHelper32EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper32[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32], CaseClassDataHelper32[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32], CaseClassHelper32[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper32[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32], RepCol, DataCol] {
      override type Target = CaseClassHelper32[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32]
      override type Data = CaseClassDataHelper32[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32]
      override def wrapRep(base: CaseClassHelper32[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32]): CaseClassHelper32[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32] = {
        new CaseClassHelper32(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32)
      }
      override def toLawRep(base: CaseClassHelper32[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32], oldRep: RepCol): RepCol = {
        val rep33 = oldRep
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper32[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32], rep: CaseClassHelper32[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32], oldData: DataCol): DataCol = {
        val data33 = oldData
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper32DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper32[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32], CaseClassDataHelper32[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32], CaseClassHelper32[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper32[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32], RepCol, DataCol] {
      override type Target = CaseClassHelper32[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32]
      override type Data = CaseClassDataHelper32[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32]
      override def wrapRep(base: CaseClassHelper32[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32]): CaseClassHelper32[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32] = {
        new CaseClassHelper32(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32)
      }
      override def toLawRep(base: CaseClassHelper32[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32], oldRep: RepCol): RepCol = {
        val rep33 = oldRep
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper32[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32], oldDataCol: DataCol): SplitData[CaseClassDataHelper32[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        SplitData(
          current = new CaseClassDataHelper32(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32),
          left = dataCol32)
      }
    }
  }
}
class CaseClassHelper33[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo) {
}
class CaseClassDataHelper33[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper33
object CaseClassHelper33 {
  implicit def caseClassHelper33EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper33[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33], CaseClassDataHelper33[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33], CaseClassHelper33[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper33[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33], RepCol, DataCol] {
      override type Target = CaseClassHelper33[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33]
      override type Data = CaseClassDataHelper33[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33]
      override def wrapRep(base: CaseClassHelper33[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33]): CaseClassHelper33[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33] = {
        new CaseClassHelper33(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33)
      }
      override def toLawRep(base: CaseClassHelper33[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33], oldRep: RepCol): RepCol = {
        val rep34 = oldRep
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper33[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33], rep: CaseClassHelper33[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33], oldData: DataCol): DataCol = {
        val data34 = oldData
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper33DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper33[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33], CaseClassDataHelper33[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33], CaseClassHelper33[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper33[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33], RepCol, DataCol] {
      override type Target = CaseClassHelper33[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33]
      override type Data = CaseClassDataHelper33[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33]
      override def wrapRep(base: CaseClassHelper33[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33]): CaseClassHelper33[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33] = {
        new CaseClassHelper33(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33)
      }
      override def toLawRep(base: CaseClassHelper33[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33], oldRep: RepCol): RepCol = {
        val rep34 = oldRep
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper33[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33], oldDataCol: DataCol): SplitData[CaseClassDataHelper33[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        SplitData(
          current = new CaseClassDataHelper33(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33),
          left = dataCol33)
      }
    }
  }
}
class CaseClassHelper34[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo) {
}
class CaseClassDataHelper34[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper34
object CaseClassHelper34 {
  implicit def caseClassHelper34EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper34[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34], CaseClassDataHelper34[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34], CaseClassHelper34[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper34[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34], RepCol, DataCol] {
      override type Target = CaseClassHelper34[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34]
      override type Data = CaseClassDataHelper34[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34]
      override def wrapRep(base: CaseClassHelper34[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34]): CaseClassHelper34[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34] = {
        new CaseClassHelper34(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34)
      }
      override def toLawRep(base: CaseClassHelper34[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34], oldRep: RepCol): RepCol = {
        val rep35 = oldRep
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper34[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34], rep: CaseClassHelper34[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34], oldData: DataCol): DataCol = {
        val data35 = oldData
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper34DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper34[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34], CaseClassDataHelper34[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34], CaseClassHelper34[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper34[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34], RepCol, DataCol] {
      override type Target = CaseClassHelper34[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34]
      override type Data = CaseClassDataHelper34[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34]
      override def wrapRep(base: CaseClassHelper34[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34]): CaseClassHelper34[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34] = {
        new CaseClassHelper34(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34)
      }
      override def toLawRep(base: CaseClassHelper34[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34], oldRep: RepCol): RepCol = {
        val rep35 = oldRep
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper34[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34], oldDataCol: DataCol): SplitData[CaseClassDataHelper34[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        SplitData(
          current = new CaseClassDataHelper34(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34),
          left = dataCol34)
      }
    }
  }
}
class CaseClassHelper35[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo) {
}
class CaseClassDataHelper35[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper35
object CaseClassHelper35 {
  implicit def caseClassHelper35EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper35[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35], CaseClassDataHelper35[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35], CaseClassHelper35[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper35[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35], RepCol, DataCol] {
      override type Target = CaseClassHelper35[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35]
      override type Data = CaseClassDataHelper35[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35]
      override def wrapRep(base: CaseClassHelper35[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35]): CaseClassHelper35[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35] = {
        new CaseClassHelper35(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35)
      }
      override def toLawRep(base: CaseClassHelper35[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35], oldRep: RepCol): RepCol = {
        val rep36 = oldRep
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper35[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35], rep: CaseClassHelper35[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35], oldData: DataCol): DataCol = {
        val data36 = oldData
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper35DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper35[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35], CaseClassDataHelper35[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35], CaseClassHelper35[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper35[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35], RepCol, DataCol] {
      override type Target = CaseClassHelper35[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35]
      override type Data = CaseClassDataHelper35[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35]
      override def wrapRep(base: CaseClassHelper35[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35]): CaseClassHelper35[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35] = {
        new CaseClassHelper35(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35)
      }
      override def toLawRep(base: CaseClassHelper35[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35], oldRep: RepCol): RepCol = {
        val rep36 = oldRep
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper35[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35], oldDataCol: DataCol): SplitData[CaseClassDataHelper35[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        SplitData(
          current = new CaseClassDataHelper35(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35),
          left = dataCol35)
      }
    }
  }
}
class CaseClassHelper36[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo) {
}
class CaseClassDataHelper36[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper36
object CaseClassHelper36 {
  implicit def caseClassHelper36EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper36[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36], CaseClassDataHelper36[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36], CaseClassHelper36[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper36[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36], RepCol, DataCol] {
      override type Target = CaseClassHelper36[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36]
      override type Data = CaseClassDataHelper36[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36]
      override def wrapRep(base: CaseClassHelper36[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36]): CaseClassHelper36[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36] = {
        new CaseClassHelper36(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36)
      }
      override def toLawRep(base: CaseClassHelper36[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36], oldRep: RepCol): RepCol = {
        val rep37 = oldRep
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper36[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36], rep: CaseClassHelper36[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36], oldData: DataCol): DataCol = {
        val data37 = oldData
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper36DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper36[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36], CaseClassDataHelper36[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36], CaseClassHelper36[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper36[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36], RepCol, DataCol] {
      override type Target = CaseClassHelper36[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36]
      override type Data = CaseClassDataHelper36[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36]
      override def wrapRep(base: CaseClassHelper36[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36]): CaseClassHelper36[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36] = {
        new CaseClassHelper36(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36)
      }
      override def toLawRep(base: CaseClassHelper36[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36], oldRep: RepCol): RepCol = {
        val rep37 = oldRep
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper36[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36], oldDataCol: DataCol): SplitData[CaseClassDataHelper36[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        SplitData(
          current = new CaseClassDataHelper36(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36),
          left = dataCol36)
      }
    }
  }
}
class CaseClassHelper37[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo) {
}
class CaseClassDataHelper37[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper37
object CaseClassHelper37 {
  implicit def caseClassHelper37EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper37[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37], CaseClassDataHelper37[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37], CaseClassHelper37[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper37[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37], RepCol, DataCol] {
      override type Target = CaseClassHelper37[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37]
      override type Data = CaseClassDataHelper37[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37]
      override def wrapRep(base: CaseClassHelper37[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37]): CaseClassHelper37[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37] = {
        new CaseClassHelper37(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37)
      }
      override def toLawRep(base: CaseClassHelper37[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37], oldRep: RepCol): RepCol = {
        val rep38 = oldRep
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper37[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37], rep: CaseClassHelper37[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37], oldData: DataCol): DataCol = {
        val data38 = oldData
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper37DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper37[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37], CaseClassDataHelper37[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37], CaseClassHelper37[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper37[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37], RepCol, DataCol] {
      override type Target = CaseClassHelper37[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37]
      override type Data = CaseClassDataHelper37[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37]
      override def wrapRep(base: CaseClassHelper37[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37]): CaseClassHelper37[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37] = {
        new CaseClassHelper37(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37)
      }
      override def toLawRep(base: CaseClassHelper37[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37], oldRep: RepCol): RepCol = {
        val rep38 = oldRep
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper37[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37], oldDataCol: DataCol): SplitData[CaseClassDataHelper37[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        SplitData(
          current = new CaseClassDataHelper37(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37),
          left = dataCol37)
      }
    }
  }
}
class CaseClassHelper38[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo) {
}
class CaseClassDataHelper38[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper38
object CaseClassHelper38 {
  implicit def caseClassHelper38EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper38[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38], CaseClassDataHelper38[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38], CaseClassHelper38[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper38[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38], RepCol, DataCol] {
      override type Target = CaseClassHelper38[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38]
      override type Data = CaseClassDataHelper38[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38]
      override def wrapRep(base: CaseClassHelper38[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38]): CaseClassHelper38[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38] = {
        new CaseClassHelper38(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38)
      }
      override def toLawRep(base: CaseClassHelper38[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38], oldRep: RepCol): RepCol = {
        val rep39 = oldRep
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper38[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38], rep: CaseClassHelper38[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38], oldData: DataCol): DataCol = {
        val data39 = oldData
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper38DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper38[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38], CaseClassDataHelper38[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38], CaseClassHelper38[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper38[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38], RepCol, DataCol] {
      override type Target = CaseClassHelper38[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38]
      override type Data = CaseClassDataHelper38[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38]
      override def wrapRep(base: CaseClassHelper38[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38]): CaseClassHelper38[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38] = {
        new CaseClassHelper38(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38)
      }
      override def toLawRep(base: CaseClassHelper38[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38], oldRep: RepCol): RepCol = {
        val rep39 = oldRep
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper38[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38], oldDataCol: DataCol): SplitData[CaseClassDataHelper38[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        SplitData(
          current = new CaseClassDataHelper38(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38),
          left = dataCol38)
      }
    }
  }
}
class CaseClassHelper39[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo) {
}
class CaseClassDataHelper39[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper39
object CaseClassHelper39 {
  implicit def caseClassHelper39EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper39[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39], CaseClassDataHelper39[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39], CaseClassHelper39[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper39[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39], RepCol, DataCol] {
      override type Target = CaseClassHelper39[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39]
      override type Data = CaseClassDataHelper39[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39]
      override def wrapRep(base: CaseClassHelper39[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39]): CaseClassHelper39[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39] = {
        new CaseClassHelper39(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39)
      }
      override def toLawRep(base: CaseClassHelper39[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39], oldRep: RepCol): RepCol = {
        val rep40 = oldRep
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper39[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39], rep: CaseClassHelper39[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39], oldData: DataCol): DataCol = {
        val data40 = oldData
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper39DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper39[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39], CaseClassDataHelper39[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39], CaseClassHelper39[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper39[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39], RepCol, DataCol] {
      override type Target = CaseClassHelper39[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39]
      override type Data = CaseClassDataHelper39[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39]
      override def wrapRep(base: CaseClassHelper39[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39]): CaseClassHelper39[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39] = {
        new CaseClassHelper39(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39)
      }
      override def toLawRep(base: CaseClassHelper39[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39], oldRep: RepCol): RepCol = {
        val rep40 = oldRep
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper39[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39], oldDataCol: DataCol): SplitData[CaseClassDataHelper39[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        SplitData(
          current = new CaseClassDataHelper39(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39),
          left = dataCol39)
      }
    }
  }
}
class CaseClassHelper40[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo) {
}
class CaseClassDataHelper40[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper40
object CaseClassHelper40 {
  implicit def caseClassHelper40EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper40[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40], CaseClassDataHelper40[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40], CaseClassHelper40[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper40[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40], RepCol, DataCol] {
      override type Target = CaseClassHelper40[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40]
      override type Data = CaseClassDataHelper40[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40]
      override def wrapRep(base: CaseClassHelper40[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40]): CaseClassHelper40[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40] = {
        new CaseClassHelper40(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40)
      }
      override def toLawRep(base: CaseClassHelper40[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40], oldRep: RepCol): RepCol = {
        val rep41 = oldRep
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper40[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40], rep: CaseClassHelper40[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40], oldData: DataCol): DataCol = {
        val data41 = oldData
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper40DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper40[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40], CaseClassDataHelper40[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40], CaseClassHelper40[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper40[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40], RepCol, DataCol] {
      override type Target = CaseClassHelper40[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40]
      override type Data = CaseClassDataHelper40[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40]
      override def wrapRep(base: CaseClassHelper40[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40]): CaseClassHelper40[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40] = {
        new CaseClassHelper40(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40)
      }
      override def toLawRep(base: CaseClassHelper40[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40], oldRep: RepCol): RepCol = {
        val rep41 = oldRep
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper40[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40], oldDataCol: DataCol): SplitData[CaseClassDataHelper40[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        SplitData(
          current = new CaseClassDataHelper40(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40),
          left = dataCol40)
      }
    }
  }
}
class CaseClassHelper41[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo) {
}
class CaseClassDataHelper41[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper41
object CaseClassHelper41 {
  implicit def caseClassHelper41EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper41[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41], CaseClassDataHelper41[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41], CaseClassHelper41[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper41[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41], RepCol, DataCol] {
      override type Target = CaseClassHelper41[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41]
      override type Data = CaseClassDataHelper41[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41]
      override def wrapRep(base: CaseClassHelper41[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41]): CaseClassHelper41[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41] = {
        new CaseClassHelper41(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41)
      }
      override def toLawRep(base: CaseClassHelper41[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41], oldRep: RepCol): RepCol = {
        val rep42 = oldRep
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper41[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41], rep: CaseClassHelper41[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41], oldData: DataCol): DataCol = {
        val data42 = oldData
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper41DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper41[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41], CaseClassDataHelper41[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41], CaseClassHelper41[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper41[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41], RepCol, DataCol] {
      override type Target = CaseClassHelper41[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41]
      override type Data = CaseClassDataHelper41[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41]
      override def wrapRep(base: CaseClassHelper41[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41]): CaseClassHelper41[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41] = {
        new CaseClassHelper41(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41)
      }
      override def toLawRep(base: CaseClassHelper41[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41], oldRep: RepCol): RepCol = {
        val rep42 = oldRep
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper41[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41], oldDataCol: DataCol): SplitData[CaseClassDataHelper41[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        SplitData(
          current = new CaseClassDataHelper41(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41),
          left = dataCol41)
      }
    }
  }
}
class CaseClassHelper42[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo) {
}
class CaseClassDataHelper42[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper42
object CaseClassHelper42 {
  implicit def caseClassHelper42EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper42[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42], CaseClassDataHelper42[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42], CaseClassHelper42[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper42[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42], RepCol, DataCol] {
      override type Target = CaseClassHelper42[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42]
      override type Data = CaseClassDataHelper42[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42]
      override def wrapRep(base: CaseClassHelper42[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42]): CaseClassHelper42[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42] = {
        new CaseClassHelper42(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42)
      }
      override def toLawRep(base: CaseClassHelper42[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42], oldRep: RepCol): RepCol = {
        val rep43 = oldRep
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper42[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42], rep: CaseClassHelper42[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42], oldData: DataCol): DataCol = {
        val data43 = oldData
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper42DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper42[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42], CaseClassDataHelper42[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42], CaseClassHelper42[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper42[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42], RepCol, DataCol] {
      override type Target = CaseClassHelper42[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42]
      override type Data = CaseClassDataHelper42[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42]
      override def wrapRep(base: CaseClassHelper42[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42]): CaseClassHelper42[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42] = {
        new CaseClassHelper42(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42)
      }
      override def toLawRep(base: CaseClassHelper42[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42], oldRep: RepCol): RepCol = {
        val rep43 = oldRep
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper42[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42], oldDataCol: DataCol): SplitData[CaseClassDataHelper42[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        SplitData(
          current = new CaseClassDataHelper42(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42),
          left = dataCol42)
      }
    }
  }
}
class CaseClassHelper43[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo) {
}
class CaseClassDataHelper43[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper43
object CaseClassHelper43 {
  implicit def caseClassHelper43EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper43[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43], CaseClassDataHelper43[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43], CaseClassHelper43[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper43[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43], RepCol, DataCol] {
      override type Target = CaseClassHelper43[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43]
      override type Data = CaseClassDataHelper43[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43]
      override def wrapRep(base: CaseClassHelper43[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43]): CaseClassHelper43[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43] = {
        new CaseClassHelper43(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43)
      }
      override def toLawRep(base: CaseClassHelper43[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43], oldRep: RepCol): RepCol = {
        val rep44 = oldRep
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper43[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43], rep: CaseClassHelper43[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43], oldData: DataCol): DataCol = {
        val data44 = oldData
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper43DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper43[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43], CaseClassDataHelper43[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43], CaseClassHelper43[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper43[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43], RepCol, DataCol] {
      override type Target = CaseClassHelper43[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43]
      override type Data = CaseClassDataHelper43[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43]
      override def wrapRep(base: CaseClassHelper43[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43]): CaseClassHelper43[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43] = {
        new CaseClassHelper43(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43)
      }
      override def toLawRep(base: CaseClassHelper43[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43], oldRep: RepCol): RepCol = {
        val rep44 = oldRep
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper43[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43], oldDataCol: DataCol): SplitData[CaseClassDataHelper43[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        SplitData(
          current = new CaseClassDataHelper43(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43),
          left = dataCol43)
      }
    }
  }
}
class CaseClassHelper44[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo) {
}
class CaseClassDataHelper44[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper44
object CaseClassHelper44 {
  implicit def caseClassHelper44EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper44[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44], CaseClassDataHelper44[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44], CaseClassHelper44[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper44[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44], RepCol, DataCol] {
      override type Target = CaseClassHelper44[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44]
      override type Data = CaseClassDataHelper44[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44]
      override def wrapRep(base: CaseClassHelper44[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44]): CaseClassHelper44[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44] = {
        new CaseClassHelper44(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44)
      }
      override def toLawRep(base: CaseClassHelper44[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44], oldRep: RepCol): RepCol = {
        val rep45 = oldRep
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper44[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44], rep: CaseClassHelper44[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44], oldData: DataCol): DataCol = {
        val data45 = oldData
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper44DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper44[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44], CaseClassDataHelper44[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44], CaseClassHelper44[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper44[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44], RepCol, DataCol] {
      override type Target = CaseClassHelper44[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44]
      override type Data = CaseClassDataHelper44[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44]
      override def wrapRep(base: CaseClassHelper44[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44]): CaseClassHelper44[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44] = {
        new CaseClassHelper44(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44)
      }
      override def toLawRep(base: CaseClassHelper44[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44], oldRep: RepCol): RepCol = {
        val rep45 = oldRep
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper44[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44], oldDataCol: DataCol): SplitData[CaseClassDataHelper44[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        SplitData(
          current = new CaseClassDataHelper44(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44),
          left = dataCol44)
      }
    }
  }
}
class CaseClassHelper45[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo) {
}
class CaseClassDataHelper45[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper45
object CaseClassHelper45 {
  implicit def caseClassHelper45EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper45[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45], CaseClassDataHelper45[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45], CaseClassHelper45[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper45[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45], RepCol, DataCol] {
      override type Target = CaseClassHelper45[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45]
      override type Data = CaseClassDataHelper45[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45]
      override def wrapRep(base: CaseClassHelper45[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45]): CaseClassHelper45[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45] = {
        new CaseClassHelper45(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45)
      }
      override def toLawRep(base: CaseClassHelper45[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45], oldRep: RepCol): RepCol = {
        val rep46 = oldRep
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper45[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45], rep: CaseClassHelper45[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45], oldData: DataCol): DataCol = {
        val data46 = oldData
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper45DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper45[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45], CaseClassDataHelper45[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45], CaseClassHelper45[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper45[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45], RepCol, DataCol] {
      override type Target = CaseClassHelper45[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45]
      override type Data = CaseClassDataHelper45[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45]
      override def wrapRep(base: CaseClassHelper45[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45]): CaseClassHelper45[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45] = {
        new CaseClassHelper45(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45)
      }
      override def toLawRep(base: CaseClassHelper45[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45], oldRep: RepCol): RepCol = {
        val rep46 = oldRep
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper45[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45], oldDataCol: DataCol): SplitData[CaseClassDataHelper45[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        SplitData(
          current = new CaseClassDataHelper45(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45),
          left = dataCol45)
      }
    }
  }
}
class CaseClassHelper46[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo) {
}
class CaseClassDataHelper46[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper46
object CaseClassHelper46 {
  implicit def caseClassHelper46EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper46[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46], CaseClassDataHelper46[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46], CaseClassHelper46[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper46[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46], RepCol, DataCol] {
      override type Target = CaseClassHelper46[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46]
      override type Data = CaseClassDataHelper46[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46]
      override def wrapRep(base: CaseClassHelper46[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46]): CaseClassHelper46[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46] = {
        new CaseClassHelper46(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46)
      }
      override def toLawRep(base: CaseClassHelper46[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46], oldRep: RepCol): RepCol = {
        val rep47 = oldRep
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper46[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46], rep: CaseClassHelper46[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46], oldData: DataCol): DataCol = {
        val data47 = oldData
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper46DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper46[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46], CaseClassDataHelper46[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46], CaseClassHelper46[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper46[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46], RepCol, DataCol] {
      override type Target = CaseClassHelper46[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46]
      override type Data = CaseClassDataHelper46[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46]
      override def wrapRep(base: CaseClassHelper46[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46]): CaseClassHelper46[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46] = {
        new CaseClassHelper46(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46)
      }
      override def toLawRep(base: CaseClassHelper46[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46], oldRep: RepCol): RepCol = {
        val rep47 = oldRep
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper46[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46], oldDataCol: DataCol): SplitData[CaseClassDataHelper46[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        SplitData(
          current = new CaseClassDataHelper46(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46),
          left = dataCol46)
      }
    }
  }
}
class CaseClassHelper47[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo) {
}
class CaseClassDataHelper47[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper47
object CaseClassHelper47 {
  implicit def caseClassHelper47EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper47[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47], CaseClassDataHelper47[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47], CaseClassHelper47[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper47[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47], RepCol, DataCol] {
      override type Target = CaseClassHelper47[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47]
      override type Data = CaseClassDataHelper47[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47]
      override def wrapRep(base: CaseClassHelper47[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47]): CaseClassHelper47[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47] = {
        new CaseClassHelper47(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47)
      }
      override def toLawRep(base: CaseClassHelper47[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47], oldRep: RepCol): RepCol = {
        val rep48 = oldRep
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper47[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47], rep: CaseClassHelper47[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47], oldData: DataCol): DataCol = {
        val data48 = oldData
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper47DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper47[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47], CaseClassDataHelper47[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47], CaseClassHelper47[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper47[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47], RepCol, DataCol] {
      override type Target = CaseClassHelper47[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47]
      override type Data = CaseClassDataHelper47[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47]
      override def wrapRep(base: CaseClassHelper47[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47]): CaseClassHelper47[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47] = {
        new CaseClassHelper47(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47)
      }
      override def toLawRep(base: CaseClassHelper47[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47], oldRep: RepCol): RepCol = {
        val rep48 = oldRep
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper47[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47], oldDataCol: DataCol): SplitData[CaseClassDataHelper47[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        SplitData(
          current = new CaseClassDataHelper47(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47),
          left = dataCol47)
      }
    }
  }
}
class CaseClassHelper48[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo) {
}
class CaseClassDataHelper48[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper48
object CaseClassHelper48 {
  implicit def caseClassHelper48EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper48[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48], CaseClassDataHelper48[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48], CaseClassHelper48[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper48[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48], RepCol, DataCol] {
      override type Target = CaseClassHelper48[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48]
      override type Data = CaseClassDataHelper48[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48]
      override def wrapRep(base: CaseClassHelper48[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48]): CaseClassHelper48[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48] = {
        new CaseClassHelper48(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48)
      }
      override def toLawRep(base: CaseClassHelper48[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48], oldRep: RepCol): RepCol = {
        val rep49 = oldRep
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper48[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48], rep: CaseClassHelper48[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48], oldData: DataCol): DataCol = {
        val data49 = oldData
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper48DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper48[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48], CaseClassDataHelper48[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48], CaseClassHelper48[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper48[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48], RepCol, DataCol] {
      override type Target = CaseClassHelper48[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48]
      override type Data = CaseClassDataHelper48[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48]
      override def wrapRep(base: CaseClassHelper48[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48]): CaseClassHelper48[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48] = {
        new CaseClassHelper48(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48)
      }
      override def toLawRep(base: CaseClassHelper48[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48], oldRep: RepCol): RepCol = {
        val rep49 = oldRep
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper48[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48], oldDataCol: DataCol): SplitData[CaseClassDataHelper48[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        SplitData(
          current = new CaseClassDataHelper48(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48),
          left = dataCol48)
      }
    }
  }
}
class CaseClassHelper49[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo,
  val rep49: Rep49,
  val property49: PropertyType[Data49],
  val column49: MacroColumnInfo) {
}
class CaseClassDataHelper49[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo,
  val data49: Data49,
  val column49: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper49
object CaseClassHelper49 {
  implicit def caseClassHelper49EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[EncoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper49[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49], CaseClassDataHelper49[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49], CaseClassHelper49[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper49[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49], RepCol, DataCol] {
      override type Target = CaseClassHelper49[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49]
      override type Data = CaseClassDataHelper49[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49]
      override def wrapRep(base: CaseClassHelper49[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49]): CaseClassHelper49[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49] = {
        new CaseClassHelper49(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49)
      }
      override def toLawRep(base: CaseClassHelper49[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49], oldRep: RepCol): RepCol = {
        val rep50 = oldRep
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper49[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49], rep: CaseClassHelper49[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49], oldData: DataCol): DataCol = {
        val data50 = oldData
        val data49 = shape49.value.buildData(data.data49, rep.rep49, data50)
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper49DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[DecoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper49[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49], CaseClassDataHelper49[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49], CaseClassHelper49[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper49[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49], RepCol, DataCol] {
      override type Target = CaseClassHelper49[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49]
      override type Data = CaseClassDataHelper49[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49]
      override def wrapRep(base: CaseClassHelper49[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49]): CaseClassHelper49[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49] = {
        new CaseClassHelper49(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49)
      }
      override def toLawRep(base: CaseClassHelper49[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49], oldRep: RepCol): RepCol = {
        val rep50 = oldRep
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper49[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49], oldDataCol: DataCol): SplitData[CaseClassDataHelper49[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        val SplitData(item49, dataCol49) = shape49.value.takeData(rep.rep49, dataCol48)
        SplitData(
          current = new CaseClassDataHelper49(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48,
            data49 = item49,
            column49 = rep.column49),
          left = dataCol49)
      }
    }
  }
}
class CaseClassHelper50[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo,
  val rep49: Rep49,
  val property49: PropertyType[Data49],
  val column49: MacroColumnInfo,
  val rep50: Rep50,
  val property50: PropertyType[Data50],
  val column50: MacroColumnInfo) {
}
class CaseClassDataHelper50[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo,
  val data49: Data49,
  val column49: MacroColumnInfo,
  val data50: Data50,
  val column50: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper50
object CaseClassHelper50 {
  implicit def caseClassHelper50EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[EncoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[EncoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper50[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50], CaseClassDataHelper50[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50], CaseClassHelper50[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper50[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50], RepCol, DataCol] {
      override type Target = CaseClassHelper50[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50]
      override type Data = CaseClassDataHelper50[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50]
      override def wrapRep(base: CaseClassHelper50[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50]): CaseClassHelper50[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50] = {
        new CaseClassHelper50(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50)
      }
      override def toLawRep(base: CaseClassHelper50[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50], oldRep: RepCol): RepCol = {
        val rep51 = oldRep
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper50[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50], rep: CaseClassHelper50[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50], oldData: DataCol): DataCol = {
        val data51 = oldData
        val data50 = shape50.value.buildData(data.data50, rep.rep50, data51)
        val data49 = shape49.value.buildData(data.data49, rep.rep49, data50)
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper50DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[DecoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[DecoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper50[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50], CaseClassDataHelper50[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50], CaseClassHelper50[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper50[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50], RepCol, DataCol] {
      override type Target = CaseClassHelper50[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50]
      override type Data = CaseClassDataHelper50[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50]
      override def wrapRep(base: CaseClassHelper50[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50]): CaseClassHelper50[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50] = {
        new CaseClassHelper50(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50)
      }
      override def toLawRep(base: CaseClassHelper50[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50], oldRep: RepCol): RepCol = {
        val rep51 = oldRep
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper50[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50], oldDataCol: DataCol): SplitData[CaseClassDataHelper50[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        val SplitData(item49, dataCol49) = shape49.value.takeData(rep.rep49, dataCol48)
        val SplitData(item50, dataCol50) = shape50.value.takeData(rep.rep50, dataCol49)
        SplitData(
          current = new CaseClassDataHelper50(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48,
            data49 = item49,
            column49 = rep.column49,
            data50 = item50,
            column50 = rep.column50),
          left = dataCol50)
      }
    }
  }
}
class CaseClassHelper51[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo,
  val rep49: Rep49,
  val property49: PropertyType[Data49],
  val column49: MacroColumnInfo,
  val rep50: Rep50,
  val property50: PropertyType[Data50],
  val column50: MacroColumnInfo,
  val rep51: Rep51,
  val property51: PropertyType[Data51],
  val column51: MacroColumnInfo) {
}
class CaseClassDataHelper51[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo,
  val data49: Data49,
  val column49: MacroColumnInfo,
  val data50: Data50,
  val column50: MacroColumnInfo,
  val data51: Data51,
  val column51: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper51
object CaseClassHelper51 {
  implicit def caseClassHelper51EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[EncoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[EncoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[EncoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper51[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51], CaseClassDataHelper51[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51], CaseClassHelper51[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper51[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51], RepCol, DataCol] {
      override type Target = CaseClassHelper51[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51]
      override type Data = CaseClassDataHelper51[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51]
      override def wrapRep(base: CaseClassHelper51[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51]): CaseClassHelper51[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51] = {
        new CaseClassHelper51(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51)
      }
      override def toLawRep(base: CaseClassHelper51[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51], oldRep: RepCol): RepCol = {
        val rep52 = oldRep
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper51[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51], rep: CaseClassHelper51[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51], oldData: DataCol): DataCol = {
        val data52 = oldData
        val data51 = shape51.value.buildData(data.data51, rep.rep51, data52)
        val data50 = shape50.value.buildData(data.data50, rep.rep50, data51)
        val data49 = shape49.value.buildData(data.data49, rep.rep49, data50)
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper51DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[DecoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[DecoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[DecoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper51[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51], CaseClassDataHelper51[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51], CaseClassHelper51[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper51[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51], RepCol, DataCol] {
      override type Target = CaseClassHelper51[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51]
      override type Data = CaseClassDataHelper51[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51]
      override def wrapRep(base: CaseClassHelper51[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51]): CaseClassHelper51[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51] = {
        new CaseClassHelper51(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51)
      }
      override def toLawRep(base: CaseClassHelper51[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51], oldRep: RepCol): RepCol = {
        val rep52 = oldRep
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper51[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51], oldDataCol: DataCol): SplitData[CaseClassDataHelper51[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        val SplitData(item49, dataCol49) = shape49.value.takeData(rep.rep49, dataCol48)
        val SplitData(item50, dataCol50) = shape50.value.takeData(rep.rep50, dataCol49)
        val SplitData(item51, dataCol51) = shape51.value.takeData(rep.rep51, dataCol50)
        SplitData(
          current = new CaseClassDataHelper51(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48,
            data49 = item49,
            column49 = rep.column49,
            data50 = item50,
            column50 = rep.column50,
            data51 = item51,
            column51 = rep.column51),
          left = dataCol51)
      }
    }
  }
}
class CaseClassHelper52[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo,
  val rep49: Rep49,
  val property49: PropertyType[Data49],
  val column49: MacroColumnInfo,
  val rep50: Rep50,
  val property50: PropertyType[Data50],
  val column50: MacroColumnInfo,
  val rep51: Rep51,
  val property51: PropertyType[Data51],
  val column51: MacroColumnInfo,
  val rep52: Rep52,
  val property52: PropertyType[Data52],
  val column52: MacroColumnInfo) {
}
class CaseClassDataHelper52[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo,
  val data49: Data49,
  val column49: MacroColumnInfo,
  val data50: Data50,
  val column50: MacroColumnInfo,
  val data51: Data51,
  val column51: MacroColumnInfo,
  val data52: Data52,
  val column52: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper52
object CaseClassHelper52 {
  implicit def caseClassHelper52EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[EncoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[EncoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[EncoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[EncoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper52[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52], CaseClassDataHelper52[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52], CaseClassHelper52[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper52[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52], RepCol, DataCol] {
      override type Target = CaseClassHelper52[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52]
      override type Data = CaseClassDataHelper52[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52]
      override def wrapRep(base: CaseClassHelper52[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52]): CaseClassHelper52[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52] = {
        new CaseClassHelper52(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52)
      }
      override def toLawRep(base: CaseClassHelper52[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52], oldRep: RepCol): RepCol = {
        val rep53 = oldRep
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper52[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52], rep: CaseClassHelper52[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52], oldData: DataCol): DataCol = {
        val data53 = oldData
        val data52 = shape52.value.buildData(data.data52, rep.rep52, data53)
        val data51 = shape51.value.buildData(data.data51, rep.rep51, data52)
        val data50 = shape50.value.buildData(data.data50, rep.rep50, data51)
        val data49 = shape49.value.buildData(data.data49, rep.rep49, data50)
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper52DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[DecoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[DecoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[DecoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[DecoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper52[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52], CaseClassDataHelper52[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52], CaseClassHelper52[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper52[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52], RepCol, DataCol] {
      override type Target = CaseClassHelper52[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52]
      override type Data = CaseClassDataHelper52[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52]
      override def wrapRep(base: CaseClassHelper52[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52]): CaseClassHelper52[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52] = {
        new CaseClassHelper52(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52)
      }
      override def toLawRep(base: CaseClassHelper52[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52], oldRep: RepCol): RepCol = {
        val rep53 = oldRep
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper52[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52], oldDataCol: DataCol): SplitData[CaseClassDataHelper52[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        val SplitData(item49, dataCol49) = shape49.value.takeData(rep.rep49, dataCol48)
        val SplitData(item50, dataCol50) = shape50.value.takeData(rep.rep50, dataCol49)
        val SplitData(item51, dataCol51) = shape51.value.takeData(rep.rep51, dataCol50)
        val SplitData(item52, dataCol52) = shape52.value.takeData(rep.rep52, dataCol51)
        SplitData(
          current = new CaseClassDataHelper52(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48,
            data49 = item49,
            column49 = rep.column49,
            data50 = item50,
            column50 = rep.column50,
            data51 = item51,
            column51 = rep.column51,
            data52 = item52,
            column52 = rep.column52),
          left = dataCol52)
      }
    }
  }
}
class CaseClassHelper53[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo,
  val rep49: Rep49,
  val property49: PropertyType[Data49],
  val column49: MacroColumnInfo,
  val rep50: Rep50,
  val property50: PropertyType[Data50],
  val column50: MacroColumnInfo,
  val rep51: Rep51,
  val property51: PropertyType[Data51],
  val column51: MacroColumnInfo,
  val rep52: Rep52,
  val property52: PropertyType[Data52],
  val column52: MacroColumnInfo,
  val rep53: Rep53,
  val property53: PropertyType[Data53],
  val column53: MacroColumnInfo) {
}
class CaseClassDataHelper53[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo,
  val data49: Data49,
  val column49: MacroColumnInfo,
  val data50: Data50,
  val column50: MacroColumnInfo,
  val data51: Data51,
  val column51: MacroColumnInfo,
  val data52: Data52,
  val column52: MacroColumnInfo,
  val data53: Data53,
  val column53: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper53
object CaseClassHelper53 {
  implicit def caseClassHelper53EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[EncoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[EncoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[EncoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[EncoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[EncoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper53[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53], CaseClassDataHelper53[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53], CaseClassHelper53[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper53[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53], RepCol, DataCol] {
      override type Target = CaseClassHelper53[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53]
      override type Data = CaseClassDataHelper53[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53]
      override def wrapRep(base: CaseClassHelper53[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53]): CaseClassHelper53[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53] = {
        new CaseClassHelper53(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53)
      }
      override def toLawRep(base: CaseClassHelper53[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53], oldRep: RepCol): RepCol = {
        val rep54 = oldRep
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper53[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53], rep: CaseClassHelper53[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53], oldData: DataCol): DataCol = {
        val data54 = oldData
        val data53 = shape53.value.buildData(data.data53, rep.rep53, data54)
        val data52 = shape52.value.buildData(data.data52, rep.rep52, data53)
        val data51 = shape51.value.buildData(data.data51, rep.rep51, data52)
        val data50 = shape50.value.buildData(data.data50, rep.rep50, data51)
        val data49 = shape49.value.buildData(data.data49, rep.rep49, data50)
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper53DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[DecoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[DecoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[DecoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[DecoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[DecoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper53[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53], CaseClassDataHelper53[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53], CaseClassHelper53[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper53[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53], RepCol, DataCol] {
      override type Target = CaseClassHelper53[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53]
      override type Data = CaseClassDataHelper53[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53]
      override def wrapRep(base: CaseClassHelper53[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53]): CaseClassHelper53[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53] = {
        new CaseClassHelper53(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53)
      }
      override def toLawRep(base: CaseClassHelper53[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53], oldRep: RepCol): RepCol = {
        val rep54 = oldRep
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper53[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53], oldDataCol: DataCol): SplitData[CaseClassDataHelper53[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        val SplitData(item49, dataCol49) = shape49.value.takeData(rep.rep49, dataCol48)
        val SplitData(item50, dataCol50) = shape50.value.takeData(rep.rep50, dataCol49)
        val SplitData(item51, dataCol51) = shape51.value.takeData(rep.rep51, dataCol50)
        val SplitData(item52, dataCol52) = shape52.value.takeData(rep.rep52, dataCol51)
        val SplitData(item53, dataCol53) = shape53.value.takeData(rep.rep53, dataCol52)
        SplitData(
          current = new CaseClassDataHelper53(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48,
            data49 = item49,
            column49 = rep.column49,
            data50 = item50,
            column50 = rep.column50,
            data51 = item51,
            column51 = rep.column51,
            data52 = item52,
            column52 = rep.column52,
            data53 = item53,
            column53 = rep.column53),
          left = dataCol53)
      }
    }
  }
}
class CaseClassHelper54[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo,
  val rep49: Rep49,
  val property49: PropertyType[Data49],
  val column49: MacroColumnInfo,
  val rep50: Rep50,
  val property50: PropertyType[Data50],
  val column50: MacroColumnInfo,
  val rep51: Rep51,
  val property51: PropertyType[Data51],
  val column51: MacroColumnInfo,
  val rep52: Rep52,
  val property52: PropertyType[Data52],
  val column52: MacroColumnInfo,
  val rep53: Rep53,
  val property53: PropertyType[Data53],
  val column53: MacroColumnInfo,
  val rep54: Rep54,
  val property54: PropertyType[Data54],
  val column54: MacroColumnInfo) {
}
class CaseClassDataHelper54[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo,
  val data49: Data49,
  val column49: MacroColumnInfo,
  val data50: Data50,
  val column50: MacroColumnInfo,
  val data51: Data51,
  val column51: MacroColumnInfo,
  val data52: Data52,
  val column52: MacroColumnInfo,
  val data53: Data53,
  val column53: MacroColumnInfo,
  val data54: Data54,
  val column54: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper54
object CaseClassHelper54 {
  implicit def caseClassHelper54EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[EncoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[EncoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[EncoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[EncoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[EncoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[EncoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper54[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54], CaseClassDataHelper54[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54], CaseClassHelper54[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper54[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54], RepCol, DataCol] {
      override type Target = CaseClassHelper54[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54]
      override type Data = CaseClassDataHelper54[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54]
      override def wrapRep(base: CaseClassHelper54[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54]): CaseClassHelper54[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54] = {
        new CaseClassHelper54(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54)
      }
      override def toLawRep(base: CaseClassHelper54[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54], oldRep: RepCol): RepCol = {
        val rep55 = oldRep
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper54[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54], rep: CaseClassHelper54[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54], oldData: DataCol): DataCol = {
        val data55 = oldData
        val data54 = shape54.value.buildData(data.data54, rep.rep54, data55)
        val data53 = shape53.value.buildData(data.data53, rep.rep53, data54)
        val data52 = shape52.value.buildData(data.data52, rep.rep52, data53)
        val data51 = shape51.value.buildData(data.data51, rep.rep51, data52)
        val data50 = shape50.value.buildData(data.data50, rep.rep50, data51)
        val data49 = shape49.value.buildData(data.data49, rep.rep49, data50)
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper54DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[DecoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[DecoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[DecoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[DecoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[DecoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[DecoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper54[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54], CaseClassDataHelper54[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54], CaseClassHelper54[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper54[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54], RepCol, DataCol] {
      override type Target = CaseClassHelper54[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54]
      override type Data = CaseClassDataHelper54[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54]
      override def wrapRep(base: CaseClassHelper54[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54]): CaseClassHelper54[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54] = {
        new CaseClassHelper54(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54)
      }
      override def toLawRep(base: CaseClassHelper54[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54], oldRep: RepCol): RepCol = {
        val rep55 = oldRep
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper54[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54], oldDataCol: DataCol): SplitData[CaseClassDataHelper54[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        val SplitData(item49, dataCol49) = shape49.value.takeData(rep.rep49, dataCol48)
        val SplitData(item50, dataCol50) = shape50.value.takeData(rep.rep50, dataCol49)
        val SplitData(item51, dataCol51) = shape51.value.takeData(rep.rep51, dataCol50)
        val SplitData(item52, dataCol52) = shape52.value.takeData(rep.rep52, dataCol51)
        val SplitData(item53, dataCol53) = shape53.value.takeData(rep.rep53, dataCol52)
        val SplitData(item54, dataCol54) = shape54.value.takeData(rep.rep54, dataCol53)
        SplitData(
          current = new CaseClassDataHelper54(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48,
            data49 = item49,
            column49 = rep.column49,
            data50 = item50,
            column50 = rep.column50,
            data51 = item51,
            column51 = rep.column51,
            data52 = item52,
            column52 = rep.column52,
            data53 = item53,
            column53 = rep.column53,
            data54 = item54,
            column54 = rep.column54),
          left = dataCol54)
      }
    }
  }
}
class CaseClassHelper55[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo,
  val rep49: Rep49,
  val property49: PropertyType[Data49],
  val column49: MacroColumnInfo,
  val rep50: Rep50,
  val property50: PropertyType[Data50],
  val column50: MacroColumnInfo,
  val rep51: Rep51,
  val property51: PropertyType[Data51],
  val column51: MacroColumnInfo,
  val rep52: Rep52,
  val property52: PropertyType[Data52],
  val column52: MacroColumnInfo,
  val rep53: Rep53,
  val property53: PropertyType[Data53],
  val column53: MacroColumnInfo,
  val rep54: Rep54,
  val property54: PropertyType[Data54],
  val column54: MacroColumnInfo,
  val rep55: Rep55,
  val property55: PropertyType[Data55],
  val column55: MacroColumnInfo) {
}
class CaseClassDataHelper55[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo,
  val data49: Data49,
  val column49: MacroColumnInfo,
  val data50: Data50,
  val column50: MacroColumnInfo,
  val data51: Data51,
  val column51: MacroColumnInfo,
  val data52: Data52,
  val column52: MacroColumnInfo,
  val data53: Data53,
  val column53: MacroColumnInfo,
  val data54: Data54,
  val column54: MacroColumnInfo,
  val data55: Data55,
  val column55: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper55
object CaseClassHelper55 {
  implicit def caseClassHelper55EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[EncoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[EncoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[EncoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[EncoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[EncoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[EncoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[EncoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper55[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55], CaseClassDataHelper55[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55], CaseClassHelper55[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper55[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55], RepCol, DataCol] {
      override type Target = CaseClassHelper55[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55]
      override type Data = CaseClassDataHelper55[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55]
      override def wrapRep(base: CaseClassHelper55[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55]): CaseClassHelper55[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55] = {
        new CaseClassHelper55(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55)
      }
      override def toLawRep(base: CaseClassHelper55[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55], oldRep: RepCol): RepCol = {
        val rep56 = oldRep
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper55[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55], rep: CaseClassHelper55[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55], oldData: DataCol): DataCol = {
        val data56 = oldData
        val data55 = shape55.value.buildData(data.data55, rep.rep55, data56)
        val data54 = shape54.value.buildData(data.data54, rep.rep54, data55)
        val data53 = shape53.value.buildData(data.data53, rep.rep53, data54)
        val data52 = shape52.value.buildData(data.data52, rep.rep52, data53)
        val data51 = shape51.value.buildData(data.data51, rep.rep51, data52)
        val data50 = shape50.value.buildData(data.data50, rep.rep50, data51)
        val data49 = shape49.value.buildData(data.data49, rep.rep49, data50)
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper55DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[DecoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[DecoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[DecoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[DecoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[DecoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[DecoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[DecoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper55[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55], CaseClassDataHelper55[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55], CaseClassHelper55[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper55[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55], RepCol, DataCol] {
      override type Target = CaseClassHelper55[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55]
      override type Data = CaseClassDataHelper55[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55]
      override def wrapRep(base: CaseClassHelper55[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55]): CaseClassHelper55[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55] = {
        new CaseClassHelper55(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55)
      }
      override def toLawRep(base: CaseClassHelper55[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55], oldRep: RepCol): RepCol = {
        val rep56 = oldRep
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper55[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55], oldDataCol: DataCol): SplitData[CaseClassDataHelper55[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        val SplitData(item49, dataCol49) = shape49.value.takeData(rep.rep49, dataCol48)
        val SplitData(item50, dataCol50) = shape50.value.takeData(rep.rep50, dataCol49)
        val SplitData(item51, dataCol51) = shape51.value.takeData(rep.rep51, dataCol50)
        val SplitData(item52, dataCol52) = shape52.value.takeData(rep.rep52, dataCol51)
        val SplitData(item53, dataCol53) = shape53.value.takeData(rep.rep53, dataCol52)
        val SplitData(item54, dataCol54) = shape54.value.takeData(rep.rep54, dataCol53)
        val SplitData(item55, dataCol55) = shape55.value.takeData(rep.rep55, dataCol54)
        SplitData(
          current = new CaseClassDataHelper55(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48,
            data49 = item49,
            column49 = rep.column49,
            data50 = item50,
            column50 = rep.column50,
            data51 = item51,
            column51 = rep.column51,
            data52 = item52,
            column52 = rep.column52,
            data53 = item53,
            column53 = rep.column53,
            data54 = item54,
            column54 = rep.column54,
            data55 = item55,
            column55 = rep.column55),
          left = dataCol55)
      }
    }
  }
}
class CaseClassHelper56[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo,
  val rep49: Rep49,
  val property49: PropertyType[Data49],
  val column49: MacroColumnInfo,
  val rep50: Rep50,
  val property50: PropertyType[Data50],
  val column50: MacroColumnInfo,
  val rep51: Rep51,
  val property51: PropertyType[Data51],
  val column51: MacroColumnInfo,
  val rep52: Rep52,
  val property52: PropertyType[Data52],
  val column52: MacroColumnInfo,
  val rep53: Rep53,
  val property53: PropertyType[Data53],
  val column53: MacroColumnInfo,
  val rep54: Rep54,
  val property54: PropertyType[Data54],
  val column54: MacroColumnInfo,
  val rep55: Rep55,
  val property55: PropertyType[Data55],
  val column55: MacroColumnInfo,
  val rep56: Rep56,
  val property56: PropertyType[Data56],
  val column56: MacroColumnInfo) {
}
class CaseClassDataHelper56[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo,
  val data49: Data49,
  val column49: MacroColumnInfo,
  val data50: Data50,
  val column50: MacroColumnInfo,
  val data51: Data51,
  val column51: MacroColumnInfo,
  val data52: Data52,
  val column52: MacroColumnInfo,
  val data53: Data53,
  val column53: MacroColumnInfo,
  val data54: Data54,
  val column54: MacroColumnInfo,
  val data55: Data55,
  val column55: MacroColumnInfo,
  val data56: Data56,
  val column56: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper56
object CaseClassHelper56 {
  implicit def caseClassHelper56EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[EncoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[EncoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[EncoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[EncoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[EncoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[EncoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[EncoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[EncoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper56[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56], CaseClassDataHelper56[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56], CaseClassHelper56[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper56[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56], RepCol, DataCol] {
      override type Target = CaseClassHelper56[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56]
      override type Data = CaseClassDataHelper56[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56]
      override def wrapRep(base: CaseClassHelper56[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56]): CaseClassHelper56[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56] = {
        new CaseClassHelper56(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56)
      }
      override def toLawRep(base: CaseClassHelper56[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56], oldRep: RepCol): RepCol = {
        val rep57 = oldRep
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper56[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56], rep: CaseClassHelper56[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56], oldData: DataCol): DataCol = {
        val data57 = oldData
        val data56 = shape56.value.buildData(data.data56, rep.rep56, data57)
        val data55 = shape55.value.buildData(data.data55, rep.rep55, data56)
        val data54 = shape54.value.buildData(data.data54, rep.rep54, data55)
        val data53 = shape53.value.buildData(data.data53, rep.rep53, data54)
        val data52 = shape52.value.buildData(data.data52, rep.rep52, data53)
        val data51 = shape51.value.buildData(data.data51, rep.rep51, data52)
        val data50 = shape50.value.buildData(data.data50, rep.rep50, data51)
        val data49 = shape49.value.buildData(data.data49, rep.rep49, data50)
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper56DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[DecoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[DecoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[DecoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[DecoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[DecoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[DecoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[DecoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[DecoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper56[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56], CaseClassDataHelper56[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56], CaseClassHelper56[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper56[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56], RepCol, DataCol] {
      override type Target = CaseClassHelper56[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56]
      override type Data = CaseClassDataHelper56[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56]
      override def wrapRep(base: CaseClassHelper56[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56]): CaseClassHelper56[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56] = {
        new CaseClassHelper56(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56)
      }
      override def toLawRep(base: CaseClassHelper56[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56], oldRep: RepCol): RepCol = {
        val rep57 = oldRep
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper56[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56], oldDataCol: DataCol): SplitData[CaseClassDataHelper56[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        val SplitData(item49, dataCol49) = shape49.value.takeData(rep.rep49, dataCol48)
        val SplitData(item50, dataCol50) = shape50.value.takeData(rep.rep50, dataCol49)
        val SplitData(item51, dataCol51) = shape51.value.takeData(rep.rep51, dataCol50)
        val SplitData(item52, dataCol52) = shape52.value.takeData(rep.rep52, dataCol51)
        val SplitData(item53, dataCol53) = shape53.value.takeData(rep.rep53, dataCol52)
        val SplitData(item54, dataCol54) = shape54.value.takeData(rep.rep54, dataCol53)
        val SplitData(item55, dataCol55) = shape55.value.takeData(rep.rep55, dataCol54)
        val SplitData(item56, dataCol56) = shape56.value.takeData(rep.rep56, dataCol55)
        SplitData(
          current = new CaseClassDataHelper56(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48,
            data49 = item49,
            column49 = rep.column49,
            data50 = item50,
            column50 = rep.column50,
            data51 = item51,
            column51 = rep.column51,
            data52 = item52,
            column52 = rep.column52,
            data53 = item53,
            column53 = rep.column53,
            data54 = item54,
            column54 = rep.column54,
            data55 = item55,
            column55 = rep.column55,
            data56 = item56,
            column56 = rep.column56),
          left = dataCol56)
      }
    }
  }
}
class CaseClassHelper57[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo,
  val rep49: Rep49,
  val property49: PropertyType[Data49],
  val column49: MacroColumnInfo,
  val rep50: Rep50,
  val property50: PropertyType[Data50],
  val column50: MacroColumnInfo,
  val rep51: Rep51,
  val property51: PropertyType[Data51],
  val column51: MacroColumnInfo,
  val rep52: Rep52,
  val property52: PropertyType[Data52],
  val column52: MacroColumnInfo,
  val rep53: Rep53,
  val property53: PropertyType[Data53],
  val column53: MacroColumnInfo,
  val rep54: Rep54,
  val property54: PropertyType[Data54],
  val column54: MacroColumnInfo,
  val rep55: Rep55,
  val property55: PropertyType[Data55],
  val column55: MacroColumnInfo,
  val rep56: Rep56,
  val property56: PropertyType[Data56],
  val column56: MacroColumnInfo,
  val rep57: Rep57,
  val property57: PropertyType[Data57],
  val column57: MacroColumnInfo) {
}
class CaseClassDataHelper57[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo,
  val data49: Data49,
  val column49: MacroColumnInfo,
  val data50: Data50,
  val column50: MacroColumnInfo,
  val data51: Data51,
  val column51: MacroColumnInfo,
  val data52: Data52,
  val column52: MacroColumnInfo,
  val data53: Data53,
  val column53: MacroColumnInfo,
  val data54: Data54,
  val column54: MacroColumnInfo,
  val data55: Data55,
  val column55: MacroColumnInfo,
  val data56: Data56,
  val column56: MacroColumnInfo,
  val data57: Data57,
  val column57: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper57
object CaseClassHelper57 {
  implicit def caseClassHelper57EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[EncoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[EncoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[EncoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[EncoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[EncoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[EncoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[EncoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[EncoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]],
    shape57: Lazy[EncoderShape.Aux[Rep57, Data57, Target57, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper57[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57], CaseClassDataHelper57[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57], CaseClassHelper57[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper57[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57], RepCol, DataCol] {
      override type Target = CaseClassHelper57[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57]
      override type Data = CaseClassDataHelper57[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57]
      override def wrapRep(base: CaseClassHelper57[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57]): CaseClassHelper57[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57] = {
        new CaseClassHelper57(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56,
          rep57 = shape57.value.wrapRep(base.rep57),
          property57 = base.property57,
          column57 = base.column57)
      }
      override def toLawRep(base: CaseClassHelper57[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57], oldRep: RepCol): RepCol = {
        val rep58 = oldRep
        val rep57 = shape57.value.toLawRep(base.rep57, rep58)
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper57[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57], rep: CaseClassHelper57[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57], oldData: DataCol): DataCol = {
        val data58 = oldData
        val data57 = shape57.value.buildData(data.data57, rep.rep57, data58)
        val data56 = shape56.value.buildData(data.data56, rep.rep56, data57)
        val data55 = shape55.value.buildData(data.data55, rep.rep55, data56)
        val data54 = shape54.value.buildData(data.data54, rep.rep54, data55)
        val data53 = shape53.value.buildData(data.data53, rep.rep53, data54)
        val data52 = shape52.value.buildData(data.data52, rep.rep52, data53)
        val data51 = shape51.value.buildData(data.data51, rep.rep51, data52)
        val data50 = shape50.value.buildData(data.data50, rep.rep50, data51)
        val data49 = shape49.value.buildData(data.data49, rep.rep49, data50)
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper57DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[DecoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[DecoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[DecoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[DecoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[DecoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[DecoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[DecoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[DecoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]],
    shape57: Lazy[DecoderShape.Aux[Rep57, Data57, Target57, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper57[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57], CaseClassDataHelper57[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57], CaseClassHelper57[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper57[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57], RepCol, DataCol] {
      override type Target = CaseClassHelper57[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57]
      override type Data = CaseClassDataHelper57[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57]
      override def wrapRep(base: CaseClassHelper57[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57]): CaseClassHelper57[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57] = {
        new CaseClassHelper57(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56,
          rep57 = shape57.value.wrapRep(base.rep57),
          property57 = base.property57,
          column57 = base.column57)
      }
      override def toLawRep(base: CaseClassHelper57[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57], oldRep: RepCol): RepCol = {
        val rep58 = oldRep
        val rep57 = shape57.value.toLawRep(base.rep57, rep58)
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper57[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57], oldDataCol: DataCol): SplitData[CaseClassDataHelper57[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        val SplitData(item49, dataCol49) = shape49.value.takeData(rep.rep49, dataCol48)
        val SplitData(item50, dataCol50) = shape50.value.takeData(rep.rep50, dataCol49)
        val SplitData(item51, dataCol51) = shape51.value.takeData(rep.rep51, dataCol50)
        val SplitData(item52, dataCol52) = shape52.value.takeData(rep.rep52, dataCol51)
        val SplitData(item53, dataCol53) = shape53.value.takeData(rep.rep53, dataCol52)
        val SplitData(item54, dataCol54) = shape54.value.takeData(rep.rep54, dataCol53)
        val SplitData(item55, dataCol55) = shape55.value.takeData(rep.rep55, dataCol54)
        val SplitData(item56, dataCol56) = shape56.value.takeData(rep.rep56, dataCol55)
        val SplitData(item57, dataCol57) = shape57.value.takeData(rep.rep57, dataCol56)
        SplitData(
          current = new CaseClassDataHelper57(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48,
            data49 = item49,
            column49 = rep.column49,
            data50 = item50,
            column50 = rep.column50,
            data51 = item51,
            column51 = rep.column51,
            data52 = item52,
            column52 = rep.column52,
            data53 = item53,
            column53 = rep.column53,
            data54 = item54,
            column54 = rep.column54,
            data55 = item55,
            column55 = rep.column55,
            data56 = item56,
            column56 = rep.column56,
            data57 = item57,
            column57 = rep.column57),
          left = dataCol57)
      }
    }
  }
}
class CaseClassHelper58[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo,
  val rep49: Rep49,
  val property49: PropertyType[Data49],
  val column49: MacroColumnInfo,
  val rep50: Rep50,
  val property50: PropertyType[Data50],
  val column50: MacroColumnInfo,
  val rep51: Rep51,
  val property51: PropertyType[Data51],
  val column51: MacroColumnInfo,
  val rep52: Rep52,
  val property52: PropertyType[Data52],
  val column52: MacroColumnInfo,
  val rep53: Rep53,
  val property53: PropertyType[Data53],
  val column53: MacroColumnInfo,
  val rep54: Rep54,
  val property54: PropertyType[Data54],
  val column54: MacroColumnInfo,
  val rep55: Rep55,
  val property55: PropertyType[Data55],
  val column55: MacroColumnInfo,
  val rep56: Rep56,
  val property56: PropertyType[Data56],
  val column56: MacroColumnInfo,
  val rep57: Rep57,
  val property57: PropertyType[Data57],
  val column57: MacroColumnInfo,
  val rep58: Rep58,
  val property58: PropertyType[Data58],
  val column58: MacroColumnInfo) {
}
class CaseClassDataHelper58[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo,
  val data49: Data49,
  val column49: MacroColumnInfo,
  val data50: Data50,
  val column50: MacroColumnInfo,
  val data51: Data51,
  val column51: MacroColumnInfo,
  val data52: Data52,
  val column52: MacroColumnInfo,
  val data53: Data53,
  val column53: MacroColumnInfo,
  val data54: Data54,
  val column54: MacroColumnInfo,
  val data55: Data55,
  val column55: MacroColumnInfo,
  val data56: Data56,
  val column56: MacroColumnInfo,
  val data57: Data57,
  val column57: MacroColumnInfo,
  val data58: Data58,
  val column58: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper58
object CaseClassHelper58 {
  implicit def caseClassHelper58EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[EncoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[EncoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[EncoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[EncoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[EncoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[EncoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[EncoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[EncoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]],
    shape57: Lazy[EncoderShape.Aux[Rep57, Data57, Target57, RepCol, DataCol]],
    shape58: Lazy[EncoderShape.Aux[Rep58, Data58, Target58, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper58[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58], CaseClassDataHelper58[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58], CaseClassHelper58[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper58[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58], RepCol, DataCol] {
      override type Target = CaseClassHelper58[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58]
      override type Data = CaseClassDataHelper58[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58]
      override def wrapRep(base: CaseClassHelper58[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58]): CaseClassHelper58[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58] = {
        new CaseClassHelper58(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56,
          rep57 = shape57.value.wrapRep(base.rep57),
          property57 = base.property57,
          column57 = base.column57,
          rep58 = shape58.value.wrapRep(base.rep58),
          property58 = base.property58,
          column58 = base.column58)
      }
      override def toLawRep(base: CaseClassHelper58[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58], oldRep: RepCol): RepCol = {
        val rep59 = oldRep
        val rep58 = shape58.value.toLawRep(base.rep58, rep59)
        val rep57 = shape57.value.toLawRep(base.rep57, rep58)
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper58[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58], rep: CaseClassHelper58[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58], oldData: DataCol): DataCol = {
        val data59 = oldData
        val data58 = shape58.value.buildData(data.data58, rep.rep58, data59)
        val data57 = shape57.value.buildData(data.data57, rep.rep57, data58)
        val data56 = shape56.value.buildData(data.data56, rep.rep56, data57)
        val data55 = shape55.value.buildData(data.data55, rep.rep55, data56)
        val data54 = shape54.value.buildData(data.data54, rep.rep54, data55)
        val data53 = shape53.value.buildData(data.data53, rep.rep53, data54)
        val data52 = shape52.value.buildData(data.data52, rep.rep52, data53)
        val data51 = shape51.value.buildData(data.data51, rep.rep51, data52)
        val data50 = shape50.value.buildData(data.data50, rep.rep50, data51)
        val data49 = shape49.value.buildData(data.data49, rep.rep49, data50)
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper58DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[DecoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[DecoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[DecoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[DecoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[DecoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[DecoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[DecoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[DecoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]],
    shape57: Lazy[DecoderShape.Aux[Rep57, Data57, Target57, RepCol, DataCol]],
    shape58: Lazy[DecoderShape.Aux[Rep58, Data58, Target58, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper58[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58], CaseClassDataHelper58[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58], CaseClassHelper58[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper58[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58], RepCol, DataCol] {
      override type Target = CaseClassHelper58[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58]
      override type Data = CaseClassDataHelper58[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58]
      override def wrapRep(base: CaseClassHelper58[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58]): CaseClassHelper58[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58] = {
        new CaseClassHelper58(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56,
          rep57 = shape57.value.wrapRep(base.rep57),
          property57 = base.property57,
          column57 = base.column57,
          rep58 = shape58.value.wrapRep(base.rep58),
          property58 = base.property58,
          column58 = base.column58)
      }
      override def toLawRep(base: CaseClassHelper58[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58], oldRep: RepCol): RepCol = {
        val rep59 = oldRep
        val rep58 = shape58.value.toLawRep(base.rep58, rep59)
        val rep57 = shape57.value.toLawRep(base.rep57, rep58)
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper58[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58], oldDataCol: DataCol): SplitData[CaseClassDataHelper58[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        val SplitData(item49, dataCol49) = shape49.value.takeData(rep.rep49, dataCol48)
        val SplitData(item50, dataCol50) = shape50.value.takeData(rep.rep50, dataCol49)
        val SplitData(item51, dataCol51) = shape51.value.takeData(rep.rep51, dataCol50)
        val SplitData(item52, dataCol52) = shape52.value.takeData(rep.rep52, dataCol51)
        val SplitData(item53, dataCol53) = shape53.value.takeData(rep.rep53, dataCol52)
        val SplitData(item54, dataCol54) = shape54.value.takeData(rep.rep54, dataCol53)
        val SplitData(item55, dataCol55) = shape55.value.takeData(rep.rep55, dataCol54)
        val SplitData(item56, dataCol56) = shape56.value.takeData(rep.rep56, dataCol55)
        val SplitData(item57, dataCol57) = shape57.value.takeData(rep.rep57, dataCol56)
        val SplitData(item58, dataCol58) = shape58.value.takeData(rep.rep58, dataCol57)
        SplitData(
          current = new CaseClassDataHelper58(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48,
            data49 = item49,
            column49 = rep.column49,
            data50 = item50,
            column50 = rep.column50,
            data51 = item51,
            column51 = rep.column51,
            data52 = item52,
            column52 = rep.column52,
            data53 = item53,
            column53 = rep.column53,
            data54 = item54,
            column54 = rep.column54,
            data55 = item55,
            column55 = rep.column55,
            data56 = item56,
            column56 = rep.column56,
            data57 = item57,
            column57 = rep.column57,
            data58 = item58,
            column58 = rep.column58),
          left = dataCol58)
      }
    }
  }
}
class CaseClassHelper59[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo,
  val rep49: Rep49,
  val property49: PropertyType[Data49],
  val column49: MacroColumnInfo,
  val rep50: Rep50,
  val property50: PropertyType[Data50],
  val column50: MacroColumnInfo,
  val rep51: Rep51,
  val property51: PropertyType[Data51],
  val column51: MacroColumnInfo,
  val rep52: Rep52,
  val property52: PropertyType[Data52],
  val column52: MacroColumnInfo,
  val rep53: Rep53,
  val property53: PropertyType[Data53],
  val column53: MacroColumnInfo,
  val rep54: Rep54,
  val property54: PropertyType[Data54],
  val column54: MacroColumnInfo,
  val rep55: Rep55,
  val property55: PropertyType[Data55],
  val column55: MacroColumnInfo,
  val rep56: Rep56,
  val property56: PropertyType[Data56],
  val column56: MacroColumnInfo,
  val rep57: Rep57,
  val property57: PropertyType[Data57],
  val column57: MacroColumnInfo,
  val rep58: Rep58,
  val property58: PropertyType[Data58],
  val column58: MacroColumnInfo,
  val rep59: Rep59,
  val property59: PropertyType[Data59],
  val column59: MacroColumnInfo) {
}
class CaseClassDataHelper59[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo,
  val data49: Data49,
  val column49: MacroColumnInfo,
  val data50: Data50,
  val column50: MacroColumnInfo,
  val data51: Data51,
  val column51: MacroColumnInfo,
  val data52: Data52,
  val column52: MacroColumnInfo,
  val data53: Data53,
  val column53: MacroColumnInfo,
  val data54: Data54,
  val column54: MacroColumnInfo,
  val data55: Data55,
  val column55: MacroColumnInfo,
  val data56: Data56,
  val column56: MacroColumnInfo,
  val data57: Data57,
  val column57: MacroColumnInfo,
  val data58: Data58,
  val column58: MacroColumnInfo,
  val data59: Data59,
  val column59: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper59
object CaseClassHelper59 {
  implicit def caseClassHelper59EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[EncoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[EncoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[EncoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[EncoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[EncoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[EncoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[EncoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[EncoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]],
    shape57: Lazy[EncoderShape.Aux[Rep57, Data57, Target57, RepCol, DataCol]],
    shape58: Lazy[EncoderShape.Aux[Rep58, Data58, Target58, RepCol, DataCol]],
    shape59: Lazy[EncoderShape.Aux[Rep59, Data59, Target59, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper59[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59], CaseClassDataHelper59[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59], CaseClassHelper59[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper59[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59], RepCol, DataCol] {
      override type Target = CaseClassHelper59[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59]
      override type Data = CaseClassDataHelper59[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59]
      override def wrapRep(base: CaseClassHelper59[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59]): CaseClassHelper59[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59] = {
        new CaseClassHelper59(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56,
          rep57 = shape57.value.wrapRep(base.rep57),
          property57 = base.property57,
          column57 = base.column57,
          rep58 = shape58.value.wrapRep(base.rep58),
          property58 = base.property58,
          column58 = base.column58,
          rep59 = shape59.value.wrapRep(base.rep59),
          property59 = base.property59,
          column59 = base.column59)
      }
      override def toLawRep(base: CaseClassHelper59[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59], oldRep: RepCol): RepCol = {
        val rep60 = oldRep
        val rep59 = shape59.value.toLawRep(base.rep59, rep60)
        val rep58 = shape58.value.toLawRep(base.rep58, rep59)
        val rep57 = shape57.value.toLawRep(base.rep57, rep58)
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper59[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59], rep: CaseClassHelper59[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59], oldData: DataCol): DataCol = {
        val data60 = oldData
        val data59 = shape59.value.buildData(data.data59, rep.rep59, data60)
        val data58 = shape58.value.buildData(data.data58, rep.rep58, data59)
        val data57 = shape57.value.buildData(data.data57, rep.rep57, data58)
        val data56 = shape56.value.buildData(data.data56, rep.rep56, data57)
        val data55 = shape55.value.buildData(data.data55, rep.rep55, data56)
        val data54 = shape54.value.buildData(data.data54, rep.rep54, data55)
        val data53 = shape53.value.buildData(data.data53, rep.rep53, data54)
        val data52 = shape52.value.buildData(data.data52, rep.rep52, data53)
        val data51 = shape51.value.buildData(data.data51, rep.rep51, data52)
        val data50 = shape50.value.buildData(data.data50, rep.rep50, data51)
        val data49 = shape49.value.buildData(data.data49, rep.rep49, data50)
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper59DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[DecoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[DecoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[DecoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[DecoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[DecoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[DecoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[DecoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[DecoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]],
    shape57: Lazy[DecoderShape.Aux[Rep57, Data57, Target57, RepCol, DataCol]],
    shape58: Lazy[DecoderShape.Aux[Rep58, Data58, Target58, RepCol, DataCol]],
    shape59: Lazy[DecoderShape.Aux[Rep59, Data59, Target59, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper59[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59], CaseClassDataHelper59[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59], CaseClassHelper59[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper59[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59], RepCol, DataCol] {
      override type Target = CaseClassHelper59[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59]
      override type Data = CaseClassDataHelper59[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59]
      override def wrapRep(base: CaseClassHelper59[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59]): CaseClassHelper59[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59] = {
        new CaseClassHelper59(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56,
          rep57 = shape57.value.wrapRep(base.rep57),
          property57 = base.property57,
          column57 = base.column57,
          rep58 = shape58.value.wrapRep(base.rep58),
          property58 = base.property58,
          column58 = base.column58,
          rep59 = shape59.value.wrapRep(base.rep59),
          property59 = base.property59,
          column59 = base.column59)
      }
      override def toLawRep(base: CaseClassHelper59[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59], oldRep: RepCol): RepCol = {
        val rep60 = oldRep
        val rep59 = shape59.value.toLawRep(base.rep59, rep60)
        val rep58 = shape58.value.toLawRep(base.rep58, rep59)
        val rep57 = shape57.value.toLawRep(base.rep57, rep58)
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper59[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59], oldDataCol: DataCol): SplitData[CaseClassDataHelper59[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        val SplitData(item49, dataCol49) = shape49.value.takeData(rep.rep49, dataCol48)
        val SplitData(item50, dataCol50) = shape50.value.takeData(rep.rep50, dataCol49)
        val SplitData(item51, dataCol51) = shape51.value.takeData(rep.rep51, dataCol50)
        val SplitData(item52, dataCol52) = shape52.value.takeData(rep.rep52, dataCol51)
        val SplitData(item53, dataCol53) = shape53.value.takeData(rep.rep53, dataCol52)
        val SplitData(item54, dataCol54) = shape54.value.takeData(rep.rep54, dataCol53)
        val SplitData(item55, dataCol55) = shape55.value.takeData(rep.rep55, dataCol54)
        val SplitData(item56, dataCol56) = shape56.value.takeData(rep.rep56, dataCol55)
        val SplitData(item57, dataCol57) = shape57.value.takeData(rep.rep57, dataCol56)
        val SplitData(item58, dataCol58) = shape58.value.takeData(rep.rep58, dataCol57)
        val SplitData(item59, dataCol59) = shape59.value.takeData(rep.rep59, dataCol58)
        SplitData(
          current = new CaseClassDataHelper59(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48,
            data49 = item49,
            column49 = rep.column49,
            data50 = item50,
            column50 = rep.column50,
            data51 = item51,
            column51 = rep.column51,
            data52 = item52,
            column52 = rep.column52,
            data53 = item53,
            column53 = rep.column53,
            data54 = item54,
            column54 = rep.column54,
            data55 = item55,
            column55 = rep.column55,
            data56 = item56,
            column56 = rep.column56,
            data57 = item57,
            column57 = rep.column57,
            data58 = item58,
            column58 = rep.column58,
            data59 = item59,
            column59 = rep.column59),
          left = dataCol59)
      }
    }
  }
}
class CaseClassHelper60[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo,
  val rep49: Rep49,
  val property49: PropertyType[Data49],
  val column49: MacroColumnInfo,
  val rep50: Rep50,
  val property50: PropertyType[Data50],
  val column50: MacroColumnInfo,
  val rep51: Rep51,
  val property51: PropertyType[Data51],
  val column51: MacroColumnInfo,
  val rep52: Rep52,
  val property52: PropertyType[Data52],
  val column52: MacroColumnInfo,
  val rep53: Rep53,
  val property53: PropertyType[Data53],
  val column53: MacroColumnInfo,
  val rep54: Rep54,
  val property54: PropertyType[Data54],
  val column54: MacroColumnInfo,
  val rep55: Rep55,
  val property55: PropertyType[Data55],
  val column55: MacroColumnInfo,
  val rep56: Rep56,
  val property56: PropertyType[Data56],
  val column56: MacroColumnInfo,
  val rep57: Rep57,
  val property57: PropertyType[Data57],
  val column57: MacroColumnInfo,
  val rep58: Rep58,
  val property58: PropertyType[Data58],
  val column58: MacroColumnInfo,
  val rep59: Rep59,
  val property59: PropertyType[Data59],
  val column59: MacroColumnInfo,
  val rep60: Rep60,
  val property60: PropertyType[Data60],
  val column60: MacroColumnInfo) {
}
class CaseClassDataHelper60[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo,
  val data49: Data49,
  val column49: MacroColumnInfo,
  val data50: Data50,
  val column50: MacroColumnInfo,
  val data51: Data51,
  val column51: MacroColumnInfo,
  val data52: Data52,
  val column52: MacroColumnInfo,
  val data53: Data53,
  val column53: MacroColumnInfo,
  val data54: Data54,
  val column54: MacroColumnInfo,
  val data55: Data55,
  val column55: MacroColumnInfo,
  val data56: Data56,
  val column56: MacroColumnInfo,
  val data57: Data57,
  val column57: MacroColumnInfo,
  val data58: Data58,
  val column58: MacroColumnInfo,
  val data59: Data59,
  val column59: MacroColumnInfo,
  val data60: Data60,
  val column60: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper60
object CaseClassHelper60 {
  implicit def caseClassHelper60EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[EncoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[EncoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[EncoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[EncoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[EncoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[EncoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[EncoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[EncoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]],
    shape57: Lazy[EncoderShape.Aux[Rep57, Data57, Target57, RepCol, DataCol]],
    shape58: Lazy[EncoderShape.Aux[Rep58, Data58, Target58, RepCol, DataCol]],
    shape59: Lazy[EncoderShape.Aux[Rep59, Data59, Target59, RepCol, DataCol]],
    shape60: Lazy[EncoderShape.Aux[Rep60, Data60, Target60, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper60[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60], CaseClassDataHelper60[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60], CaseClassHelper60[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper60[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60], RepCol, DataCol] {
      override type Target = CaseClassHelper60[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60]
      override type Data = CaseClassDataHelper60[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60]
      override def wrapRep(base: CaseClassHelper60[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60]): CaseClassHelper60[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60] = {
        new CaseClassHelper60(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56,
          rep57 = shape57.value.wrapRep(base.rep57),
          property57 = base.property57,
          column57 = base.column57,
          rep58 = shape58.value.wrapRep(base.rep58),
          property58 = base.property58,
          column58 = base.column58,
          rep59 = shape59.value.wrapRep(base.rep59),
          property59 = base.property59,
          column59 = base.column59,
          rep60 = shape60.value.wrapRep(base.rep60),
          property60 = base.property60,
          column60 = base.column60)
      }
      override def toLawRep(base: CaseClassHelper60[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60], oldRep: RepCol): RepCol = {
        val rep61 = oldRep
        val rep60 = shape60.value.toLawRep(base.rep60, rep61)
        val rep59 = shape59.value.toLawRep(base.rep59, rep60)
        val rep58 = shape58.value.toLawRep(base.rep58, rep59)
        val rep57 = shape57.value.toLawRep(base.rep57, rep58)
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper60[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60], rep: CaseClassHelper60[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60], oldData: DataCol): DataCol = {
        val data61 = oldData
        val data60 = shape60.value.buildData(data.data60, rep.rep60, data61)
        val data59 = shape59.value.buildData(data.data59, rep.rep59, data60)
        val data58 = shape58.value.buildData(data.data58, rep.rep58, data59)
        val data57 = shape57.value.buildData(data.data57, rep.rep57, data58)
        val data56 = shape56.value.buildData(data.data56, rep.rep56, data57)
        val data55 = shape55.value.buildData(data.data55, rep.rep55, data56)
        val data54 = shape54.value.buildData(data.data54, rep.rep54, data55)
        val data53 = shape53.value.buildData(data.data53, rep.rep53, data54)
        val data52 = shape52.value.buildData(data.data52, rep.rep52, data53)
        val data51 = shape51.value.buildData(data.data51, rep.rep51, data52)
        val data50 = shape50.value.buildData(data.data50, rep.rep50, data51)
        val data49 = shape49.value.buildData(data.data49, rep.rep49, data50)
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper60DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[DecoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[DecoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[DecoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[DecoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[DecoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[DecoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[DecoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[DecoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]],
    shape57: Lazy[DecoderShape.Aux[Rep57, Data57, Target57, RepCol, DataCol]],
    shape58: Lazy[DecoderShape.Aux[Rep58, Data58, Target58, RepCol, DataCol]],
    shape59: Lazy[DecoderShape.Aux[Rep59, Data59, Target59, RepCol, DataCol]],
    shape60: Lazy[DecoderShape.Aux[Rep60, Data60, Target60, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper60[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60], CaseClassDataHelper60[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60], CaseClassHelper60[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper60[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60], RepCol, DataCol] {
      override type Target = CaseClassHelper60[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60]
      override type Data = CaseClassDataHelper60[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60]
      override def wrapRep(base: CaseClassHelper60[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60]): CaseClassHelper60[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60] = {
        new CaseClassHelper60(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56,
          rep57 = shape57.value.wrapRep(base.rep57),
          property57 = base.property57,
          column57 = base.column57,
          rep58 = shape58.value.wrapRep(base.rep58),
          property58 = base.property58,
          column58 = base.column58,
          rep59 = shape59.value.wrapRep(base.rep59),
          property59 = base.property59,
          column59 = base.column59,
          rep60 = shape60.value.wrapRep(base.rep60),
          property60 = base.property60,
          column60 = base.column60)
      }
      override def toLawRep(base: CaseClassHelper60[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60], oldRep: RepCol): RepCol = {
        val rep61 = oldRep
        val rep60 = shape60.value.toLawRep(base.rep60, rep61)
        val rep59 = shape59.value.toLawRep(base.rep59, rep60)
        val rep58 = shape58.value.toLawRep(base.rep58, rep59)
        val rep57 = shape57.value.toLawRep(base.rep57, rep58)
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper60[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60], oldDataCol: DataCol): SplitData[CaseClassDataHelper60[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        val SplitData(item49, dataCol49) = shape49.value.takeData(rep.rep49, dataCol48)
        val SplitData(item50, dataCol50) = shape50.value.takeData(rep.rep50, dataCol49)
        val SplitData(item51, dataCol51) = shape51.value.takeData(rep.rep51, dataCol50)
        val SplitData(item52, dataCol52) = shape52.value.takeData(rep.rep52, dataCol51)
        val SplitData(item53, dataCol53) = shape53.value.takeData(rep.rep53, dataCol52)
        val SplitData(item54, dataCol54) = shape54.value.takeData(rep.rep54, dataCol53)
        val SplitData(item55, dataCol55) = shape55.value.takeData(rep.rep55, dataCol54)
        val SplitData(item56, dataCol56) = shape56.value.takeData(rep.rep56, dataCol55)
        val SplitData(item57, dataCol57) = shape57.value.takeData(rep.rep57, dataCol56)
        val SplitData(item58, dataCol58) = shape58.value.takeData(rep.rep58, dataCol57)
        val SplitData(item59, dataCol59) = shape59.value.takeData(rep.rep59, dataCol58)
        val SplitData(item60, dataCol60) = shape60.value.takeData(rep.rep60, dataCol59)
        SplitData(
          current = new CaseClassDataHelper60(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48,
            data49 = item49,
            column49 = rep.column49,
            data50 = item50,
            column50 = rep.column50,
            data51 = item51,
            column51 = rep.column51,
            data52 = item52,
            column52 = rep.column52,
            data53 = item53,
            column53 = rep.column53,
            data54 = item54,
            column54 = rep.column54,
            data55 = item55,
            column55 = rep.column55,
            data56 = item56,
            column56 = rep.column56,
            data57 = item57,
            column57 = rep.column57,
            data58 = item58,
            column58 = rep.column58,
            data59 = item59,
            column59 = rep.column59,
            data60 = item60,
            column60 = rep.column60),
          left = dataCol60)
      }
    }
  }
}
class CaseClassHelper61[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo,
  val rep49: Rep49,
  val property49: PropertyType[Data49],
  val column49: MacroColumnInfo,
  val rep50: Rep50,
  val property50: PropertyType[Data50],
  val column50: MacroColumnInfo,
  val rep51: Rep51,
  val property51: PropertyType[Data51],
  val column51: MacroColumnInfo,
  val rep52: Rep52,
  val property52: PropertyType[Data52],
  val column52: MacroColumnInfo,
  val rep53: Rep53,
  val property53: PropertyType[Data53],
  val column53: MacroColumnInfo,
  val rep54: Rep54,
  val property54: PropertyType[Data54],
  val column54: MacroColumnInfo,
  val rep55: Rep55,
  val property55: PropertyType[Data55],
  val column55: MacroColumnInfo,
  val rep56: Rep56,
  val property56: PropertyType[Data56],
  val column56: MacroColumnInfo,
  val rep57: Rep57,
  val property57: PropertyType[Data57],
  val column57: MacroColumnInfo,
  val rep58: Rep58,
  val property58: PropertyType[Data58],
  val column58: MacroColumnInfo,
  val rep59: Rep59,
  val property59: PropertyType[Data59],
  val column59: MacroColumnInfo,
  val rep60: Rep60,
  val property60: PropertyType[Data60],
  val column60: MacroColumnInfo,
  val rep61: Rep61,
  val property61: PropertyType[Data61],
  val column61: MacroColumnInfo) {
}
class CaseClassDataHelper61[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo,
  val data49: Data49,
  val column49: MacroColumnInfo,
  val data50: Data50,
  val column50: MacroColumnInfo,
  val data51: Data51,
  val column51: MacroColumnInfo,
  val data52: Data52,
  val column52: MacroColumnInfo,
  val data53: Data53,
  val column53: MacroColumnInfo,
  val data54: Data54,
  val column54: MacroColumnInfo,
  val data55: Data55,
  val column55: MacroColumnInfo,
  val data56: Data56,
  val column56: MacroColumnInfo,
  val data57: Data57,
  val column57: MacroColumnInfo,
  val data58: Data58,
  val column58: MacroColumnInfo,
  val data59: Data59,
  val column59: MacroColumnInfo,
  val data60: Data60,
  val column60: MacroColumnInfo,
  val data61: Data61,
  val column61: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper61
object CaseClassHelper61 {
  implicit def caseClassHelper61EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60, Rep61, Data61, Target61, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[EncoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[EncoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[EncoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[EncoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[EncoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[EncoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[EncoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[EncoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]],
    shape57: Lazy[EncoderShape.Aux[Rep57, Data57, Target57, RepCol, DataCol]],
    shape58: Lazy[EncoderShape.Aux[Rep58, Data58, Target58, RepCol, DataCol]],
    shape59: Lazy[EncoderShape.Aux[Rep59, Data59, Target59, RepCol, DataCol]],
    shape60: Lazy[EncoderShape.Aux[Rep60, Data60, Target60, RepCol, DataCol]],
    shape61: Lazy[EncoderShape.Aux[Rep61, Data61, Target61, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper61[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61], CaseClassDataHelper61[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61], CaseClassHelper61[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper61[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61], RepCol, DataCol] {
      override type Target = CaseClassHelper61[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61]
      override type Data = CaseClassDataHelper61[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61]
      override def wrapRep(base: CaseClassHelper61[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61]): CaseClassHelper61[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61] = {
        new CaseClassHelper61(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56,
          rep57 = shape57.value.wrapRep(base.rep57),
          property57 = base.property57,
          column57 = base.column57,
          rep58 = shape58.value.wrapRep(base.rep58),
          property58 = base.property58,
          column58 = base.column58,
          rep59 = shape59.value.wrapRep(base.rep59),
          property59 = base.property59,
          column59 = base.column59,
          rep60 = shape60.value.wrapRep(base.rep60),
          property60 = base.property60,
          column60 = base.column60,
          rep61 = shape61.value.wrapRep(base.rep61),
          property61 = base.property61,
          column61 = base.column61)
      }
      override def toLawRep(base: CaseClassHelper61[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61], oldRep: RepCol): RepCol = {
        val rep62 = oldRep
        val rep61 = shape61.value.toLawRep(base.rep61, rep62)
        val rep60 = shape60.value.toLawRep(base.rep60, rep61)
        val rep59 = shape59.value.toLawRep(base.rep59, rep60)
        val rep58 = shape58.value.toLawRep(base.rep58, rep59)
        val rep57 = shape57.value.toLawRep(base.rep57, rep58)
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper61[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61], rep: CaseClassHelper61[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61], oldData: DataCol): DataCol = {
        val data62 = oldData
        val data61 = shape61.value.buildData(data.data61, rep.rep61, data62)
        val data60 = shape60.value.buildData(data.data60, rep.rep60, data61)
        val data59 = shape59.value.buildData(data.data59, rep.rep59, data60)
        val data58 = shape58.value.buildData(data.data58, rep.rep58, data59)
        val data57 = shape57.value.buildData(data.data57, rep.rep57, data58)
        val data56 = shape56.value.buildData(data.data56, rep.rep56, data57)
        val data55 = shape55.value.buildData(data.data55, rep.rep55, data56)
        val data54 = shape54.value.buildData(data.data54, rep.rep54, data55)
        val data53 = shape53.value.buildData(data.data53, rep.rep53, data54)
        val data52 = shape52.value.buildData(data.data52, rep.rep52, data53)
        val data51 = shape51.value.buildData(data.data51, rep.rep51, data52)
        val data50 = shape50.value.buildData(data.data50, rep.rep50, data51)
        val data49 = shape49.value.buildData(data.data49, rep.rep49, data50)
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper61DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60, Rep61, Data61, Target61, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[DecoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[DecoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[DecoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[DecoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[DecoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[DecoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[DecoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[DecoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]],
    shape57: Lazy[DecoderShape.Aux[Rep57, Data57, Target57, RepCol, DataCol]],
    shape58: Lazy[DecoderShape.Aux[Rep58, Data58, Target58, RepCol, DataCol]],
    shape59: Lazy[DecoderShape.Aux[Rep59, Data59, Target59, RepCol, DataCol]],
    shape60: Lazy[DecoderShape.Aux[Rep60, Data60, Target60, RepCol, DataCol]],
    shape61: Lazy[DecoderShape.Aux[Rep61, Data61, Target61, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper61[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61], CaseClassDataHelper61[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61], CaseClassHelper61[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper61[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61], RepCol, DataCol] {
      override type Target = CaseClassHelper61[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61]
      override type Data = CaseClassDataHelper61[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61]
      override def wrapRep(base: CaseClassHelper61[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61]): CaseClassHelper61[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61] = {
        new CaseClassHelper61(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56,
          rep57 = shape57.value.wrapRep(base.rep57),
          property57 = base.property57,
          column57 = base.column57,
          rep58 = shape58.value.wrapRep(base.rep58),
          property58 = base.property58,
          column58 = base.column58,
          rep59 = shape59.value.wrapRep(base.rep59),
          property59 = base.property59,
          column59 = base.column59,
          rep60 = shape60.value.wrapRep(base.rep60),
          property60 = base.property60,
          column60 = base.column60,
          rep61 = shape61.value.wrapRep(base.rep61),
          property61 = base.property61,
          column61 = base.column61)
      }
      override def toLawRep(base: CaseClassHelper61[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61], oldRep: RepCol): RepCol = {
        val rep62 = oldRep
        val rep61 = shape61.value.toLawRep(base.rep61, rep62)
        val rep60 = shape60.value.toLawRep(base.rep60, rep61)
        val rep59 = shape59.value.toLawRep(base.rep59, rep60)
        val rep58 = shape58.value.toLawRep(base.rep58, rep59)
        val rep57 = shape57.value.toLawRep(base.rep57, rep58)
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper61[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61], oldDataCol: DataCol): SplitData[CaseClassDataHelper61[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        val SplitData(item49, dataCol49) = shape49.value.takeData(rep.rep49, dataCol48)
        val SplitData(item50, dataCol50) = shape50.value.takeData(rep.rep50, dataCol49)
        val SplitData(item51, dataCol51) = shape51.value.takeData(rep.rep51, dataCol50)
        val SplitData(item52, dataCol52) = shape52.value.takeData(rep.rep52, dataCol51)
        val SplitData(item53, dataCol53) = shape53.value.takeData(rep.rep53, dataCol52)
        val SplitData(item54, dataCol54) = shape54.value.takeData(rep.rep54, dataCol53)
        val SplitData(item55, dataCol55) = shape55.value.takeData(rep.rep55, dataCol54)
        val SplitData(item56, dataCol56) = shape56.value.takeData(rep.rep56, dataCol55)
        val SplitData(item57, dataCol57) = shape57.value.takeData(rep.rep57, dataCol56)
        val SplitData(item58, dataCol58) = shape58.value.takeData(rep.rep58, dataCol57)
        val SplitData(item59, dataCol59) = shape59.value.takeData(rep.rep59, dataCol58)
        val SplitData(item60, dataCol60) = shape60.value.takeData(rep.rep60, dataCol59)
        val SplitData(item61, dataCol61) = shape61.value.takeData(rep.rep61, dataCol60)
        SplitData(
          current = new CaseClassDataHelper61(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48,
            data49 = item49,
            column49 = rep.column49,
            data50 = item50,
            column50 = rep.column50,
            data51 = item51,
            column51 = rep.column51,
            data52 = item52,
            column52 = rep.column52,
            data53 = item53,
            column53 = rep.column53,
            data54 = item54,
            column54 = rep.column54,
            data55 = item55,
            column55 = rep.column55,
            data56 = item56,
            column56 = rep.column56,
            data57 = item57,
            column57 = rep.column57,
            data58 = item58,
            column58 = rep.column58,
            data59 = item59,
            column59 = rep.column59,
            data60 = item60,
            column60 = rep.column60,
            data61 = item61,
            column61 = rep.column61),
          left = dataCol61)
      }
    }
  }
}
class CaseClassHelper62[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61, Rep62, Data62](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo,
  val rep49: Rep49,
  val property49: PropertyType[Data49],
  val column49: MacroColumnInfo,
  val rep50: Rep50,
  val property50: PropertyType[Data50],
  val column50: MacroColumnInfo,
  val rep51: Rep51,
  val property51: PropertyType[Data51],
  val column51: MacroColumnInfo,
  val rep52: Rep52,
  val property52: PropertyType[Data52],
  val column52: MacroColumnInfo,
  val rep53: Rep53,
  val property53: PropertyType[Data53],
  val column53: MacroColumnInfo,
  val rep54: Rep54,
  val property54: PropertyType[Data54],
  val column54: MacroColumnInfo,
  val rep55: Rep55,
  val property55: PropertyType[Data55],
  val column55: MacroColumnInfo,
  val rep56: Rep56,
  val property56: PropertyType[Data56],
  val column56: MacroColumnInfo,
  val rep57: Rep57,
  val property57: PropertyType[Data57],
  val column57: MacroColumnInfo,
  val rep58: Rep58,
  val property58: PropertyType[Data58],
  val column58: MacroColumnInfo,
  val rep59: Rep59,
  val property59: PropertyType[Data59],
  val column59: MacroColumnInfo,
  val rep60: Rep60,
  val property60: PropertyType[Data60],
  val column60: MacroColumnInfo,
  val rep61: Rep61,
  val property61: PropertyType[Data61],
  val column61: MacroColumnInfo,
  val rep62: Rep62,
  val property62: PropertyType[Data62],
  val column62: MacroColumnInfo) {
}
class CaseClassDataHelper62[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo,
  val data49: Data49,
  val column49: MacroColumnInfo,
  val data50: Data50,
  val column50: MacroColumnInfo,
  val data51: Data51,
  val column51: MacroColumnInfo,
  val data52: Data52,
  val column52: MacroColumnInfo,
  val data53: Data53,
  val column53: MacroColumnInfo,
  val data54: Data54,
  val column54: MacroColumnInfo,
  val data55: Data55,
  val column55: MacroColumnInfo,
  val data56: Data56,
  val column56: MacroColumnInfo,
  val data57: Data57,
  val column57: MacroColumnInfo,
  val data58: Data58,
  val column58: MacroColumnInfo,
  val data59: Data59,
  val column59: MacroColumnInfo,
  val data60: Data60,
  val column60: MacroColumnInfo,
  val data61: Data61,
  val column61: MacroColumnInfo,
  val data62: Data62,
  val column62: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper62
object CaseClassHelper62 {
  implicit def caseClassHelper62EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60, Rep61, Data61, Target61, Rep62, Data62, Target62, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[EncoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[EncoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[EncoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[EncoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[EncoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[EncoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[EncoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[EncoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]],
    shape57: Lazy[EncoderShape.Aux[Rep57, Data57, Target57, RepCol, DataCol]],
    shape58: Lazy[EncoderShape.Aux[Rep58, Data58, Target58, RepCol, DataCol]],
    shape59: Lazy[EncoderShape.Aux[Rep59, Data59, Target59, RepCol, DataCol]],
    shape60: Lazy[EncoderShape.Aux[Rep60, Data60, Target60, RepCol, DataCol]],
    shape61: Lazy[EncoderShape.Aux[Rep61, Data61, Target61, RepCol, DataCol]],
    shape62: Lazy[EncoderShape.Aux[Rep62, Data62, Target62, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper62[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61, Rep62, Data62], CaseClassDataHelper62[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62], CaseClassHelper62[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper62[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61, Rep62, Data62], RepCol, DataCol] {
      override type Target = CaseClassHelper62[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62]
      override type Data = CaseClassDataHelper62[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62]
      override def wrapRep(base: CaseClassHelper62[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61, Rep62, Data62]): CaseClassHelper62[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62] = {
        new CaseClassHelper62(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56,
          rep57 = shape57.value.wrapRep(base.rep57),
          property57 = base.property57,
          column57 = base.column57,
          rep58 = shape58.value.wrapRep(base.rep58),
          property58 = base.property58,
          column58 = base.column58,
          rep59 = shape59.value.wrapRep(base.rep59),
          property59 = base.property59,
          column59 = base.column59,
          rep60 = shape60.value.wrapRep(base.rep60),
          property60 = base.property60,
          column60 = base.column60,
          rep61 = shape61.value.wrapRep(base.rep61),
          property61 = base.property61,
          column61 = base.column61,
          rep62 = shape62.value.wrapRep(base.rep62),
          property62 = base.property62,
          column62 = base.column62)
      }
      override def toLawRep(base: CaseClassHelper62[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62], oldRep: RepCol): RepCol = {
        val rep63 = oldRep
        val rep62 = shape62.value.toLawRep(base.rep62, rep63)
        val rep61 = shape61.value.toLawRep(base.rep61, rep62)
        val rep60 = shape60.value.toLawRep(base.rep60, rep61)
        val rep59 = shape59.value.toLawRep(base.rep59, rep60)
        val rep58 = shape58.value.toLawRep(base.rep58, rep59)
        val rep57 = shape57.value.toLawRep(base.rep57, rep58)
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper62[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62], rep: CaseClassHelper62[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62], oldData: DataCol): DataCol = {
        val data63 = oldData
        val data62 = shape62.value.buildData(data.data62, rep.rep62, data63)
        val data61 = shape61.value.buildData(data.data61, rep.rep61, data62)
        val data60 = shape60.value.buildData(data.data60, rep.rep60, data61)
        val data59 = shape59.value.buildData(data.data59, rep.rep59, data60)
        val data58 = shape58.value.buildData(data.data58, rep.rep58, data59)
        val data57 = shape57.value.buildData(data.data57, rep.rep57, data58)
        val data56 = shape56.value.buildData(data.data56, rep.rep56, data57)
        val data55 = shape55.value.buildData(data.data55, rep.rep55, data56)
        val data54 = shape54.value.buildData(data.data54, rep.rep54, data55)
        val data53 = shape53.value.buildData(data.data53, rep.rep53, data54)
        val data52 = shape52.value.buildData(data.data52, rep.rep52, data53)
        val data51 = shape51.value.buildData(data.data51, rep.rep51, data52)
        val data50 = shape50.value.buildData(data.data50, rep.rep50, data51)
        val data49 = shape49.value.buildData(data.data49, rep.rep49, data50)
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper62DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60, Rep61, Data61, Target61, Rep62, Data62, Target62, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[DecoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[DecoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[DecoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[DecoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[DecoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[DecoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[DecoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[DecoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]],
    shape57: Lazy[DecoderShape.Aux[Rep57, Data57, Target57, RepCol, DataCol]],
    shape58: Lazy[DecoderShape.Aux[Rep58, Data58, Target58, RepCol, DataCol]],
    shape59: Lazy[DecoderShape.Aux[Rep59, Data59, Target59, RepCol, DataCol]],
    shape60: Lazy[DecoderShape.Aux[Rep60, Data60, Target60, RepCol, DataCol]],
    shape61: Lazy[DecoderShape.Aux[Rep61, Data61, Target61, RepCol, DataCol]],
    shape62: Lazy[DecoderShape.Aux[Rep62, Data62, Target62, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper62[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61, Rep62, Data62], CaseClassDataHelper62[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62], CaseClassHelper62[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper62[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61, Rep62, Data62], RepCol, DataCol] {
      override type Target = CaseClassHelper62[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62]
      override type Data = CaseClassDataHelper62[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62]
      override def wrapRep(base: CaseClassHelper62[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61, Rep62, Data62]): CaseClassHelper62[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62] = {
        new CaseClassHelper62(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56,
          rep57 = shape57.value.wrapRep(base.rep57),
          property57 = base.property57,
          column57 = base.column57,
          rep58 = shape58.value.wrapRep(base.rep58),
          property58 = base.property58,
          column58 = base.column58,
          rep59 = shape59.value.wrapRep(base.rep59),
          property59 = base.property59,
          column59 = base.column59,
          rep60 = shape60.value.wrapRep(base.rep60),
          property60 = base.property60,
          column60 = base.column60,
          rep61 = shape61.value.wrapRep(base.rep61),
          property61 = base.property61,
          column61 = base.column61,
          rep62 = shape62.value.wrapRep(base.rep62),
          property62 = base.property62,
          column62 = base.column62)
      }
      override def toLawRep(base: CaseClassHelper62[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62], oldRep: RepCol): RepCol = {
        val rep63 = oldRep
        val rep62 = shape62.value.toLawRep(base.rep62, rep63)
        val rep61 = shape61.value.toLawRep(base.rep61, rep62)
        val rep60 = shape60.value.toLawRep(base.rep60, rep61)
        val rep59 = shape59.value.toLawRep(base.rep59, rep60)
        val rep58 = shape58.value.toLawRep(base.rep58, rep59)
        val rep57 = shape57.value.toLawRep(base.rep57, rep58)
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper62[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62], oldDataCol: DataCol): SplitData[CaseClassDataHelper62[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        val SplitData(item49, dataCol49) = shape49.value.takeData(rep.rep49, dataCol48)
        val SplitData(item50, dataCol50) = shape50.value.takeData(rep.rep50, dataCol49)
        val SplitData(item51, dataCol51) = shape51.value.takeData(rep.rep51, dataCol50)
        val SplitData(item52, dataCol52) = shape52.value.takeData(rep.rep52, dataCol51)
        val SplitData(item53, dataCol53) = shape53.value.takeData(rep.rep53, dataCol52)
        val SplitData(item54, dataCol54) = shape54.value.takeData(rep.rep54, dataCol53)
        val SplitData(item55, dataCol55) = shape55.value.takeData(rep.rep55, dataCol54)
        val SplitData(item56, dataCol56) = shape56.value.takeData(rep.rep56, dataCol55)
        val SplitData(item57, dataCol57) = shape57.value.takeData(rep.rep57, dataCol56)
        val SplitData(item58, dataCol58) = shape58.value.takeData(rep.rep58, dataCol57)
        val SplitData(item59, dataCol59) = shape59.value.takeData(rep.rep59, dataCol58)
        val SplitData(item60, dataCol60) = shape60.value.takeData(rep.rep60, dataCol59)
        val SplitData(item61, dataCol61) = shape61.value.takeData(rep.rep61, dataCol60)
        val SplitData(item62, dataCol62) = shape62.value.takeData(rep.rep62, dataCol61)
        SplitData(
          current = new CaseClassDataHelper62(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48,
            data49 = item49,
            column49 = rep.column49,
            data50 = item50,
            column50 = rep.column50,
            data51 = item51,
            column51 = rep.column51,
            data52 = item52,
            column52 = rep.column52,
            data53 = item53,
            column53 = rep.column53,
            data54 = item54,
            column54 = rep.column54,
            data55 = item55,
            column55 = rep.column55,
            data56 = item56,
            column56 = rep.column56,
            data57 = item57,
            column57 = rep.column57,
            data58 = item58,
            column58 = rep.column58,
            data59 = item59,
            column59 = rep.column59,
            data60 = item60,
            column60 = rep.column60,
            data61 = item61,
            column61 = rep.column61,
            data62 = item62,
            column62 = rep.column62),
          left = dataCol62)
      }
    }
  }
}
class CaseClassHelper63[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61, Rep62, Data62, Rep63, Data63](
  val rep1: Rep1,
  val property1: PropertyType[Data1],
  val column1: MacroColumnInfo,
  val rep2: Rep2,
  val property2: PropertyType[Data2],
  val column2: MacroColumnInfo,
  val rep3: Rep3,
  val property3: PropertyType[Data3],
  val column3: MacroColumnInfo,
  val rep4: Rep4,
  val property4: PropertyType[Data4],
  val column4: MacroColumnInfo,
  val rep5: Rep5,
  val property5: PropertyType[Data5],
  val column5: MacroColumnInfo,
  val rep6: Rep6,
  val property6: PropertyType[Data6],
  val column6: MacroColumnInfo,
  val rep7: Rep7,
  val property7: PropertyType[Data7],
  val column7: MacroColumnInfo,
  val rep8: Rep8,
  val property8: PropertyType[Data8],
  val column8: MacroColumnInfo,
  val rep9: Rep9,
  val property9: PropertyType[Data9],
  val column9: MacroColumnInfo,
  val rep10: Rep10,
  val property10: PropertyType[Data10],
  val column10: MacroColumnInfo,
  val rep11: Rep11,
  val property11: PropertyType[Data11],
  val column11: MacroColumnInfo,
  val rep12: Rep12,
  val property12: PropertyType[Data12],
  val column12: MacroColumnInfo,
  val rep13: Rep13,
  val property13: PropertyType[Data13],
  val column13: MacroColumnInfo,
  val rep14: Rep14,
  val property14: PropertyType[Data14],
  val column14: MacroColumnInfo,
  val rep15: Rep15,
  val property15: PropertyType[Data15],
  val column15: MacroColumnInfo,
  val rep16: Rep16,
  val property16: PropertyType[Data16],
  val column16: MacroColumnInfo,
  val rep17: Rep17,
  val property17: PropertyType[Data17],
  val column17: MacroColumnInfo,
  val rep18: Rep18,
  val property18: PropertyType[Data18],
  val column18: MacroColumnInfo,
  val rep19: Rep19,
  val property19: PropertyType[Data19],
  val column19: MacroColumnInfo,
  val rep20: Rep20,
  val property20: PropertyType[Data20],
  val column20: MacroColumnInfo,
  val rep21: Rep21,
  val property21: PropertyType[Data21],
  val column21: MacroColumnInfo,
  val rep22: Rep22,
  val property22: PropertyType[Data22],
  val column22: MacroColumnInfo,
  val rep23: Rep23,
  val property23: PropertyType[Data23],
  val column23: MacroColumnInfo,
  val rep24: Rep24,
  val property24: PropertyType[Data24],
  val column24: MacroColumnInfo,
  val rep25: Rep25,
  val property25: PropertyType[Data25],
  val column25: MacroColumnInfo,
  val rep26: Rep26,
  val property26: PropertyType[Data26],
  val column26: MacroColumnInfo,
  val rep27: Rep27,
  val property27: PropertyType[Data27],
  val column27: MacroColumnInfo,
  val rep28: Rep28,
  val property28: PropertyType[Data28],
  val column28: MacroColumnInfo,
  val rep29: Rep29,
  val property29: PropertyType[Data29],
  val column29: MacroColumnInfo,
  val rep30: Rep30,
  val property30: PropertyType[Data30],
  val column30: MacroColumnInfo,
  val rep31: Rep31,
  val property31: PropertyType[Data31],
  val column31: MacroColumnInfo,
  val rep32: Rep32,
  val property32: PropertyType[Data32],
  val column32: MacroColumnInfo,
  val rep33: Rep33,
  val property33: PropertyType[Data33],
  val column33: MacroColumnInfo,
  val rep34: Rep34,
  val property34: PropertyType[Data34],
  val column34: MacroColumnInfo,
  val rep35: Rep35,
  val property35: PropertyType[Data35],
  val column35: MacroColumnInfo,
  val rep36: Rep36,
  val property36: PropertyType[Data36],
  val column36: MacroColumnInfo,
  val rep37: Rep37,
  val property37: PropertyType[Data37],
  val column37: MacroColumnInfo,
  val rep38: Rep38,
  val property38: PropertyType[Data38],
  val column38: MacroColumnInfo,
  val rep39: Rep39,
  val property39: PropertyType[Data39],
  val column39: MacroColumnInfo,
  val rep40: Rep40,
  val property40: PropertyType[Data40],
  val column40: MacroColumnInfo,
  val rep41: Rep41,
  val property41: PropertyType[Data41],
  val column41: MacroColumnInfo,
  val rep42: Rep42,
  val property42: PropertyType[Data42],
  val column42: MacroColumnInfo,
  val rep43: Rep43,
  val property43: PropertyType[Data43],
  val column43: MacroColumnInfo,
  val rep44: Rep44,
  val property44: PropertyType[Data44],
  val column44: MacroColumnInfo,
  val rep45: Rep45,
  val property45: PropertyType[Data45],
  val column45: MacroColumnInfo,
  val rep46: Rep46,
  val property46: PropertyType[Data46],
  val column46: MacroColumnInfo,
  val rep47: Rep47,
  val property47: PropertyType[Data47],
  val column47: MacroColumnInfo,
  val rep48: Rep48,
  val property48: PropertyType[Data48],
  val column48: MacroColumnInfo,
  val rep49: Rep49,
  val property49: PropertyType[Data49],
  val column49: MacroColumnInfo,
  val rep50: Rep50,
  val property50: PropertyType[Data50],
  val column50: MacroColumnInfo,
  val rep51: Rep51,
  val property51: PropertyType[Data51],
  val column51: MacroColumnInfo,
  val rep52: Rep52,
  val property52: PropertyType[Data52],
  val column52: MacroColumnInfo,
  val rep53: Rep53,
  val property53: PropertyType[Data53],
  val column53: MacroColumnInfo,
  val rep54: Rep54,
  val property54: PropertyType[Data54],
  val column54: MacroColumnInfo,
  val rep55: Rep55,
  val property55: PropertyType[Data55],
  val column55: MacroColumnInfo,
  val rep56: Rep56,
  val property56: PropertyType[Data56],
  val column56: MacroColumnInfo,
  val rep57: Rep57,
  val property57: PropertyType[Data57],
  val column57: MacroColumnInfo,
  val rep58: Rep58,
  val property58: PropertyType[Data58],
  val column58: MacroColumnInfo,
  val rep59: Rep59,
  val property59: PropertyType[Data59],
  val column59: MacroColumnInfo,
  val rep60: Rep60,
  val property60: PropertyType[Data60],
  val column60: MacroColumnInfo,
  val rep61: Rep61,
  val property61: PropertyType[Data61],
  val column61: MacroColumnInfo,
  val rep62: Rep62,
  val property62: PropertyType[Data62],
  val column62: MacroColumnInfo,
  val rep63: Rep63,
  val property63: PropertyType[Data63],
  val column63: MacroColumnInfo) {
}
class CaseClassDataHelper63[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62, Data63](
  val data1: Data1,
  val column1: MacroColumnInfo,
  val data2: Data2,
  val column2: MacroColumnInfo,
  val data3: Data3,
  val column3: MacroColumnInfo,
  val data4: Data4,
  val column4: MacroColumnInfo,
  val data5: Data5,
  val column5: MacroColumnInfo,
  val data6: Data6,
  val column6: MacroColumnInfo,
  val data7: Data7,
  val column7: MacroColumnInfo,
  val data8: Data8,
  val column8: MacroColumnInfo,
  val data9: Data9,
  val column9: MacroColumnInfo,
  val data10: Data10,
  val column10: MacroColumnInfo,
  val data11: Data11,
  val column11: MacroColumnInfo,
  val data12: Data12,
  val column12: MacroColumnInfo,
  val data13: Data13,
  val column13: MacroColumnInfo,
  val data14: Data14,
  val column14: MacroColumnInfo,
  val data15: Data15,
  val column15: MacroColumnInfo,
  val data16: Data16,
  val column16: MacroColumnInfo,
  val data17: Data17,
  val column17: MacroColumnInfo,
  val data18: Data18,
  val column18: MacroColumnInfo,
  val data19: Data19,
  val column19: MacroColumnInfo,
  val data20: Data20,
  val column20: MacroColumnInfo,
  val data21: Data21,
  val column21: MacroColumnInfo,
  val data22: Data22,
  val column22: MacroColumnInfo,
  val data23: Data23,
  val column23: MacroColumnInfo,
  val data24: Data24,
  val column24: MacroColumnInfo,
  val data25: Data25,
  val column25: MacroColumnInfo,
  val data26: Data26,
  val column26: MacroColumnInfo,
  val data27: Data27,
  val column27: MacroColumnInfo,
  val data28: Data28,
  val column28: MacroColumnInfo,
  val data29: Data29,
  val column29: MacroColumnInfo,
  val data30: Data30,
  val column30: MacroColumnInfo,
  val data31: Data31,
  val column31: MacroColumnInfo,
  val data32: Data32,
  val column32: MacroColumnInfo,
  val data33: Data33,
  val column33: MacroColumnInfo,
  val data34: Data34,
  val column34: MacroColumnInfo,
  val data35: Data35,
  val column35: MacroColumnInfo,
  val data36: Data36,
  val column36: MacroColumnInfo,
  val data37: Data37,
  val column37: MacroColumnInfo,
  val data38: Data38,
  val column38: MacroColumnInfo,
  val data39: Data39,
  val column39: MacroColumnInfo,
  val data40: Data40,
  val column40: MacroColumnInfo,
  val data41: Data41,
  val column41: MacroColumnInfo,
  val data42: Data42,
  val column42: MacroColumnInfo,
  val data43: Data43,
  val column43: MacroColumnInfo,
  val data44: Data44,
  val column44: MacroColumnInfo,
  val data45: Data45,
  val column45: MacroColumnInfo,
  val data46: Data46,
  val column46: MacroColumnInfo,
  val data47: Data47,
  val column47: MacroColumnInfo,
  val data48: Data48,
  val column48: MacroColumnInfo,
  val data49: Data49,
  val column49: MacroColumnInfo,
  val data50: Data50,
  val column50: MacroColumnInfo,
  val data51: Data51,
  val column51: MacroColumnInfo,
  val data52: Data52,
  val column52: MacroColumnInfo,
  val data53: Data53,
  val column53: MacroColumnInfo,
  val data54: Data54,
  val column54: MacroColumnInfo,
  val data55: Data55,
  val column55: MacroColumnInfo,
  val data56: Data56,
  val column56: MacroColumnInfo,
  val data57: Data57,
  val column57: MacroColumnInfo,
  val data58: Data58,
  val column58: MacroColumnInfo,
  val data59: Data59,
  val column59: MacroColumnInfo,
  val data60: Data60,
  val column60: MacroColumnInfo,
  val data61: Data61,
  val column61: MacroColumnInfo,
  val data62: Data62,
  val column62: MacroColumnInfo,
  val data63: Data63,
  val column63: MacroColumnInfo) extends CaseClassDataHelperAbs
object CaseClassDataHelper63
object CaseClassHelper63 {
  implicit def caseClassHelper63EncoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60, Rep61, Data61, Target61, Rep62, Data62, Target62, Rep63, Data63, Target63, RepCol, DataCol](
    implicit
    shape1: Lazy[EncoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[EncoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[EncoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[EncoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[EncoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[EncoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[EncoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[EncoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[EncoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[EncoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[EncoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[EncoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[EncoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[EncoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[EncoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[EncoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[EncoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[EncoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[EncoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[EncoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[EncoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[EncoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[EncoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[EncoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[EncoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[EncoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[EncoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[EncoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[EncoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[EncoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[EncoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[EncoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[EncoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[EncoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[EncoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[EncoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[EncoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[EncoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[EncoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[EncoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[EncoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[EncoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[EncoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[EncoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[EncoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[EncoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[EncoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[EncoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[EncoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[EncoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[EncoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[EncoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[EncoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[EncoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[EncoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[EncoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]],
    shape57: Lazy[EncoderShape.Aux[Rep57, Data57, Target57, RepCol, DataCol]],
    shape58: Lazy[EncoderShape.Aux[Rep58, Data58, Target58, RepCol, DataCol]],
    shape59: Lazy[EncoderShape.Aux[Rep59, Data59, Target59, RepCol, DataCol]],
    shape60: Lazy[EncoderShape.Aux[Rep60, Data60, Target60, RepCol, DataCol]],
    shape61: Lazy[EncoderShape.Aux[Rep61, Data61, Target61, RepCol, DataCol]],
    shape62: Lazy[EncoderShape.Aux[Rep62, Data62, Target62, RepCol, DataCol]],
    shape63: Lazy[EncoderShape.Aux[Rep63, Data63, Target63, RepCol, DataCol]]): EncoderShape.Aux[CaseClassHelper63[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61, Rep62, Data62, Rep63, Data63], CaseClassDataHelper63[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62, Data63], CaseClassHelper63[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62, Target63, Data63], RepCol, DataCol] = {
    new EncoderShape[CaseClassHelper63[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61, Rep62, Data62, Rep63, Data63], RepCol, DataCol] {
      override type Target = CaseClassHelper63[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62, Target63, Data63]
      override type Data = CaseClassDataHelper63[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62, Data63]
      override def wrapRep(base: CaseClassHelper63[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61, Rep62, Data62, Rep63, Data63]): CaseClassHelper63[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62, Target63, Data63] = {
        new CaseClassHelper63(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56,
          rep57 = shape57.value.wrapRep(base.rep57),
          property57 = base.property57,
          column57 = base.column57,
          rep58 = shape58.value.wrapRep(base.rep58),
          property58 = base.property58,
          column58 = base.column58,
          rep59 = shape59.value.wrapRep(base.rep59),
          property59 = base.property59,
          column59 = base.column59,
          rep60 = shape60.value.wrapRep(base.rep60),
          property60 = base.property60,
          column60 = base.column60,
          rep61 = shape61.value.wrapRep(base.rep61),
          property61 = base.property61,
          column61 = base.column61,
          rep62 = shape62.value.wrapRep(base.rep62),
          property62 = base.property62,
          column62 = base.column62,
          rep63 = shape63.value.wrapRep(base.rep63),
          property63 = base.property63,
          column63 = base.column63)
      }
      override def toLawRep(base: CaseClassHelper63[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62, Target63, Data63], oldRep: RepCol): RepCol = {
        val rep64 = oldRep
        val rep63 = shape63.value.toLawRep(base.rep63, rep64)
        val rep62 = shape62.value.toLawRep(base.rep62, rep63)
        val rep61 = shape61.value.toLawRep(base.rep61, rep62)
        val rep60 = shape60.value.toLawRep(base.rep60, rep61)
        val rep59 = shape59.value.toLawRep(base.rep59, rep60)
        val rep58 = shape58.value.toLawRep(base.rep58, rep59)
        val rep57 = shape57.value.toLawRep(base.rep57, rep58)
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def buildData(data: CaseClassDataHelper63[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62, Data63], rep: CaseClassHelper63[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62, Target63, Data63], oldData: DataCol): DataCol = {
        val data64 = oldData
        val data63 = shape63.value.buildData(data.data63, rep.rep63, data64)
        val data62 = shape62.value.buildData(data.data62, rep.rep62, data63)
        val data61 = shape61.value.buildData(data.data61, rep.rep61, data62)
        val data60 = shape60.value.buildData(data.data60, rep.rep60, data61)
        val data59 = shape59.value.buildData(data.data59, rep.rep59, data60)
        val data58 = shape58.value.buildData(data.data58, rep.rep58, data59)
        val data57 = shape57.value.buildData(data.data57, rep.rep57, data58)
        val data56 = shape56.value.buildData(data.data56, rep.rep56, data57)
        val data55 = shape55.value.buildData(data.data55, rep.rep55, data56)
        val data54 = shape54.value.buildData(data.data54, rep.rep54, data55)
        val data53 = shape53.value.buildData(data.data53, rep.rep53, data54)
        val data52 = shape52.value.buildData(data.data52, rep.rep52, data53)
        val data51 = shape51.value.buildData(data.data51, rep.rep51, data52)
        val data50 = shape50.value.buildData(data.data50, rep.rep50, data51)
        val data49 = shape49.value.buildData(data.data49, rep.rep49, data50)
        val data48 = shape48.value.buildData(data.data48, rep.rep48, data49)
        val data47 = shape47.value.buildData(data.data47, rep.rep47, data48)
        val data46 = shape46.value.buildData(data.data46, rep.rep46, data47)
        val data45 = shape45.value.buildData(data.data45, rep.rep45, data46)
        val data44 = shape44.value.buildData(data.data44, rep.rep44, data45)
        val data43 = shape43.value.buildData(data.data43, rep.rep43, data44)
        val data42 = shape42.value.buildData(data.data42, rep.rep42, data43)
        val data41 = shape41.value.buildData(data.data41, rep.rep41, data42)
        val data40 = shape40.value.buildData(data.data40, rep.rep40, data41)
        val data39 = shape39.value.buildData(data.data39, rep.rep39, data40)
        val data38 = shape38.value.buildData(data.data38, rep.rep38, data39)
        val data37 = shape37.value.buildData(data.data37, rep.rep37, data38)
        val data36 = shape36.value.buildData(data.data36, rep.rep36, data37)
        val data35 = shape35.value.buildData(data.data35, rep.rep35, data36)
        val data34 = shape34.value.buildData(data.data34, rep.rep34, data35)
        val data33 = shape33.value.buildData(data.data33, rep.rep33, data34)
        val data32 = shape32.value.buildData(data.data32, rep.rep32, data33)
        val data31 = shape31.value.buildData(data.data31, rep.rep31, data32)
        val data30 = shape30.value.buildData(data.data30, rep.rep30, data31)
        val data29 = shape29.value.buildData(data.data29, rep.rep29, data30)
        val data28 = shape28.value.buildData(data.data28, rep.rep28, data29)
        val data27 = shape27.value.buildData(data.data27, rep.rep27, data28)
        val data26 = shape26.value.buildData(data.data26, rep.rep26, data27)
        val data25 = shape25.value.buildData(data.data25, rep.rep25, data26)
        val data24 = shape24.value.buildData(data.data24, rep.rep24, data25)
        val data23 = shape23.value.buildData(data.data23, rep.rep23, data24)
        val data22 = shape22.value.buildData(data.data22, rep.rep22, data23)
        val data21 = shape21.value.buildData(data.data21, rep.rep21, data22)
        val data20 = shape20.value.buildData(data.data20, rep.rep20, data21)
        val data19 = shape19.value.buildData(data.data19, rep.rep19, data20)
        val data18 = shape18.value.buildData(data.data18, rep.rep18, data19)
        val data17 = shape17.value.buildData(data.data17, rep.rep17, data18)
        val data16 = shape16.value.buildData(data.data16, rep.rep16, data17)
        val data15 = shape15.value.buildData(data.data15, rep.rep15, data16)
        val data14 = shape14.value.buildData(data.data14, rep.rep14, data15)
        val data13 = shape13.value.buildData(data.data13, rep.rep13, data14)
        val data12 = shape12.value.buildData(data.data12, rep.rep12, data13)
        val data11 = shape11.value.buildData(data.data11, rep.rep11, data12)
        val data10 = shape10.value.buildData(data.data10, rep.rep10, data11)
        val data9 = shape9.value.buildData(data.data9, rep.rep9, data10)
        val data8 = shape8.value.buildData(data.data8, rep.rep8, data9)
        val data7 = shape7.value.buildData(data.data7, rep.rep7, data8)
        val data6 = shape6.value.buildData(data.data6, rep.rep6, data7)
        val data5 = shape5.value.buildData(data.data5, rep.rep5, data6)
        val data4 = shape4.value.buildData(data.data4, rep.rep4, data5)
        val data3 = shape3.value.buildData(data.data3, rep.rep3, data4)
        val data2 = shape2.value.buildData(data.data2, rep.rep2, data3)
        val data1 = shape1.value.buildData(data.data1, rep.rep1, data2)
        data1
      }
    }
  }
  implicit def caseClassHelper63DecoderGen[Rep1, Data1, Target1, Rep2, Data2, Target2, Rep3, Data3, Target3, Rep4, Data4, Target4, Rep5, Data5, Target5, Rep6, Data6, Target6, Rep7, Data7, Target7, Rep8, Data8, Target8, Rep9, Data9, Target9, Rep10, Data10, Target10, Rep11, Data11, Target11, Rep12, Data12, Target12, Rep13, Data13, Target13, Rep14, Data14, Target14, Rep15, Data15, Target15, Rep16, Data16, Target16, Rep17, Data17, Target17, Rep18, Data18, Target18, Rep19, Data19, Target19, Rep20, Data20, Target20, Rep21, Data21, Target21, Rep22, Data22, Target22, Rep23, Data23, Target23, Rep24, Data24, Target24, Rep25, Data25, Target25, Rep26, Data26, Target26, Rep27, Data27, Target27, Rep28, Data28, Target28, Rep29, Data29, Target29, Rep30, Data30, Target30, Rep31, Data31, Target31, Rep32, Data32, Target32, Rep33, Data33, Target33, Rep34, Data34, Target34, Rep35, Data35, Target35, Rep36, Data36, Target36, Rep37, Data37, Target37, Rep38, Data38, Target38, Rep39, Data39, Target39, Rep40, Data40, Target40, Rep41, Data41, Target41, Rep42, Data42, Target42, Rep43, Data43, Target43, Rep44, Data44, Target44, Rep45, Data45, Target45, Rep46, Data46, Target46, Rep47, Data47, Target47, Rep48, Data48, Target48, Rep49, Data49, Target49, Rep50, Data50, Target50, Rep51, Data51, Target51, Rep52, Data52, Target52, Rep53, Data53, Target53, Rep54, Data54, Target54, Rep55, Data55, Target55, Rep56, Data56, Target56, Rep57, Data57, Target57, Rep58, Data58, Target58, Rep59, Data59, Target59, Rep60, Data60, Target60, Rep61, Data61, Target61, Rep62, Data62, Target62, Rep63, Data63, Target63, RepCol, DataCol](
    implicit
    shape1: Lazy[DecoderShape.Aux[Rep1, Data1, Target1, RepCol, DataCol]],
    shape2: Lazy[DecoderShape.Aux[Rep2, Data2, Target2, RepCol, DataCol]],
    shape3: Lazy[DecoderShape.Aux[Rep3, Data3, Target3, RepCol, DataCol]],
    shape4: Lazy[DecoderShape.Aux[Rep4, Data4, Target4, RepCol, DataCol]],
    shape5: Lazy[DecoderShape.Aux[Rep5, Data5, Target5, RepCol, DataCol]],
    shape6: Lazy[DecoderShape.Aux[Rep6, Data6, Target6, RepCol, DataCol]],
    shape7: Lazy[DecoderShape.Aux[Rep7, Data7, Target7, RepCol, DataCol]],
    shape8: Lazy[DecoderShape.Aux[Rep8, Data8, Target8, RepCol, DataCol]],
    shape9: Lazy[DecoderShape.Aux[Rep9, Data9, Target9, RepCol, DataCol]],
    shape10: Lazy[DecoderShape.Aux[Rep10, Data10, Target10, RepCol, DataCol]],
    shape11: Lazy[DecoderShape.Aux[Rep11, Data11, Target11, RepCol, DataCol]],
    shape12: Lazy[DecoderShape.Aux[Rep12, Data12, Target12, RepCol, DataCol]],
    shape13: Lazy[DecoderShape.Aux[Rep13, Data13, Target13, RepCol, DataCol]],
    shape14: Lazy[DecoderShape.Aux[Rep14, Data14, Target14, RepCol, DataCol]],
    shape15: Lazy[DecoderShape.Aux[Rep15, Data15, Target15, RepCol, DataCol]],
    shape16: Lazy[DecoderShape.Aux[Rep16, Data16, Target16, RepCol, DataCol]],
    shape17: Lazy[DecoderShape.Aux[Rep17, Data17, Target17, RepCol, DataCol]],
    shape18: Lazy[DecoderShape.Aux[Rep18, Data18, Target18, RepCol, DataCol]],
    shape19: Lazy[DecoderShape.Aux[Rep19, Data19, Target19, RepCol, DataCol]],
    shape20: Lazy[DecoderShape.Aux[Rep20, Data20, Target20, RepCol, DataCol]],
    shape21: Lazy[DecoderShape.Aux[Rep21, Data21, Target21, RepCol, DataCol]],
    shape22: Lazy[DecoderShape.Aux[Rep22, Data22, Target22, RepCol, DataCol]],
    shape23: Lazy[DecoderShape.Aux[Rep23, Data23, Target23, RepCol, DataCol]],
    shape24: Lazy[DecoderShape.Aux[Rep24, Data24, Target24, RepCol, DataCol]],
    shape25: Lazy[DecoderShape.Aux[Rep25, Data25, Target25, RepCol, DataCol]],
    shape26: Lazy[DecoderShape.Aux[Rep26, Data26, Target26, RepCol, DataCol]],
    shape27: Lazy[DecoderShape.Aux[Rep27, Data27, Target27, RepCol, DataCol]],
    shape28: Lazy[DecoderShape.Aux[Rep28, Data28, Target28, RepCol, DataCol]],
    shape29: Lazy[DecoderShape.Aux[Rep29, Data29, Target29, RepCol, DataCol]],
    shape30: Lazy[DecoderShape.Aux[Rep30, Data30, Target30, RepCol, DataCol]],
    shape31: Lazy[DecoderShape.Aux[Rep31, Data31, Target31, RepCol, DataCol]],
    shape32: Lazy[DecoderShape.Aux[Rep32, Data32, Target32, RepCol, DataCol]],
    shape33: Lazy[DecoderShape.Aux[Rep33, Data33, Target33, RepCol, DataCol]],
    shape34: Lazy[DecoderShape.Aux[Rep34, Data34, Target34, RepCol, DataCol]],
    shape35: Lazy[DecoderShape.Aux[Rep35, Data35, Target35, RepCol, DataCol]],
    shape36: Lazy[DecoderShape.Aux[Rep36, Data36, Target36, RepCol, DataCol]],
    shape37: Lazy[DecoderShape.Aux[Rep37, Data37, Target37, RepCol, DataCol]],
    shape38: Lazy[DecoderShape.Aux[Rep38, Data38, Target38, RepCol, DataCol]],
    shape39: Lazy[DecoderShape.Aux[Rep39, Data39, Target39, RepCol, DataCol]],
    shape40: Lazy[DecoderShape.Aux[Rep40, Data40, Target40, RepCol, DataCol]],
    shape41: Lazy[DecoderShape.Aux[Rep41, Data41, Target41, RepCol, DataCol]],
    shape42: Lazy[DecoderShape.Aux[Rep42, Data42, Target42, RepCol, DataCol]],
    shape43: Lazy[DecoderShape.Aux[Rep43, Data43, Target43, RepCol, DataCol]],
    shape44: Lazy[DecoderShape.Aux[Rep44, Data44, Target44, RepCol, DataCol]],
    shape45: Lazy[DecoderShape.Aux[Rep45, Data45, Target45, RepCol, DataCol]],
    shape46: Lazy[DecoderShape.Aux[Rep46, Data46, Target46, RepCol, DataCol]],
    shape47: Lazy[DecoderShape.Aux[Rep47, Data47, Target47, RepCol, DataCol]],
    shape48: Lazy[DecoderShape.Aux[Rep48, Data48, Target48, RepCol, DataCol]],
    shape49: Lazy[DecoderShape.Aux[Rep49, Data49, Target49, RepCol, DataCol]],
    shape50: Lazy[DecoderShape.Aux[Rep50, Data50, Target50, RepCol, DataCol]],
    shape51: Lazy[DecoderShape.Aux[Rep51, Data51, Target51, RepCol, DataCol]],
    shape52: Lazy[DecoderShape.Aux[Rep52, Data52, Target52, RepCol, DataCol]],
    shape53: Lazy[DecoderShape.Aux[Rep53, Data53, Target53, RepCol, DataCol]],
    shape54: Lazy[DecoderShape.Aux[Rep54, Data54, Target54, RepCol, DataCol]],
    shape55: Lazy[DecoderShape.Aux[Rep55, Data55, Target55, RepCol, DataCol]],
    shape56: Lazy[DecoderShape.Aux[Rep56, Data56, Target56, RepCol, DataCol]],
    shape57: Lazy[DecoderShape.Aux[Rep57, Data57, Target57, RepCol, DataCol]],
    shape58: Lazy[DecoderShape.Aux[Rep58, Data58, Target58, RepCol, DataCol]],
    shape59: Lazy[DecoderShape.Aux[Rep59, Data59, Target59, RepCol, DataCol]],
    shape60: Lazy[DecoderShape.Aux[Rep60, Data60, Target60, RepCol, DataCol]],
    shape61: Lazy[DecoderShape.Aux[Rep61, Data61, Target61, RepCol, DataCol]],
    shape62: Lazy[DecoderShape.Aux[Rep62, Data62, Target62, RepCol, DataCol]],
    shape63: Lazy[DecoderShape.Aux[Rep63, Data63, Target63, RepCol, DataCol]]): DecoderShape.Aux[CaseClassHelper63[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61, Rep62, Data62, Rep63, Data63], CaseClassDataHelper63[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62, Data63], CaseClassHelper63[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62, Target63, Data63], RepCol, DataCol] = {
    new DecoderShape[CaseClassHelper63[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61, Rep62, Data62, Rep63, Data63], RepCol, DataCol] {
      override type Target = CaseClassHelper63[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62, Target63, Data63]
      override type Data = CaseClassDataHelper63[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62, Data63]
      override def wrapRep(base: CaseClassHelper63[Rep1, Data1, Rep2, Data2, Rep3, Data3, Rep4, Data4, Rep5, Data5, Rep6, Data6, Rep7, Data7, Rep8, Data8, Rep9, Data9, Rep10, Data10, Rep11, Data11, Rep12, Data12, Rep13, Data13, Rep14, Data14, Rep15, Data15, Rep16, Data16, Rep17, Data17, Rep18, Data18, Rep19, Data19, Rep20, Data20, Rep21, Data21, Rep22, Data22, Rep23, Data23, Rep24, Data24, Rep25, Data25, Rep26, Data26, Rep27, Data27, Rep28, Data28, Rep29, Data29, Rep30, Data30, Rep31, Data31, Rep32, Data32, Rep33, Data33, Rep34, Data34, Rep35, Data35, Rep36, Data36, Rep37, Data37, Rep38, Data38, Rep39, Data39, Rep40, Data40, Rep41, Data41, Rep42, Data42, Rep43, Data43, Rep44, Data44, Rep45, Data45, Rep46, Data46, Rep47, Data47, Rep48, Data48, Rep49, Data49, Rep50, Data50, Rep51, Data51, Rep52, Data52, Rep53, Data53, Rep54, Data54, Rep55, Data55, Rep56, Data56, Rep57, Data57, Rep58, Data58, Rep59, Data59, Rep60, Data60, Rep61, Data61, Rep62, Data62, Rep63, Data63]): CaseClassHelper63[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62, Target63, Data63] = {
        new CaseClassHelper63(
          rep1 = shape1.value.wrapRep(base.rep1),
          property1 = base.property1,
          column1 = base.column1,
          rep2 = shape2.value.wrapRep(base.rep2),
          property2 = base.property2,
          column2 = base.column2,
          rep3 = shape3.value.wrapRep(base.rep3),
          property3 = base.property3,
          column3 = base.column3,
          rep4 = shape4.value.wrapRep(base.rep4),
          property4 = base.property4,
          column4 = base.column4,
          rep5 = shape5.value.wrapRep(base.rep5),
          property5 = base.property5,
          column5 = base.column5,
          rep6 = shape6.value.wrapRep(base.rep6),
          property6 = base.property6,
          column6 = base.column6,
          rep7 = shape7.value.wrapRep(base.rep7),
          property7 = base.property7,
          column7 = base.column7,
          rep8 = shape8.value.wrapRep(base.rep8),
          property8 = base.property8,
          column8 = base.column8,
          rep9 = shape9.value.wrapRep(base.rep9),
          property9 = base.property9,
          column9 = base.column9,
          rep10 = shape10.value.wrapRep(base.rep10),
          property10 = base.property10,
          column10 = base.column10,
          rep11 = shape11.value.wrapRep(base.rep11),
          property11 = base.property11,
          column11 = base.column11,
          rep12 = shape12.value.wrapRep(base.rep12),
          property12 = base.property12,
          column12 = base.column12,
          rep13 = shape13.value.wrapRep(base.rep13),
          property13 = base.property13,
          column13 = base.column13,
          rep14 = shape14.value.wrapRep(base.rep14),
          property14 = base.property14,
          column14 = base.column14,
          rep15 = shape15.value.wrapRep(base.rep15),
          property15 = base.property15,
          column15 = base.column15,
          rep16 = shape16.value.wrapRep(base.rep16),
          property16 = base.property16,
          column16 = base.column16,
          rep17 = shape17.value.wrapRep(base.rep17),
          property17 = base.property17,
          column17 = base.column17,
          rep18 = shape18.value.wrapRep(base.rep18),
          property18 = base.property18,
          column18 = base.column18,
          rep19 = shape19.value.wrapRep(base.rep19),
          property19 = base.property19,
          column19 = base.column19,
          rep20 = shape20.value.wrapRep(base.rep20),
          property20 = base.property20,
          column20 = base.column20,
          rep21 = shape21.value.wrapRep(base.rep21),
          property21 = base.property21,
          column21 = base.column21,
          rep22 = shape22.value.wrapRep(base.rep22),
          property22 = base.property22,
          column22 = base.column22,
          rep23 = shape23.value.wrapRep(base.rep23),
          property23 = base.property23,
          column23 = base.column23,
          rep24 = shape24.value.wrapRep(base.rep24),
          property24 = base.property24,
          column24 = base.column24,
          rep25 = shape25.value.wrapRep(base.rep25),
          property25 = base.property25,
          column25 = base.column25,
          rep26 = shape26.value.wrapRep(base.rep26),
          property26 = base.property26,
          column26 = base.column26,
          rep27 = shape27.value.wrapRep(base.rep27),
          property27 = base.property27,
          column27 = base.column27,
          rep28 = shape28.value.wrapRep(base.rep28),
          property28 = base.property28,
          column28 = base.column28,
          rep29 = shape29.value.wrapRep(base.rep29),
          property29 = base.property29,
          column29 = base.column29,
          rep30 = shape30.value.wrapRep(base.rep30),
          property30 = base.property30,
          column30 = base.column30,
          rep31 = shape31.value.wrapRep(base.rep31),
          property31 = base.property31,
          column31 = base.column31,
          rep32 = shape32.value.wrapRep(base.rep32),
          property32 = base.property32,
          column32 = base.column32,
          rep33 = shape33.value.wrapRep(base.rep33),
          property33 = base.property33,
          column33 = base.column33,
          rep34 = shape34.value.wrapRep(base.rep34),
          property34 = base.property34,
          column34 = base.column34,
          rep35 = shape35.value.wrapRep(base.rep35),
          property35 = base.property35,
          column35 = base.column35,
          rep36 = shape36.value.wrapRep(base.rep36),
          property36 = base.property36,
          column36 = base.column36,
          rep37 = shape37.value.wrapRep(base.rep37),
          property37 = base.property37,
          column37 = base.column37,
          rep38 = shape38.value.wrapRep(base.rep38),
          property38 = base.property38,
          column38 = base.column38,
          rep39 = shape39.value.wrapRep(base.rep39),
          property39 = base.property39,
          column39 = base.column39,
          rep40 = shape40.value.wrapRep(base.rep40),
          property40 = base.property40,
          column40 = base.column40,
          rep41 = shape41.value.wrapRep(base.rep41),
          property41 = base.property41,
          column41 = base.column41,
          rep42 = shape42.value.wrapRep(base.rep42),
          property42 = base.property42,
          column42 = base.column42,
          rep43 = shape43.value.wrapRep(base.rep43),
          property43 = base.property43,
          column43 = base.column43,
          rep44 = shape44.value.wrapRep(base.rep44),
          property44 = base.property44,
          column44 = base.column44,
          rep45 = shape45.value.wrapRep(base.rep45),
          property45 = base.property45,
          column45 = base.column45,
          rep46 = shape46.value.wrapRep(base.rep46),
          property46 = base.property46,
          column46 = base.column46,
          rep47 = shape47.value.wrapRep(base.rep47),
          property47 = base.property47,
          column47 = base.column47,
          rep48 = shape48.value.wrapRep(base.rep48),
          property48 = base.property48,
          column48 = base.column48,
          rep49 = shape49.value.wrapRep(base.rep49),
          property49 = base.property49,
          column49 = base.column49,
          rep50 = shape50.value.wrapRep(base.rep50),
          property50 = base.property50,
          column50 = base.column50,
          rep51 = shape51.value.wrapRep(base.rep51),
          property51 = base.property51,
          column51 = base.column51,
          rep52 = shape52.value.wrapRep(base.rep52),
          property52 = base.property52,
          column52 = base.column52,
          rep53 = shape53.value.wrapRep(base.rep53),
          property53 = base.property53,
          column53 = base.column53,
          rep54 = shape54.value.wrapRep(base.rep54),
          property54 = base.property54,
          column54 = base.column54,
          rep55 = shape55.value.wrapRep(base.rep55),
          property55 = base.property55,
          column55 = base.column55,
          rep56 = shape56.value.wrapRep(base.rep56),
          property56 = base.property56,
          column56 = base.column56,
          rep57 = shape57.value.wrapRep(base.rep57),
          property57 = base.property57,
          column57 = base.column57,
          rep58 = shape58.value.wrapRep(base.rep58),
          property58 = base.property58,
          column58 = base.column58,
          rep59 = shape59.value.wrapRep(base.rep59),
          property59 = base.property59,
          column59 = base.column59,
          rep60 = shape60.value.wrapRep(base.rep60),
          property60 = base.property60,
          column60 = base.column60,
          rep61 = shape61.value.wrapRep(base.rep61),
          property61 = base.property61,
          column61 = base.column61,
          rep62 = shape62.value.wrapRep(base.rep62),
          property62 = base.property62,
          column62 = base.column62,
          rep63 = shape63.value.wrapRep(base.rep63),
          property63 = base.property63,
          column63 = base.column63)
      }
      override def toLawRep(base: CaseClassHelper63[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62, Target63, Data63], oldRep: RepCol): RepCol = {
        val rep64 = oldRep
        val rep63 = shape63.value.toLawRep(base.rep63, rep64)
        val rep62 = shape62.value.toLawRep(base.rep62, rep63)
        val rep61 = shape61.value.toLawRep(base.rep61, rep62)
        val rep60 = shape60.value.toLawRep(base.rep60, rep61)
        val rep59 = shape59.value.toLawRep(base.rep59, rep60)
        val rep58 = shape58.value.toLawRep(base.rep58, rep59)
        val rep57 = shape57.value.toLawRep(base.rep57, rep58)
        val rep56 = shape56.value.toLawRep(base.rep56, rep57)
        val rep55 = shape55.value.toLawRep(base.rep55, rep56)
        val rep54 = shape54.value.toLawRep(base.rep54, rep55)
        val rep53 = shape53.value.toLawRep(base.rep53, rep54)
        val rep52 = shape52.value.toLawRep(base.rep52, rep53)
        val rep51 = shape51.value.toLawRep(base.rep51, rep52)
        val rep50 = shape50.value.toLawRep(base.rep50, rep51)
        val rep49 = shape49.value.toLawRep(base.rep49, rep50)
        val rep48 = shape48.value.toLawRep(base.rep48, rep49)
        val rep47 = shape47.value.toLawRep(base.rep47, rep48)
        val rep46 = shape46.value.toLawRep(base.rep46, rep47)
        val rep45 = shape45.value.toLawRep(base.rep45, rep46)
        val rep44 = shape44.value.toLawRep(base.rep44, rep45)
        val rep43 = shape43.value.toLawRep(base.rep43, rep44)
        val rep42 = shape42.value.toLawRep(base.rep42, rep43)
        val rep41 = shape41.value.toLawRep(base.rep41, rep42)
        val rep40 = shape40.value.toLawRep(base.rep40, rep41)
        val rep39 = shape39.value.toLawRep(base.rep39, rep40)
        val rep38 = shape38.value.toLawRep(base.rep38, rep39)
        val rep37 = shape37.value.toLawRep(base.rep37, rep38)
        val rep36 = shape36.value.toLawRep(base.rep36, rep37)
        val rep35 = shape35.value.toLawRep(base.rep35, rep36)
        val rep34 = shape34.value.toLawRep(base.rep34, rep35)
        val rep33 = shape33.value.toLawRep(base.rep33, rep34)
        val rep32 = shape32.value.toLawRep(base.rep32, rep33)
        val rep31 = shape31.value.toLawRep(base.rep31, rep32)
        val rep30 = shape30.value.toLawRep(base.rep30, rep31)
        val rep29 = shape29.value.toLawRep(base.rep29, rep30)
        val rep28 = shape28.value.toLawRep(base.rep28, rep29)
        val rep27 = shape27.value.toLawRep(base.rep27, rep28)
        val rep26 = shape26.value.toLawRep(base.rep26, rep27)
        val rep25 = shape25.value.toLawRep(base.rep25, rep26)
        val rep24 = shape24.value.toLawRep(base.rep24, rep25)
        val rep23 = shape23.value.toLawRep(base.rep23, rep24)
        val rep22 = shape22.value.toLawRep(base.rep22, rep23)
        val rep21 = shape21.value.toLawRep(base.rep21, rep22)
        val rep20 = shape20.value.toLawRep(base.rep20, rep21)
        val rep19 = shape19.value.toLawRep(base.rep19, rep20)
        val rep18 = shape18.value.toLawRep(base.rep18, rep19)
        val rep17 = shape17.value.toLawRep(base.rep17, rep18)
        val rep16 = shape16.value.toLawRep(base.rep16, rep17)
        val rep15 = shape15.value.toLawRep(base.rep15, rep16)
        val rep14 = shape14.value.toLawRep(base.rep14, rep15)
        val rep13 = shape13.value.toLawRep(base.rep13, rep14)
        val rep12 = shape12.value.toLawRep(base.rep12, rep13)
        val rep11 = shape11.value.toLawRep(base.rep11, rep12)
        val rep10 = shape10.value.toLawRep(base.rep10, rep11)
        val rep9 = shape9.value.toLawRep(base.rep9, rep10)
        val rep8 = shape8.value.toLawRep(base.rep8, rep9)
        val rep7 = shape7.value.toLawRep(base.rep7, rep8)
        val rep6 = shape6.value.toLawRep(base.rep6, rep7)
        val rep5 = shape5.value.toLawRep(base.rep5, rep6)
        val rep4 = shape4.value.toLawRep(base.rep4, rep5)
        val rep3 = shape3.value.toLawRep(base.rep3, rep4)
        val rep2 = shape2.value.toLawRep(base.rep2, rep3)
        val rep1 = shape1.value.toLawRep(base.rep1, rep2)
        rep1
      }
      override def takeData(rep: CaseClassHelper63[Target1, Data1, Target2, Data2, Target3, Data3, Target4, Data4, Target5, Data5, Target6, Data6, Target7, Data7, Target8, Data8, Target9, Data9, Target10, Data10, Target11, Data11, Target12, Data12, Target13, Data13, Target14, Data14, Target15, Data15, Target16, Data16, Target17, Data17, Target18, Data18, Target19, Data19, Target20, Data20, Target21, Data21, Target22, Data22, Target23, Data23, Target24, Data24, Target25, Data25, Target26, Data26, Target27, Data27, Target28, Data28, Target29, Data29, Target30, Data30, Target31, Data31, Target32, Data32, Target33, Data33, Target34, Data34, Target35, Data35, Target36, Data36, Target37, Data37, Target38, Data38, Target39, Data39, Target40, Data40, Target41, Data41, Target42, Data42, Target43, Data43, Target44, Data44, Target45, Data45, Target46, Data46, Target47, Data47, Target48, Data48, Target49, Data49, Target50, Data50, Target51, Data51, Target52, Data52, Target53, Data53, Target54, Data54, Target55, Data55, Target56, Data56, Target57, Data57, Target58, Data58, Target59, Data59, Target60, Data60, Target61, Data61, Target62, Data62, Target63, Data63], oldDataCol: DataCol): SplitData[CaseClassDataHelper63[Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9, Data10, Data11, Data12, Data13, Data14, Data15, Data16, Data17, Data18, Data19, Data20, Data21, Data22, Data23, Data24, Data25, Data26, Data27, Data28, Data29, Data30, Data31, Data32, Data33, Data34, Data35, Data36, Data37, Data38, Data39, Data40, Data41, Data42, Data43, Data44, Data45, Data46, Data47, Data48, Data49, Data50, Data51, Data52, Data53, Data54, Data55, Data56, Data57, Data58, Data59, Data60, Data61, Data62, Data63], DataCol] = {
        val dataCol0 = oldDataCol
        val SplitData(item1, dataCol1) = shape1.value.takeData(rep.rep1, dataCol0)
        val SplitData(item2, dataCol2) = shape2.value.takeData(rep.rep2, dataCol1)
        val SplitData(item3, dataCol3) = shape3.value.takeData(rep.rep3, dataCol2)
        val SplitData(item4, dataCol4) = shape4.value.takeData(rep.rep4, dataCol3)
        val SplitData(item5, dataCol5) = shape5.value.takeData(rep.rep5, dataCol4)
        val SplitData(item6, dataCol6) = shape6.value.takeData(rep.rep6, dataCol5)
        val SplitData(item7, dataCol7) = shape7.value.takeData(rep.rep7, dataCol6)
        val SplitData(item8, dataCol8) = shape8.value.takeData(rep.rep8, dataCol7)
        val SplitData(item9, dataCol9) = shape9.value.takeData(rep.rep9, dataCol8)
        val SplitData(item10, dataCol10) = shape10.value.takeData(rep.rep10, dataCol9)
        val SplitData(item11, dataCol11) = shape11.value.takeData(rep.rep11, dataCol10)
        val SplitData(item12, dataCol12) = shape12.value.takeData(rep.rep12, dataCol11)
        val SplitData(item13, dataCol13) = shape13.value.takeData(rep.rep13, dataCol12)
        val SplitData(item14, dataCol14) = shape14.value.takeData(rep.rep14, dataCol13)
        val SplitData(item15, dataCol15) = shape15.value.takeData(rep.rep15, dataCol14)
        val SplitData(item16, dataCol16) = shape16.value.takeData(rep.rep16, dataCol15)
        val SplitData(item17, dataCol17) = shape17.value.takeData(rep.rep17, dataCol16)
        val SplitData(item18, dataCol18) = shape18.value.takeData(rep.rep18, dataCol17)
        val SplitData(item19, dataCol19) = shape19.value.takeData(rep.rep19, dataCol18)
        val SplitData(item20, dataCol20) = shape20.value.takeData(rep.rep20, dataCol19)
        val SplitData(item21, dataCol21) = shape21.value.takeData(rep.rep21, dataCol20)
        val SplitData(item22, dataCol22) = shape22.value.takeData(rep.rep22, dataCol21)
        val SplitData(item23, dataCol23) = shape23.value.takeData(rep.rep23, dataCol22)
        val SplitData(item24, dataCol24) = shape24.value.takeData(rep.rep24, dataCol23)
        val SplitData(item25, dataCol25) = shape25.value.takeData(rep.rep25, dataCol24)
        val SplitData(item26, dataCol26) = shape26.value.takeData(rep.rep26, dataCol25)
        val SplitData(item27, dataCol27) = shape27.value.takeData(rep.rep27, dataCol26)
        val SplitData(item28, dataCol28) = shape28.value.takeData(rep.rep28, dataCol27)
        val SplitData(item29, dataCol29) = shape29.value.takeData(rep.rep29, dataCol28)
        val SplitData(item30, dataCol30) = shape30.value.takeData(rep.rep30, dataCol29)
        val SplitData(item31, dataCol31) = shape31.value.takeData(rep.rep31, dataCol30)
        val SplitData(item32, dataCol32) = shape32.value.takeData(rep.rep32, dataCol31)
        val SplitData(item33, dataCol33) = shape33.value.takeData(rep.rep33, dataCol32)
        val SplitData(item34, dataCol34) = shape34.value.takeData(rep.rep34, dataCol33)
        val SplitData(item35, dataCol35) = shape35.value.takeData(rep.rep35, dataCol34)
        val SplitData(item36, dataCol36) = shape36.value.takeData(rep.rep36, dataCol35)
        val SplitData(item37, dataCol37) = shape37.value.takeData(rep.rep37, dataCol36)
        val SplitData(item38, dataCol38) = shape38.value.takeData(rep.rep38, dataCol37)
        val SplitData(item39, dataCol39) = shape39.value.takeData(rep.rep39, dataCol38)
        val SplitData(item40, dataCol40) = shape40.value.takeData(rep.rep40, dataCol39)
        val SplitData(item41, dataCol41) = shape41.value.takeData(rep.rep41, dataCol40)
        val SplitData(item42, dataCol42) = shape42.value.takeData(rep.rep42, dataCol41)
        val SplitData(item43, dataCol43) = shape43.value.takeData(rep.rep43, dataCol42)
        val SplitData(item44, dataCol44) = shape44.value.takeData(rep.rep44, dataCol43)
        val SplitData(item45, dataCol45) = shape45.value.takeData(rep.rep45, dataCol44)
        val SplitData(item46, dataCol46) = shape46.value.takeData(rep.rep46, dataCol45)
        val SplitData(item47, dataCol47) = shape47.value.takeData(rep.rep47, dataCol46)
        val SplitData(item48, dataCol48) = shape48.value.takeData(rep.rep48, dataCol47)
        val SplitData(item49, dataCol49) = shape49.value.takeData(rep.rep49, dataCol48)
        val SplitData(item50, dataCol50) = shape50.value.takeData(rep.rep50, dataCol49)
        val SplitData(item51, dataCol51) = shape51.value.takeData(rep.rep51, dataCol50)
        val SplitData(item52, dataCol52) = shape52.value.takeData(rep.rep52, dataCol51)
        val SplitData(item53, dataCol53) = shape53.value.takeData(rep.rep53, dataCol52)
        val SplitData(item54, dataCol54) = shape54.value.takeData(rep.rep54, dataCol53)
        val SplitData(item55, dataCol55) = shape55.value.takeData(rep.rep55, dataCol54)
        val SplitData(item56, dataCol56) = shape56.value.takeData(rep.rep56, dataCol55)
        val SplitData(item57, dataCol57) = shape57.value.takeData(rep.rep57, dataCol56)
        val SplitData(item58, dataCol58) = shape58.value.takeData(rep.rep58, dataCol57)
        val SplitData(item59, dataCol59) = shape59.value.takeData(rep.rep59, dataCol58)
        val SplitData(item60, dataCol60) = shape60.value.takeData(rep.rep60, dataCol59)
        val SplitData(item61, dataCol61) = shape61.value.takeData(rep.rep61, dataCol60)
        val SplitData(item62, dataCol62) = shape62.value.takeData(rep.rep62, dataCol61)
        val SplitData(item63, dataCol63) = shape63.value.takeData(rep.rep63, dataCol62)
        SplitData(
          current = new CaseClassDataHelper63(
            data1 = item1,
            column1 = rep.column1,
            data2 = item2,
            column2 = rep.column2,
            data3 = item3,
            column3 = rep.column3,
            data4 = item4,
            column4 = rep.column4,
            data5 = item5,
            column5 = rep.column5,
            data6 = item6,
            column6 = rep.column6,
            data7 = item7,
            column7 = rep.column7,
            data8 = item8,
            column8 = rep.column8,
            data9 = item9,
            column9 = rep.column9,
            data10 = item10,
            column10 = rep.column10,
            data11 = item11,
            column11 = rep.column11,
            data12 = item12,
            column12 = rep.column12,
            data13 = item13,
            column13 = rep.column13,
            data14 = item14,
            column14 = rep.column14,
            data15 = item15,
            column15 = rep.column15,
            data16 = item16,
            column16 = rep.column16,
            data17 = item17,
            column17 = rep.column17,
            data18 = item18,
            column18 = rep.column18,
            data19 = item19,
            column19 = rep.column19,
            data20 = item20,
            column20 = rep.column20,
            data21 = item21,
            column21 = rep.column21,
            data22 = item22,
            column22 = rep.column22,
            data23 = item23,
            column23 = rep.column23,
            data24 = item24,
            column24 = rep.column24,
            data25 = item25,
            column25 = rep.column25,
            data26 = item26,
            column26 = rep.column26,
            data27 = item27,
            column27 = rep.column27,
            data28 = item28,
            column28 = rep.column28,
            data29 = item29,
            column29 = rep.column29,
            data30 = item30,
            column30 = rep.column30,
            data31 = item31,
            column31 = rep.column31,
            data32 = item32,
            column32 = rep.column32,
            data33 = item33,
            column33 = rep.column33,
            data34 = item34,
            column34 = rep.column34,
            data35 = item35,
            column35 = rep.column35,
            data36 = item36,
            column36 = rep.column36,
            data37 = item37,
            column37 = rep.column37,
            data38 = item38,
            column38 = rep.column38,
            data39 = item39,
            column39 = rep.column39,
            data40 = item40,
            column40 = rep.column40,
            data41 = item41,
            column41 = rep.column41,
            data42 = item42,
            column42 = rep.column42,
            data43 = item43,
            column43 = rep.column43,
            data44 = item44,
            column44 = rep.column44,
            data45 = item45,
            column45 = rep.column45,
            data46 = item46,
            column46 = rep.column46,
            data47 = item47,
            column47 = rep.column47,
            data48 = item48,
            column48 = rep.column48,
            data49 = item49,
            column49 = rep.column49,
            data50 = item50,
            column50 = rep.column50,
            data51 = item51,
            column51 = rep.column51,
            data52 = item52,
            column52 = rep.column52,
            data53 = item53,
            column53 = rep.column53,
            data54 = item54,
            column54 = rep.column54,
            data55 = item55,
            column55 = rep.column55,
            data56 = item56,
            column56 = rep.column56,
            data57 = item57,
            column57 = rep.column57,
            data58 = item58,
            column58 = rep.column58,
            data59 = item59,
            column59 = rep.column59,
            data60 = item60,
            column60 = rep.column60,
            data61 = item61,
            column61 = rep.column61,
            data62 = item62,
            column62 = rep.column62,
            data63 = item63,
            column63 = rep.column63),
          left = dataCol63)
      }
    }
  }
}
