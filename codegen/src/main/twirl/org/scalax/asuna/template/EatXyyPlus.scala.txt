@(tagNum: Int)

package org.scalax.asuna.mapper

object ArticleXyyPlus@{tagNum} {

    def plus@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} <: TypeParameter @if(ii < tagNum) { , } }]
    : Plus[EatXyyType@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii} @if(ii < (tagNum - 1)) { , } }], T@{tagNum}, EatXyyType@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} @if(ii < tagNum) { , } }]] =
    new Plus[EatXyyType@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii} @if(ii < (tagNum - 1)) { , } }], T@{tagNum}, EatXyyType@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} @if(ii < tagNum) { , } }]] {
        override def plus(p: Item@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii}#H @if(ii < (tagNum - 1)) { , } }], item: T@{tagNum}#H): Item@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii}#H @if(ii < tagNum) { , } }] = p.add(item)
        override def takeTail(t: Item@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii}#H @if(ii < tagNum) { , } }]): T@{tagNum}#H = t.rightHead
        override def takeHead(t: Item@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii}#H @if(ii < tagNum) { , } }]): Item@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii}#H @if(ii < (tagNum - 1)) { , } }] = t.rightTail
        override def sub: Plus[EatXyyType@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii} @if(ii < (tagNum - 1)) { , } }]#T, T@{tagNum}#T, EatXyyType@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} @if(ii < tagNum) { , } }]#T] = plus@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii}#T @if(ii < tagNum) { , } }]
    }

    def put@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} <: TypeParameter @if(ii < tagNum) { , } }]
    : Plus[EatXyyType@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii} @if(ii < (tagNum - 1)) { , } }], T@{tagNum}, EatXyyType@{tagNum}[T@{tagNum} @for(ii <- 1 to (tagNum - 1)) { , T@{ii} }]] =
    new Plus[EatXyyType@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii} @if(ii < (tagNum - 1)) { , } }], T@{tagNum}, EatXyyType@{tagNum}[T@{tagNum} @for(ii <- 1 to (tagNum - 1)) { , T@{ii} }]] {
        override def plus(p: Item@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii}#H @if(ii < (tagNum - 1)) { , } }], item: T@{tagNum}#H): Item@{tagNum}[T@{tagNum}#H @for(ii <- 1 to (tagNum - 1)) { , T@{ii}#H }] = p.pull(item)
        override def takeTail(t: Item@{tagNum}[T@{tagNum}#H @for(ii <- 1 to (tagNum - 1)) { , T@{ii}#H }]): T@{tagNum}#H = t.leftHead
        override def takeHead(t: Item@{tagNum}[T@{tagNum}#H @for(ii <- 1 to (tagNum - 1)) { , T@{ii}#H }]): Item@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii}#H @if(ii < (tagNum - 1)) { , } }] = t.leftTail
        override def sub: Plus[EatXyyType@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii} @if(ii < (tagNum - 1)) { , } }]#T, T@{tagNum}#T, EatXyyType@{tagNum}[T@{tagNum} @for(ii <- 1 to (tagNum - 1)) { , T@{ii} }]#T] = put@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii}#T @if(ii < tagNum) { , } }]
    }

}

class TypeParam@{tagNum}[T1 @for(i <- 2 to tagNum) { , T@{i} }] extends TypeParameter {
  override type H = T1
  override type T = TypeParam@{tagNum - 1}[@for(i <- 2 to tagNum) { T@{i} @if(i < tagNum) { , } }]
}