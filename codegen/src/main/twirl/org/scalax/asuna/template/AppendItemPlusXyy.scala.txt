@(maxItem: Int)

class ItemPlusXyy0 extends Item0 {
}

@for(i <- 1 to maxItem) {

    class ItemPlusXyy@{i}[@for(ii <- 1 to i) { I@{ii} @if(ii < i) { , } }](override val item: EatValue0@for(ii <- 1 to i) { #AddItem[I@{ii}] }) extends Xyy[EatValue0@for(ii <- 1 to i) { #AddItem[I@{ii}] }]
    with Item@{i}[@for(ii <- 1 to i) { I@{ii} @if(ii < i) { , } }] {
        @org.scalax.asuna.codegen.TemplateTree1.plusXyy(i)

        def addItem[T](xyy: T): ItemPlusXyy@{i + 1}[@for(ii <- 1 to i) { I@{ii} @if(ii < i) { , } }, T] = new ItemPlusXyy@{i + 1}(item.addItem(xyy))
    }

}

class ItemPlusXyy@{maxItem + 1}[@for(ii <- 1 to maxItem + 1) { I@{ii} @if(ii < maxItem + 1) { , } }](override val item: EatValue0@for(ii <- 1 to (maxItem + 1)) { #AddItem[I@{ii}] }) extends Xyy[EatValue0@for(ii <- 1 to (maxItem + 1)) { #AddItem[I@{ii}] }]
with Item@{maxItem + 1}[@for(ii <- 1 to (maxItem + 1)) { I@{ii} @if(ii < (maxItem + 1)) { , } }] {
    @org.scalax.asuna.codegen.TemplateTree1.plusXyy(maxItem + 1)
}