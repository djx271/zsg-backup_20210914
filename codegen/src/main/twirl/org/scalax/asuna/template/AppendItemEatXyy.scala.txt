@(maxItem: Int)

trait Xyy[I] extends Any {
  def item: I
}

trait ItemEatXyy0 extends Any with Item0 {
    @* override def eat[T](xyy: T): ItemPlusXyy1[T] = new ItemPlusXyy1(item = new ItemValue1(i1 = xyy)) *@
    override def eatToTuple[T](xyy: T): Tuple1[T] = Tuple1(xyy)
}

class ItemEatXyy1[I1](override val item: EatValue0#AddRightItem[I1]) extends AnyVal with Xyy[EatValue0#AddRightItem[I1]] with Item1[I1] {
    override def i1: I1 = item.item.i1
    def addRightItem[T](xyy: T): ItemEatXyy2[I1, T] = new ItemEatXyy2(new E(new PItem2[EatValue1[I1], EatValue1[T]] {
        override val i1 = item.item
        override val i2 = new EatValue1(xyy)
    }))
}

@for(i <- 2 to maxItem) {

    class ItemEatXyy@{i}[@for(ii <- 1 to i) { I@{ii} @if(ii < i) { , } }](override val item: EatValue0#Add2Item[I1, I2]@for(ii <- 3 to i) { #AddRightItem[I@{ii}] }) extends AnyVal with Xyy[EatValue0#Add2Item[I1, I2]@for(ii <- 3 to i) { #AddRightItem[I@{ii}] }]
    with Item@{i}[@for(ii <- 1 to i) { I@{ii} @if(ii < i) { , } }] {
        @org.scalax.asuna.codegen.TemplateTree1.eatXyy(i)

        def addRightItem[T](xyy: T): ItemEatXyy@{i + 1}[@for(ii <- 1 to i) { I@{ii} @if(ii < i) { , } }, T] = new ItemEatXyy@{i + 1}(item.addRightItem(xyy))
    }

}

class ItemEatXyy@{maxItem + 1}[@for(ii <- 1 to (maxItem + 1)) { I@{ii} @if(ii < (maxItem + 1)) { , } }](override val item: EatValue0#Add2Item[I1, I2]@for(ii <- 3 to (maxItem + 1)) { #AddRightItem[I@{ii}] }) extends AnyVal with Xyy[EatValue0#Add2Item[I1, I2]@for(ii <- 3 to (maxItem + 1)) { #AddRightItem[I@{ii}] }]
with Item@{maxItem + 1}[@for(ii <- 1 to (maxItem + 1)) { I@{ii} @if(ii < (maxItem + 1)) { , } }] {
    @org.scalax.asuna.codegen.TemplateTree1.eatXyy((maxItem + 1))
}