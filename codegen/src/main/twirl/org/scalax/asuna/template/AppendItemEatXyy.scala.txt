@(maxItem: Int)

trait Xyy[I] {
  def item: I
}

class ItemEatXyy0 extends Item0 {
    override def eat[T](xyy: T): ItemPlusXyy1[T] = new ItemPlusXyy1(item = new ItemValue1(i1 = xyy))
    override def eatToTuple[T](xyy: T): Tuple1[T] = Tuple1(xyy)
}

@for(i <- 1 to maxItem) {

    class ItemEatXyy@{i}[@for(ii <- 1 to i) { I@{ii} @if(ii < i) { , } }](override val item: @org.scalax.asuna.template.txt.AppendItemEatXyy01(i)) extends Xyy[@org.scalax.asuna.template.txt.AppendItemEatXyy01(i)]
    with Item@{i}[@for(ii <- 1 to i) { I@{ii} @if(ii < i) { , } }] {
        @org.scalax.asuna.codegen.TemplateTree1.eatXyy(i)
    }

}