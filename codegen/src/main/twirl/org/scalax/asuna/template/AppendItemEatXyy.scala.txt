@(maxItem: Int)

trait Xyy[I] extends Any {
  def item: I
}

trait ArticleXyy0 extends Any with Article0 {
    @* override def eat[T](xyy: T): ItemPlusXyy1[T] = new ItemPlusXyy1(item = new ItemValue1(i1 = xyy)) *@
    @* override def eatToTuple[T](xyy: T): Tuple1[T] = Tuple1(xyy) *@
}

trait ArticleXyy1[E1] extends Any with Xyy[EatValue0#AddRightItem[E1]] with Article1[E1] {

    override def item: EatValue0#AddRightItem[E1]
    override def e1: E1 = item.item.i1

    @* def addRightItem[T](xyy: T): ArticleXyy2[I1, T] = new ArticleXyy2(new E(new PItem2[EatValue1[I1], EatValue1[T]] {
        override val i1 = item.item
        override val i2 = new EatValue1(xyy)
    })) *@
}

@for(i <- 2 to maxItem) {

    trait ArticleXyy@{i}[@for(ii <- 1 to i) { E@{ii} @if(ii < i) { , } }] extends Any with Xyy[EatValue0@for(ii <- i to 1 by (- 1)) { #AddRightItem[E@{ii}] }]
    with Article@{i}[@for(ii <- 1 to i) { E@{ii} @if(ii < i) { , } }] {

        override def item: EatValue0@for(ii <- i to 1 by (- 1)) { #AddRightItem[E@{ii}] }
        @org.scalax.asuna.codegen.TemplateTree1.eatXyy(i)

        @* override def eat[T](xyy: T): ArticleXyy@{i + 1}[T, @for(ii <- 1 to i) { I@{ii} @if(ii < i) { , } }] = new ArticleXyy@{i + 1}(item.addLeftItem(xyy)) *@
        @* def addLeftItem[T](xyy: T): ItemPlusXyy@{i + 1}[T, @for(ii <- 1 to i) { I@{ii} @if(ii < i) { , } }] = new ItemPlusXyy@{i + 1}(item.addLeftItem(xyy)) *@
    }

}

trait ArticleXyy@{maxItem + 1}[@for(ii <- 1 to (maxItem + 1)) { E@{ii} @if(ii < (maxItem + 1)) { , } }] extends Any with Xyy[EatValue0@for(ii <- (maxItem + 1) to 1 by (- 1)) { #AddRightItem[E@{ii}] }]
with Article@{maxItem + 1}[@for(ii <- 1 to (maxItem + 1)) { E@{ii} @if(ii < (maxItem + 1)) { , } }] {

    override def item: EatValue0@for(ii <- (maxItem + 1) to 1 by (- 1)) { #AddRightItem[E@{ii}] }
    @org.scalax.asuna.codegen.TemplateTree1.eatXyy((maxItem + 1))

}