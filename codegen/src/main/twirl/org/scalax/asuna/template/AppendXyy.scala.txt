@(tagNum: Int)

package org.scalax.asuna.mapper

import impl._

class ItemTag@{tagNum}[@for(ii <- 1 to tagNum){ T@{ii}, M@{ii} <: Message @if(ii < tagNum) { , } }] extends ItemTag {

    override type XyyItemType = Item@{tagNum}[@for(ii <- 1 to tagNum){ T@{ii} @if(ii < tagNum) { , } }]
    override type M[M <: Message] = ItemTag@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii}, M :-<>-: M@{ii} @if(ii < tagNum) { , } }]

    def debug[K <: KindContext @for(ii <- 1 to tagNum) { , I@{ii} <: TypeParameter }](c: Context[K])(implicit @for(ii <- 1 to tagNum) {
        dapp@{ii}: DebugItemApplication[K, T@{ii}, I@{ii}, M@{ii}] @if(ii < tagNum) { , }
        }): Application[K, ItemTag@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii}, M@{ii} @if(ii < tagNum) { , } }], EatXyyType@{tagNum}[@for(ii <- 1 to tagNum) { I@{ii} @if(ii < tagNum) { , } }]] =
    ItemTag@{tagNum}.appendEatXyy@{tagNum}(@for(ii <- 1 to tagNum) { dapp@{ii} @if(ii < tagNum) { , } })

}

object ItemTag@{tagNum} {

    implicit def appendEatXyy@{tagNum}[K <: KindContext @for(ii <- 1 to tagNum) { , H@{ii} }
    @for(ii <- 1 to tagNum) { , T@{ii} <: TypeParameter }
    @for(ii <- 1 to tagNum) { , M@{ii} <: Message }]
    (implicit @for(ii <- 1 to tagNum) { t@{ii}: Application[K, H@{ii}, T@{ii}] @if(ii < tagNum) { , } })
    : Application[K, ItemTag@{tagNum}[@for(ii <- 1 to tagNum) { H@{ii}, M@{ii} @if(ii < tagNum) { , } }], EatXyyType@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} @if(ii < tagNum) { , } }]] =
        new Application[K, ItemTag@{tagNum}[@for(ii <- 1 to tagNum) { H@{ii}, M@{ii} @if(ii < tagNum) { , } }], EatXyyType@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} @if(ii < tagNum) { , } }]] {
            override def application(context: Context[K]): K#M[EatXyyType@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} @if(ii < tagNum) { , } }]] = {
                if (context.isReverse) {
                    context.append(ItemTag@{tagNum - 1}.appendEatXyy@{tagNum - 1}(@for(ii <- 2 to tagNum) { t@{ii} @if(ii < tagNum) { , } }).application(context), t1.application(context), ArticleXyyPlus@{tagNum}.put@{tagNum})
                } else {
                    context.append(ItemTag@{tagNum - 1}.appendEatXyy@{tagNum - 1}(@for(ii <- 2 to tagNum) { t@{ii - 1} @if(ii < tagNum) { , } }).application(context), t@{tagNum}.application(context), ArticleXyyPlus@{tagNum}.plus@{tagNum})
                }
            }
        }

}