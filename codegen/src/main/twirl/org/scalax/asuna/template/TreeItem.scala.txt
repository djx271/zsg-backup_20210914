@(tagNum: Int)

package org.scalax.asuna.mapper.item

class TreeItem@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} @if(ii < tagNum) { , } }](val item: org.scalax.asuna.mapper.item.EatValue0 @for(ii <- 1 to tagNum) { #AddRightItem[T@{ii}] }) extends AnyVal with Item@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} @if(ii < tagNum) { , } }] {

    override def eat[T](xyy: T): TreeItem@{tagNum + 1}[@for(ii <- 1 to tagNum) { T@{ii}, } T] = new TreeItem@{tagNum + 1}[@for(ii <- 1 to tagNum) { T@{ii}, } T](item.addRightItem(xyy))

    override def rightHead: T@{tagNum} = item.dropRightItem
    override def rightTail: TreeItem@{tagNum - 1}[@for(ii <- 2 to tagNum) { T@{ii - 1} @if(ii < tagNum) { , } }] = new TreeItem@{tagNum - 1}(item.dropRight)

    @org.scalax.asuna.codegen.Property.toItem1II(tagNum)

}


class ReverseTreeItem@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} @if(ii < tagNum) { , } }](val item: org.scalax.asuna.mapper.item.EatValue0 @for(ii <- tagNum to 1 by (- 1)) { #AddRightItem[T@{ii}] }) extends AnyVal with Item@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} @if(ii < tagNum) { , } }] {

    override def pudao[T](xyy: T): ReverseTreeItem@{tagNum + 1}[T @for(ii <- 1 to tagNum) { , T@{ii} }] = new ReverseTreeItem@{tagNum + 1}[T @for(ii <- 1 to tagNum) { , T@{ii} }](item.addRightItem(xyy))

    override def leftHead: T1 = item.dropRightItem
    override def leftTail: ReverseTreeItem@{tagNum - 1}[@for(ii <- 2 to tagNum) { T@{ii} @if(ii < tagNum) { , } }] = new ReverseTreeItem@{tagNum - 1}(item.dropRight)

    @org.scalax.asuna.codegen.Property.toItem2II(tagNum)

}