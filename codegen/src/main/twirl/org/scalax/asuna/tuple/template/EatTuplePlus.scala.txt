package org.scalax.asuna.mapper.item

object ArticleXyyTuplePlus {

@for(i <- 2 to 9) {
    def hlistPlus@{i}[@for(ii <- 1 to i) { T@{ii} <: org.scalax.asuna.mapper.TypeParam @if(ii < i) { , } }]
    : org.scalax.asuna.mapper.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }], T@{i}, XyyTupleType@{i}[@for(ii <- 1 to i) { T@{ii} @if(ii < i) { , } }]] =
    new org.scalax.asuna.mapper.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }], T@{i}, XyyTupleType@{i}[@for(ii <- 1 to i) { T@{ii} @if(ii < i) { , } }]] {
        override def plus(p: Item@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii}#H @if(ii < (i - 1)) { , } }], item: T@{i}#H): (@for(ii <- 1 to i) { T@{ii}#H @if(ii < i) { , } }) = p.eatToTuple(item)
        override def takeHead(t: (@for(ii <- 1 to i) { T@{ii}#H @if(ii < i) { , } })): T@{i}#H = t._@{i}
        override def takeTail(t: (@for(ii <- 1 to i) { T@{ii}#H @if(ii < i) { , } })): Item@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii}#H @if(ii < (i - 1)) { , } }] = HListItem0 @for(ii <- 1 to (i - 1)) { .eat(t._@{ii}) }
        override def sub: org.scalax.asuna.mapper.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }]#T, T@{i}#T, XyyTupleType@{i}[@for(ii <- 1 to i) { T@{ii} @if(ii < i) { , } }]#T] = hlistPlus@{i}[@for(ii <- 1 to i) { T@{ii}#T @if(ii < i) { , } }]
    }

    def hlistPut@{i}[@for(ii <- 1 to i) { T@{ii} <: org.scalax.asuna.mapper.TypeParam @if(ii < i) { , } }]
    : org.scalax.asuna.mapper.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }], T@{i}, XyyTupleType@{i}[T@{i} @for(ii <- 1 to (i - 1)) { , T@{ii} }]] =
    new org.scalax.asuna.mapper.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }], T@{i}, XyyTupleType@{i}[T@{i} @for(ii <- 1 to (i - 1)) { , T@{ii} }]] {
        override def plus(p: Item@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii}#H @if(ii < (i - 1)) { , } }], item: T@{i}#H): (T@{i}#H @for(ii <- 1 to (i - 1)) { , T@{ii}#H }) = p.pudaoToTuple(item)
        override def takeHead(t: (T@{i}#H @for(ii <- 1 to (i - 1)) { , T@{ii}#H })): T@{i}#H = t._1
        override def takeTail(t: (T@{i}#H @for(ii <- 1 to (i - 1)) { , T@{ii}#H })): Item@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii}#H @if(ii < (i - 1)) { , } }] = ReverseHListItem0 @for(ii <- (i - 1) to 1 by (- 1)) { .pudao(t._@{ii + 1}) }
        override def sub: org.scalax.asuna.mapper.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }]#T, T@{i}#T, XyyTupleType@{i}[T@{i} @for(ii <- 1 to (i - 1)) { , T@{ii} }]#T] = hlistPut@{i}[@for(ii <- 1 to i) { T@{ii}#T @if(ii < i) { , } }]
    }
}

}