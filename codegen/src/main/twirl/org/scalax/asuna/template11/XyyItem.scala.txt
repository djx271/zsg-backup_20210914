@(maxItem: Int)

package org.scalax.asuna.ii.item

trait XyyItem0 extends Any {
    def eat[T](xyy: T): XyyItem1[T] = new XyyItem1[T] {
        override def i1: T = xyy
    }
    def pudao[T](xyy: T): XyyItem1[T] = new XyyItem1[T] {
        override def i1: T = xyy
    }
}

object XyyItem0 extends XyyItem0

@for(i <- 1 to maxItem) {

    trait XyyItem@{i}[@for(ii <- 1 to i) { E@{ii} @if(ii < i) { , } }] extends Any {
        self =>

        @for(ii <- 1 to i) {
            def i@{ii}: E@{ii}
        }

        def eat[T](xyy: T): XyyItem@{i + 1}[@for(ii <- 1 to i) { E@{ii}, } T] = new XyyItem@{i + 1}[@for(ii <- 1 to i) { E@{ii}, } T] {
            @for(ii <- 1 to i) {
                override def i@{ii}: E@{ii} = self.i@{ii}
            }
            override def i@{i + 1}: T = xyy
        }
        def pudao[T](xyy: T): XyyItem@{i + 1}[T @for(ii <- 1 to i) { , E@{ii} }] = new XyyItem@{i + 1}[T @for(ii <- 1 to i) { , E@{ii} }] {
            override def i1: T = xyy
            @for(ii <- 1 to i) {
                override def i@{ii + 1}: E@{ii} = self.i@{ii}
            }
        }

    }

}

trait XyyItem@{maxItem + 1}[@for(ii <- 1 to (maxItem + 1)) { E@{ii} @if(ii < (maxItem + 1)) { , } }] extends Any {
    @for(ii <- 1 to (maxItem + 1)) {
        def i@{ii}: E@{ii}
    }
}