@(maxItem: Int)

package org.scalax.asuna.ii.item

object ArticleXyyTuplePlus {

def miaomiaomiao1[T0 <: EatXyyType0, T1 <: org.scalax.asuna.mapper.item.TypeParam]: org.scalax.asuna.mapper.item.Plus[T0, T1, XyyTupleType1[T1]] = new org.scalax.asuna.mapper.item.Plus[T0, T1, XyyTupleType1[T1]] {
    override def plus(p: T0#H, item: T1#H): Tuple1[T1#H] = Tuple1(item)
    override def takeHead(t: Tuple1[T1#H]): T1#H = t._1
    override def takeTail(t: Tuple1[T1#H]): T0#H = XyyItem0
    override def sub: org.scalax.asuna.mapper.item.Plus[T0#T, T1#T, XyyTupleType1[T1#T]] = miaomiaomiao1[T0#T, T1#T]
}


def tuplePlus1[T1 <: org.scalax.asuna.mapper.item.TypeParam] = miaomiaomiao1[EatXyyType0, T1]
def tuplePut1[T1 <: org.scalax.asuna.mapper.item.TypeParam] = miaomiaomiao1[EatXyyType0, T1]

@for(i <- 2 to maxItem) {
    def hlistPlus@{i}[@for(ii <- 1 to i) { T@{ii} <: org.scalax.asuna.mapper.item.TypeParam @if(ii < i) { , } }]
    : org.scalax.asuna.mapper.item.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }], T@{i}, XyyTupleType@{i}[@for(ii <- 1 to i) { T@{ii} @if(ii < i) { , } }]] =
    new org.scalax.asuna.mapper.item.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }], T@{i}, XyyTupleType@{i}[@for(ii <- 1 to i) { T@{ii} @if(ii < i) { , } }]] {
        override def plus(p: XyyItem@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii}#H @if(ii < (i - 1)) { , } }], item: T@{i}#H): Tuple@{i}[@for(ii <- 1 to i) { T@{ii}#H @if(ii < i) { , } }] = p.eatToTuple(item)
        override def takeHead(t: Tuple@{i}[@for(ii <- 1 to i) { T@{ii}#H @if(ii < i) { , } }]): T@{i}#H = t._@{i}
        override def takeTail(t: Tuple@{i}[@for(ii <- 1 to i) { T@{ii}#H @if(ii < i) { , } }]): XyyItem@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii}#H @if(ii < (i - 1)) { , } }] = ArticleXyy0 @for(ii <- 1 to (i - 1)) { .eat(t._@{ii}) }
        override def sub: org.scalax.asuna.mapper.item.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }]#T, T@{i}#T, XyyTupleType@{i}[@for(ii <- 1 to i) { T@{ii} @if(ii < i) { , } }]#T] = hlistPlus@{i}[@for(ii <- 1 to i) { T@{ii}#T @if(ii < i) { , } }]
    }

    def hlistPut@{i}[@for(ii <- 1 to i) { T@{ii} <: org.scalax.asuna.mapper.item.TypeParam @if(ii < i) { , } }]
    : org.scalax.asuna.mapper.item.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }], T@{i}, XyyTupleType@{i}[T@{i} @for(ii <- 1 to (i - 1)) { , T@{ii} }]] =
    new org.scalax.asuna.mapper.item.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }], T@{i}, XyyTupleType@{i}[T@{i} @for(ii <- 1 to (i - 1)) { , T@{ii} }]] {
        override def plus(p: XyyItem@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii}#H @if(ii < (i - 1)) { , } }], item: T@{i}#H): Tuple@{i}[T@{i}#H @for(ii <- 1 to (i - 1)) { , T@{ii}#H }] = p.pudaoToTuple(item)
        override def takeHead(t: Tuple@{i}[T@{i}#H @for(ii <- 1 to (i - 1)) { , T@{ii}#H }]): T@{i}#H = t._1
        override def takeTail(t: Tuple@{i}[T@{i}#H @for(ii <- 1 to (i - 1)) { , T@{ii}#H }]): XyyItem@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii}#H @if(ii < (i - 1)) { , } }] = ArticleXyyReverse0 @for(ii <- (i - 1) to 1 by (- 1)) { .pudao(t._@{ii + 1}) }
        override def sub: org.scalax.asuna.mapper.item.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }]#T, T@{i}#T, XyyTupleType@{i}[T@{i} @for(ii <- 1 to (i - 1)) { , T@{ii} }]#T] = hlistPut@{i}[@for(ii <- 1 to i) { T@{ii}#T @if(ii < i) { , } }]
    }

    def item2Plus@{i}[@for(ii <- 1 to i) { T@{ii} <: org.scalax.asuna.mapper.item.TypeParam @if(ii < i) { , } }]
    : org.scalax.asuna.mapper.item.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }], T@{i}, XyyTupleType@{i}[@for(ii <- 1 to i) { T@{ii} @if(ii < i) { , } }]] =
    new org.scalax.asuna.mapper.item.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }], T@{i}, XyyTupleType@{i}[@for(ii <- 1 to i) { T@{ii} @if(ii < i) { , } }]] {
        override def plus(p: XyyItem@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii}#H @if(ii < (i - 1)) { , } }], item: T@{i}#H): Tuple@{i}[@for(ii <- 1 to i) { T@{ii}#H @if(ii < i) { , } }] = p.eatToTuple(item)
        override def takeHead(t: Tuple@{i}[@for(ii <- 1 to i) { T@{ii}#H @if(ii < i) { , } }]): T@{i}#H = t._@{i}
        override def takeTail(t: Tuple@{i}[@for(ii <- 1 to i) { T@{ii}#H @if(ii < i) { , } }]): XyyItem@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii}#H @if(ii < (i - 1)) { , } }] = Item2Xyy0 @for(ii <- 1 to (i - 1)) { .eat(t._@{ii}) }
        override def sub: org.scalax.asuna.mapper.item.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }]#T, T@{i}#T, XyyTupleType@{i}[@for(ii <- 1 to i) { T@{ii} @if(ii < i) { , } }]#T] = item2Plus@{i}[@for(ii <- 1 to i) { T@{ii}#T @if(ii < i) { , } }]
    }

    def item2Put@{i}[@for(ii <- 1 to i) { T@{ii} <: org.scalax.asuna.mapper.item.TypeParam @if(ii < i) { , } }]
    : org.scalax.asuna.mapper.item.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }], T@{i}, XyyTupleType@{i}[T@{i} @for(ii <- 1 to (i - 1)) { , T@{ii} }]] =
    new org.scalax.asuna.mapper.item.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }], T@{i}, XyyTupleType@{i}[T@{i} @for(ii <- 1 to (i - 1)) { , T@{ii} }]] {
        override def plus(p: XyyItem@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii}#H @if(ii < (i - 1)) { , } }], item: T@{i}#H): Tuple@{i}[T@{i}#H @for(ii <- 1 to (i - 1)) { , T@{ii}#H }] = p.pudaoToTuple(item)
        override def takeHead(t: Tuple@{i}[T@{i}#H @for(ii <- 1 to (i - 1)) { , T@{ii}#H }]): T@{i}#H = t._1
        override def takeTail(t: Tuple@{i}[T@{i}#H @for(ii <- 1 to (i - 1)) { , T@{ii}#H }]): XyyItem@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii}#H @if(ii < (i - 1)) { , } }] = Item2XyyReverse0 @for(ii <- (i - 1) to 1 by (- 1)) { .pudao(t._@{ii + 1}) }
        override def sub: org.scalax.asuna.mapper.item.Plus[EatXyyType@{i - 1}[@for(ii <- 1 to (i - 1)) { T@{ii} @if(ii < (i - 1)) { , } }]#T, T@{i}#T, XyyTupleType@{i}[T@{i} @for(ii <- 1 to (i - 1)) { , T@{ii} }]#T] = item2Put@{i}[@for(ii <- 1 to i) { T@{ii}#T @if(ii < i) { , } }]
    }
}

}