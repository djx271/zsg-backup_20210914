@(maxItem: Int)

package org.scalax.asuna.ii.item

class NodeTag1[T1 <: org.scalax.asuna.mapper.item.ItemTag] extends org.scalax.asuna.mapper.item.ItemTag {

    override type RawItem = org.scalax.asuna.mapper.item.NotUseItem
    override type HeadItem = T1
    override type TailItem = org.scalax.asuna.mapper.item.EndItemTag
    override type Sub = NodeTag1[T1#Sub]

    override type Pull[I <: org.scalax.asuna.mapper.item.ItemTag] = NodeTag1[HeadItem#Sub#Pull[I#HeadItem#Sub]]

}

@for(i <- 2 to maxItem) {
    class NodeTag@{i}[@for(ii <- 1 to i){ T@{ii} <: org.scalax.asuna.mapper.item.ItemTag @if(ii < i) { , } }] extends org.scalax.asuna.mapper.item.ItemTag {

        override type RawItem = org.scalax.asuna.mapper.item.NotUseItem
        override type HeadItem = T1
        override type TailItem = NodeTag@{i - 1}[@for(ii <- 2 to i){ T@{ii} @if(ii < i) { , } }]
        override type Sub = NodeTag@{i}[@for(ii <- 1 to i){ T@{ii}#Sub @if(ii < i) { , } }]
        override type NoMessage = NodeTag@{i}[@for(ii <- 1 to i){ T@{ii}#NoMessage @if(ii < i) { , } }]
        override type Pull[I <: org.scalax.asuna.mapper.item.ItemTag] = NodeTag@{i}[@for(ii <- 1 to i) { @for(iii <- 1 to (ii - 1)) { TailItem# } HeadItem#Sub#Pull[I@for(iii <- 1 to (ii - 1)) { #TailItem } #HeadItem#Sub] @if(ii < i) { , } }]
        override type InputMessage[I <: org.scalax.asuna.mapper.item.MessageContent] = ({
            type Type1 = T1#InputMessage[I];
            @for(ii <- 2 to i) {
                type Type@{ii} = T@{ii}#InputMessage[Type@{ii - 1}#Left];
            }
            type II = org.scalax.asuna.mapper.item.MessageResultImpl[NodeTag@{i}[@for(ii <- 1 to i) { Type@{ii}#Result @if(ii < i) { , } }], Type@{i}#Left]
        })#II

        def debug[K <: org.scalax.asuna.mapper.item.KindContext @for(ii <- 1 to i) { , I@{ii} <: org.scalax.asuna.mapper.item.TypeParam }](c: org.scalax.asuna.mapper.item.Context[K])(implicit @for(ii <- 1 to i) {
            dapp@{ii}: org.scalax.asuna.mapper.item.DebugApplication[K, T@{ii}, I@{ii}, `Application can not load with index @{ii}, please eat xyy.`] @if(ii < i) { , }
        }): org.scalax.asuna.mapper.item.Application[K, org.scalax.asuna.ii.item.NodeTag@{i}[@for(ii <- 1 to i) { T@{ii} @if(ii < i) { , } }], EatXyyType@{i}[@for(ii <- 1 to i) { I@{ii} @if(ii < i) { , } }]] =
        AppendNodeTagEatXyy.xyy@{i}(@for(ii <- 1 to i) { dapp@{ii} @if(ii < i) { , } })

    }

}