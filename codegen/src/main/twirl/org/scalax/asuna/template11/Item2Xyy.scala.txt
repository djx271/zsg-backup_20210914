@(maxItem: Int)

package org.scalax.asuna.ii.item

trait Item2Xyy0 extends Any with XyyItem0 {
    override def eat[T](xyy: T): Item2Xyy1[T] = new Item2Xyy1(org.scalax.asuna.mapper.item.EatValue0.addRightItem(xyy))
}

object Item2Xyy0 extends Item2Xyy0

class Item2Xyy1[T1](val item: org.scalax.asuna.mapper.item.EatValue0#AddRightItem[T1]) extends AnyVal with XyyItem1[T1] {
  override def eat[T](xyy: T): Item2Xyy2[T1, T] = new Item2Xyy2[T1, T](item.addRightItem(xyy))
  override def rightHead: T1                    = item.dropRightItem
  override def rightTail: Item2Xyy0             = Item2Xyy0
  override def i1: T1                           = item.item.i1
}

@for(i <- 2 to maxItem) {

    class Item2Xyy@{i}[@for(ii <- 1 to i) { T@{ii} @if(ii < i) { , } }](val item: org.scalax.asuna.mapper.item.EatValue0 @for(ii <- 1 to i) { #AddRightItem[T@{ii}] }) extends AnyVal with XyyItem@{i}[@for(ii <- 1 to i) { T@{ii} @if(ii < i) { , } }] {

        override def eat[T](xyy: T): Item2Xyy@{i + 1}[@for(ii <- 1 to i) { T@{ii}, } T] = new Item2Xyy@{i + 1}[@for(ii <- 1 to i) { T@{ii}, } T](item.addRightItem(xyy))

        override def rightHead: T@{i} = item.dropRightItem
        override def rightTail: Item2Xyy@{i - 1}[@for(ii <- 2 to i) { T@{ii - 1} @if(ii < i) { , } }] = new Item2Xyy@{i - 1}(item.dropRight)

        @org.scalax.asuna.codegen.Property.toItem1II(i)

    }

}

class Item2Xyy@{maxItem + 1}[@for(ii <- 1 to (maxItem + 1)) { T@{ii} @if(ii < (maxItem + 1)) { , } }](val item: org.scalax.asuna.mapper.item.EatValue0 @for(ii <- 1 to (maxItem + 1)) { #AddRightItem[T@{ii}] }) extends AnyVal with XyyItem@{maxItem + 1}[@for(ii <- 1 to (maxItem + 1)) { T@{ii} @if(ii < (maxItem + 1)) { , } }] {

    override def rightHead: T@{maxItem + 1} = item.dropRightItem
    override def rightTail: Item2Xyy@{maxItem}[@for(ii <- 2 to (maxItem + 1)) { T@{ii - 1} @if(ii < (maxItem + 1)) { , } }] = new Item2Xyy@{maxItem}(item.dropRight)

    @org.scalax.asuna.codegen.Property.toItem1II(maxItem + 1)

}