@(maxItem: Int)

package asuna

trait BuildContent {

def lift[T](tag : => AppendTag[T]): AppendTag[T] = new AppendTag[T]

@for(i <- 1 to maxItem) {
    def tag[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }](@for(ii <- 1 to i){ t@{ii} : AppendTag[T@{ii}] @if(ii < i) { , } }):
    AppendTag[TupleTag@{i}[@for(ii <- 1 to i){ T@{ii}, `Number： @{ii}` @if(ii < i) { , } }]] =
    new AppendTag[TupleTag@{i}[@for(ii <- 1 to i){ T@{ii}, `Number： @{ii}` @if(ii < i) { , } }]]

    def nodeTag[@for(ii <- 1 to i){ T@{ii} <: TupleTag @if(ii < i) { , } }](@for(ii <- 1 to i){ t@{ii} : AppendTag[T@{ii}] @if(ii < i) { , } }):
        AppendTag[NodeTag@{i}[@for(ii <- 1 to i){ T@{ii}, `Number： @{ii}` @if(ii < i) { , } }]] =
        new AppendTag[NodeTag@{i}[@for(ii <- 1 to i){ T@{ii}, `Number： @{ii}` @if(ii < i) { , } }]]

    def tuple@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }](@for(ii <- 1 to i){ t@{ii} : T@{ii} @if(ii < i) { , } }):
        ContextContent[AsunaTuple@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }]] =
        new ContextContent[AsunaTuple@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }]] {
            override def withContext[K <: KindContext](c: Context[K]): AsunaTuple@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }] = {
                if (c.isReverse) {
                    new ReverseHListTuple@{i}(@for(ii <- 1 to i){ t@{ii} :: } HNil)
                } else {
                    if (c.useHList) {
                        new HListTuple@{i}(@for(ii <- 1 to i){ t@{i - ii + 1} :: } HNil)
                    } else {
                        val data = new VariableAnyTuple8
                        @for(ii <- 1 to i) {
                            data.t@{ii} = t@{ii}
                        }
                        new VariableTuple@{i}(data)
                    }
                }
            }
        }

    def nodeTuple@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }](@for(ii <- 1 to i){ t@{ii} : ContextContent[T@{ii}] @if(ii < i) { , } }):
        ContextContent[AsunaTuple@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }]] =
        new ContextContent[AsunaTuple@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }]] {
            override def withContext[K <: KindContext](c: Context[K]): AsunaTuple@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }] = {
                if (c.isReverse) {
                    new ReverseHListTuple@{i}(@for(ii <- 1 to i){ t@{ii}.withContext(c) :: } HNil)
                } else {
                    if (c.useHList) {
                        new HListTuple@{i}(@for(ii <- 1 to i){ t@{i - ii + 1}.withContext(c) :: } HNil)
                    } else {
                        val data = new VariableAnyTuple8
                        @for(ii <- 1 to i) {
                            data.t@{ii} = t@{ii}.withContext(c)
                        }
                        new VariableTuple@{i}(data)
                    }
                }

            }
        }

}

}

object BuildContent extends BuildContent