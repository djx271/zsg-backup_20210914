@(maxItem: Int)

package org.scalax.asuna.mapper

trait BuildContent {

def lift[T](tag : => AppendTag[T]): AppendTag[T] = new AppendTag[T]

@for(i <- 1 to maxItem) {
    def tag[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }](@for(ii <- 1 to i){ t@{ii} : AppendTag[T@{ii}] @if(ii < i) { , } }):
    AppendTag[ItemTag@{i}[@for(ii <- 1 to i){ T@{ii}, Asuna.`Number： @{ii}` @if(ii < i) { , } }]] =
    new AppendTag[ItemTag@{i}[@for(ii <- 1 to i){ T@{ii}, Asuna.`Number： @{ii}` @if(ii < i) { , } }]]

    def nodeTag[@for(ii <- 1 to i){ T@{ii} <: ItemTag @if(ii < i) { , } }](@for(ii <- 1 to i){ t@{ii} : AppendTag[T@{ii}] @if(ii < i) { , } }):
        AppendTag[NodeTag@{i}[@for(ii <- 1 to i){ T@{ii}, Asuna.`Number： @{ii}` @if(ii < i) { , } }]] =
        new AppendTag[NodeTag@{i}[@for(ii <- 1 to i){ T@{ii}, Asuna.`Number： @{ii}` @if(ii < i) { , } }]]

    def item@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }](@for(ii <- 1 to i){ t@{ii} : T@{ii} @if(ii < i) { , } }):
        ContextContent[Item@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }]] =
        new ContextContent[Item@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }]] {
            override def withContext[K <: KindContext](c: Context[K]): Item@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }] = {
                if (c.isReverse) {
                    new ReverseHListItem@{i}(@for(ii <- 1 to i){ t@{ii} :: } HNil)
                } else {
                    new HListItem@{i}(@for(ii <- 1 to i){ t@{i - ii + 1} :: } HNil)
                }
            }
        }

    def nodeItem@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }](@for(ii <- 1 to i){ t@{ii} : ContextContent[T@{ii}] @if(ii < i) { , } }):
        ContextContent[Item@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }]] =
        new ContextContent[Item@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }]] {
            override def withContext[K <: KindContext](c: Context[K]): Item@{i}[@for(ii <- 1 to i){ T@{ii} @if(ii < i) { , } }] = {
                if (c.isReverse) {
                    new ReverseHListItem@{i}(@for(ii <- 1 to i){ t@{ii}.withContext(c) :: } HNil)
                } else {
                    new HListItem@{i}(@for(ii <- 1 to i){ t@{i - ii + 1}.withContext(c) :: } HNil)
                }

            }
        }

}

}

object BuildContent extends BuildContent