@(tagNum: Int)

package org.scalax.asuna.mapper

trait ItemTypeParameterPlus@{tagNum} {

    val plus@{tagNum}Any
    : Plus[ItemTypeParameter@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeParameter @if(ii < (tagNum - 1)) { , } }], AnyTypeParameter, ItemTypeParameter@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeParameter @if(ii < tagNum) { , } }]] =
    new Plus[ItemTypeParameter@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeParameter @if(ii < (tagNum - 1)) { , } }], AnyTypeParameter, ItemTypeParameter@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeParameter @if(ii < tagNum) { , } }]] {
        override def plus(p: Item@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeParameter#H @if(ii < (tagNum - 1)) { , } }], item: AnyTypeParameter#H): Item@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeParameter#H @if(ii < tagNum) { , } }] = p.add(item)
        override def takeTail(t: Item@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeParameter#H @if(ii < tagNum) { , } }]): AnyTypeParameter#H = t.rightHead
        override def takeHead(t: Item@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeParameter#H @if(ii < tagNum) { , } }]): Item@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeParameter#H @if(ii < (tagNum - 1)) { , } }] = t.rightTail
        override def sub: Plus[ItemTypeParameter@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeParameter @if(ii < (tagNum - 1)) { , } }]#T, AnyTypeParameter#T, ItemTypeParameter@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeParameter @if(ii < tagNum) { , } }]#T] = plus@{tagNum}Any
    }

    val put@{tagNum}Any
    : Plus[ItemTypeParameter@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeParameter @if(ii < (tagNum - 1)) { , } }], AnyTypeParameter, ItemTypeParameter@{tagNum}[AnyTypeParameter @for(ii <- 1 to (tagNum - 1)) { , AnyTypeParameter }]] =
    new Plus[ItemTypeParameter@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeParameter @if(ii < (tagNum - 1)) { , } }], AnyTypeParameter, ItemTypeParameter@{tagNum}[AnyTypeParameter @for(ii <- 1 to (tagNum - 1)) { , AnyTypeParameter }]] {
        override def plus(p: Item@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeParameter#H @if(ii < (tagNum - 1)) { , } }], item: AnyTypeParameter#H): Item@{tagNum}[AnyTypeParameter#H @for(ii <- 1 to (tagNum - 1)) { , AnyTypeParameter#H }] = p.pull(item)
        override def takeTail(t: Item@{tagNum}[AnyTypeParameter#H @for(ii <- 1 to (tagNum - 1)) { , AnyTypeParameter#H }]): AnyTypeParameter#H = t.leftHead
        override def takeHead(t: Item@{tagNum}[AnyTypeParameter#H @for(ii <- 1 to (tagNum - 1)) { , AnyTypeParameter#H }]): Item@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeParameter#H @if(ii < (tagNum - 1)) { , } }] = t.leftTail
        override def sub: Plus[ItemTypeParameter@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeParameter @if(ii < (tagNum - 1)) { , } }]#T, AnyTypeParameter#T, ItemTypeParameter@{tagNum}[AnyTypeParameter @for(ii <- 1 to (tagNum - 1)) { , AnyTypeParameter }]#T] = put@{tagNum}Any
    }

    @@inline def plus@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} <: TypeParameter @if(ii < tagNum) { , } }]
    : Plus[ItemTypeParameter@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii} @if(ii < (tagNum - 1)) { , } }], T@{tagNum}, ItemTypeParameter@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} @if(ii < tagNum) { , } }]] =
    plus@{tagNum}Any.asInstanceOf[Plus[ItemTypeParameter@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii} @if(ii < (tagNum - 1)) { , } }], T@{tagNum}, ItemTypeParameter@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} @if(ii < tagNum) { , } }]]]

    @@inline def put@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} <: TypeParameter @if(ii < tagNum) { , } }]
    : Plus[ItemTypeParameter@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii} @if(ii < (tagNum - 1)) { , } }], T@{tagNum}, ItemTypeParameter@{tagNum}[T@{tagNum} @for(ii <- 1 to (tagNum - 1)) { , T@{ii} }]] =
    put@{tagNum}Any.asInstanceOf[Plus[ItemTypeParameter@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii} @if(ii < (tagNum - 1)) { , } }], T@{tagNum}, ItemTypeParameter@{tagNum}[T@{tagNum} @for(ii <- 1 to (tagNum - 1)) { , T@{ii} }]]]

}

object ItemTypeParameterPlus@{tagNum} extends ItemTypeParameterPlus@{tagNum}