@(tagNum: Int)

package asuna

trait HListToTupleTypeHListPlus@{tagNum} {

val plus@{tagNum}Any: Plus[
    HListTypeHList@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeHList @if(ii < (tagNum - 1)) { , } }],
    AnyTypeHList,
    TupleTypeHList@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeHList @if(ii < tagNum) { , } }]
] =
new Plus[
        HListTypeHList@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeHList @if(ii < (tagNum - 1)) { , } }],
        AnyTypeHList,
        TupleTypeHList@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeHList @if(ii < tagNum) { , } }]
    ] {
override def plus(p: HListTypeHList@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeHList @if(ii < (tagNum - 1)) { , } }]#H,
item: AnyTypeHList#H): TupleTypeHList@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeHList @if(ii < tagNum) { , } }]#H = {
val ii1 = p.head
val tt1 = p.tail
@for(i <- 2 to (tagNum - 1)) {
val ii@{i} = tt@{i - 1}.head
@if(i < (tagNum - 1)) { val tt@{i} = tt@{i - 1}.tail }
}
new AsunaValueTuple@{tagNum}(@for(i <- 1 to (tagNum - 1)) { i@{i} = ii@{tagNum - i}, } i@{tagNum} = item)
}
override def takeTail(t: AsunaTuple@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeHList#H @if(ii < tagNum) { , } }]): AnyTypeHList#H = t.i@{tagNum}
override def takeHead(t: AsunaTuple@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeHList#H @if(ii < tagNum) { , } }]): @for(ii <- 1 to (tagNum - 1)) { AnyTypeHList#H :: } HNil = @for(ii <- (tagNum - 1) to 1 by - 1) { t.i@{ii} :: } HNil
override lazy val sub: Plus[HListTypeHList@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeHList @if(ii < (tagNum - 1)) { , } }]#T, AnyTypeHList#T, TupleTypeHList@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeHList @if(ii < tagNum) { , } }]#T] = plus@{tagNum}Any
}

@@inline def plus@{tagNum}[@for(ii <- 1 to tagNum) { E@{ii} <: TypeHList @if(ii < tagNum) { , } }]: Plus[
    HListTypeHList@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { E@{ii} @if(ii < (tagNum - 1)) { , } }],
    E@{tagNum},
    TupleTypeHList@{tagNum}[@for(ii <- 1 to tagNum) { E@{ii} @if(ii < tagNum) { , } }]
] =
plus@{tagNum}Any.asInstanceOf[Plus[
    HListTypeHList@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { E@{ii} @if(ii < (tagNum - 1)) { , } }],
    E@{tagNum},
    TupleTypeHList@{tagNum}[@for(ii <- 1 to tagNum) { E@{ii} @if(ii < tagNum) { , } }]
]]

val put@{tagNum}Any: Plus[
    HListTypeHList@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeHList @if(ii < (tagNum - 1)) { , } }],
    AnyTypeHList,
    TupleTypeHList@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeHList @if(ii < tagNum) { , } }]
] =
new Plus[
        HListTypeHList@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeHList @if(ii < (tagNum - 1)) { , } }],
        AnyTypeHList,
        TupleTypeHList@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeHList @if(ii < tagNum) { , } }]
    ] {
override def plus(p: HListTypeHList@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeHList @if(ii < (tagNum - 1)) { , } }]#H,
item: AnyTypeHList#H): TupleTypeHList@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeHList @if(ii < tagNum) { , } }]#H = {
val ii1 = p.head
val tt1 = p.tail
@for(i <- 2 to (tagNum - 1)) {
val ii@{i} = tt@{i - 1}.head
@if(i < (tagNum - 1)) { val tt@{i} = tt@{i - 1}.tail }
}
new AsunaValueTuple@{tagNum}(i1 = item @for(i <- 1 to (tagNum - 1)) { , i@{i + 1} = ii@{i} })
}
override def takeTail(t: AsunaTuple@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeHList#H @if(ii < tagNum) { , } }]): AnyTypeHList#H = t.i1
override def takeHead(t: AsunaTuple@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeHList#H @if(ii < tagNum) { , } }]): @for(ii <- 1 to (tagNum - 1)) { AnyTypeHList#H :: } HNil = @for(ii <- 2 to tagNum) { t.i@{ii} :: } HNil
override lazy val sub: Plus[HListTypeHList@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { AnyTypeHList @if(ii < (tagNum - 1)) { , } }]#T, AnyTypeHList#T, TupleTypeHList@{tagNum}[@for(ii <- 1 to tagNum) { AnyTypeHList @if(ii < tagNum) { , } }]#T] = put@{tagNum}Any
}

@@inline def put@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} <: TypeHList @if(ii < tagNum) { , } }]
    : Plus[HListTypeHList@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii} @if(ii < (tagNum - 1)) { , } }], T@{tagNum}, TupleTypeHList@{tagNum}[T@{tagNum} @for(ii <- (tagNum - 1) to 1 by - 1) { , T@{ii} }]] =
    put@{tagNum}Any.asInstanceOf[Plus[HListTypeHList@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { T@{ii} @if(ii < (tagNum - 1)) { , } }], T@{tagNum}, TupleTypeHList@{tagNum}[T@{tagNum} @for(ii <- (tagNum - 1) to 1 by - 1) { , T@{ii} }]]]

}

object HListToTupleTypeHListPlus@{tagNum} extends HListToTupleTypeHListPlus@{tagNum}