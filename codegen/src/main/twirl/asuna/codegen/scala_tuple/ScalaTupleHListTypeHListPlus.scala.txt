@(maxNum: Int)

package asuna.tuple.support
import asuna.TupleTypeHList0
import asuna.AsunaTuple0
import asuna.Plus
import asuna.TypeHList
import asuna.support.heterogeneous._

class ScalaTupleHListTypeHListPlus {

def plus1[E1 <: TypeHList]: Plus[
    TupleTypeHList0,
    E1,
    ScalaTupleHListTypeHList.ScalaTupleHListTypeHList1[E1]
] = plus1Tuple[TupleTypeHList0, E1]
    def plus1Tuple[E1 <: TupleTypeHList0, E2 <: TypeHList]: Plus[
        E1,
        E2,
        ScalaTupleHListTypeHList.ScalaTupleHListTypeHList1[E2]
    ] =
    new Plus[
        E1,
        E2,
        ScalaTupleHListTypeHList.ScalaTupleHListTypeHList1[E2]
    ] {
        override def plus(i: E1#H, item: E2#H): E2#H :: HNil = item :: HNil
        override def takeHead(i: E2#H :: HNil): E1#H         = AsunaTuple0
        override def takeTail(i: E2#H :: HNil): E2#H         = i.head
        override def sub: Plus[
            E1#T,
            E2#T,
            ScalaTupleHListTypeHList.ScalaTupleHListTypeHList1[E2]#T
        ] = plus1Tuple[E1#T, E2#T]
}

@for(tagNum <- 2 to maxNum) {
@@inline def plus@{tagNum}[@for(ii <- 1 to tagNum) { E@{ii} <: TypeHList @if(ii < tagNum) { , } }]: Plus[
    ScalaTupleHListTypeHList.ScalaTupleHListTypeHList@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { E@{ii} @if(ii < (tagNum - 1)) { , } }],
    E@{tagNum},
    ScalaTupleHListTypeHList.ScalaTupleHListTypeHList@{tagNum}[@for(ii <- 1 to tagNum) { E@{ii} @if(ii < tagNum) { , } }]
] =
new Plus[
    ScalaTupleHListTypeHList.ScalaTupleHListTypeHList@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { E@{ii} @if(ii < (tagNum - 1)) { , } }],
    E@{tagNum},
    ScalaTupleHListTypeHList.ScalaTupleHListTypeHList@{tagNum}[@for(ii <- 1 to tagNum) { E@{ii} @if(ii < tagNum) { , } }]
] {
override def plus(i: @for(ii <- (tagNum - 1) to 1 by - 1) { E@{ii}#H :: } HNil, item: E@{tagNum}#H): @for(ii <- tagNum to 1 by - 1) { E@{ii}#H :: } HNil = item :: i
override def takeHead(i: @for(ii <- tagNum to 1 by - 1) { E@{ii}#H :: } HNil): @for(ii <- (tagNum - 1) to 1 by - 1) { E@{ii}#H :: } HNil = i.tail
override def takeTail(i: @for(ii <- tagNum to 1 by - 1) { E@{ii}#H :: } HNil): E@{tagNum}#H = i.head
override def sub: Plus[
    ScalaTupleHListTypeHList.ScalaTupleHListTypeHList@{tagNum - 1}[@for(ii <- 1 to (tagNum - 1)) { E@{ii} @if(ii < (tagNum - 1)) { , } }]#T,
    E@{tagNum}#T,
    ScalaTupleHListTypeHList.ScalaTupleHListTypeHList@{tagNum}[@for(ii <- 1 to tagNum) { E@{ii} @if(ii < tagNum) { , } }]#T
] = plus@{tagNum}[@for(ii <- 1 to tagNum) { E@{ii}#T @if(ii < tagNum) { , } }]
}
}
}

object ScalaTupleHListTypeHListPlus extends ScalaTupleHListTypeHListPlus