package asuna.scala_tuple.tuple_support
import asuna.Plus4
import asuna.support.heterogeneous._
trait PlusToTuple_21_4 {
  final def plusWithTypeParameter21[
    X1_C1,
    X1_C2,
    X1_C3,
    X1_C4,
    X1_C5,
    X1_C6,
    X1_C7,
    X1_C8,
    X1_C9,
    X1_C10,
    X1_C11,
    X1_C12,
    X1_C13,
    X1_C14,
    X1_C15,
    X1_C16,
    X1_C17,
    X1_C18,
    X1_C19,
    X1_C20,
    X1_C21,
    X2_C1,
    X2_C2,
    X2_C3,
    X2_C4,
    X2_C5,
    X2_C6,
    X2_C7,
    X2_C8,
    X2_C9,
    X2_C10,
    X2_C11,
    X2_C12,
    X2_C13,
    X2_C14,
    X2_C15,
    X2_C16,
    X2_C17,
    X2_C18,
    X2_C19,
    X2_C20,
    X2_C21,
    X3_C1,
    X3_C2,
    X3_C3,
    X3_C4,
    X3_C5,
    X3_C6,
    X3_C7,
    X3_C8,
    X3_C9,
    X3_C10,
    X3_C11,
    X3_C12,
    X3_C13,
    X3_C14,
    X3_C15,
    X3_C16,
    X3_C17,
    X3_C18,
    X3_C19,
    X3_C20,
    X3_C21,
    X4_C1,
    X4_C2,
    X4_C3,
    X4_C4,
    X4_C5,
    X4_C6,
    X4_C7,
    X4_C8,
    X4_C9,
    X4_C10,
    X4_C11,
    X4_C12,
    X4_C13,
    X4_C14,
    X4_C15,
    X4_C16,
    X4_C17,
    X4_C18,
    X4_C19,
    X4_C20,
    X4_C21,
    Y1,
    Y2,
    Y3,
    Y4
  ]: Plus4[
    (X1_C1, X1_C2, X1_C3, X1_C4, X1_C5, X1_C6, X1_C7, X1_C8, X1_C9, X1_C10, X1_C11, X1_C12, X1_C13, X1_C14, X1_C15, X1_C16, X1_C17, X1_C18, X1_C19, X1_C20, X1_C21),
    (X2_C1, X2_C2, X2_C3, X2_C4, X2_C5, X2_C6, X2_C7, X2_C8, X2_C9, X2_C10, X2_C11, X2_C12, X2_C13, X2_C14, X2_C15, X2_C16, X2_C17, X2_C18, X2_C19, X2_C20, X2_C21),
    (X3_C1, X3_C2, X3_C3, X3_C4, X3_C5, X3_C6, X3_C7, X3_C8, X3_C9, X3_C10, X3_C11, X3_C12, X3_C13, X3_C14, X3_C15, X3_C16, X3_C17, X3_C18, X3_C19, X3_C20, X3_C21),
    (X4_C1, X4_C2, X4_C3, X4_C4, X4_C5, X4_C6, X4_C7, X4_C8, X4_C9, X4_C10, X4_C11, X4_C12, X4_C13, X4_C14, X4_C15, X4_C16, X4_C17, X4_C18, X4_C19, X4_C20, X4_C21),
    Y1,
    Y2,
    Y3,
    Y4,
    (Y1, X1_C1, X1_C2, X1_C3, X1_C4, X1_C5, X1_C6, X1_C7, X1_C8, X1_C9, X1_C10, X1_C11, X1_C12, X1_C13, X1_C14, X1_C15, X1_C16, X1_C17, X1_C18, X1_C19, X1_C20, X1_C21),
    (Y2, X2_C1, X2_C2, X2_C3, X2_C4, X2_C5, X2_C6, X2_C7, X2_C8, X2_C9, X2_C10, X2_C11, X2_C12, X2_C13, X2_C14, X2_C15, X2_C16, X2_C17, X2_C18, X2_C19, X2_C20, X2_C21),
    (Y3, X3_C1, X3_C2, X3_C3, X3_C4, X3_C5, X3_C6, X3_C7, X3_C8, X3_C9, X3_C10, X3_C11, X3_C12, X3_C13, X3_C14, X3_C15, X3_C16, X3_C17, X3_C18, X3_C19, X3_C20, X3_C21),
    (Y4, X4_C1, X4_C2, X4_C3, X4_C4, X4_C5, X4_C6, X4_C7, X4_C8, X4_C9, X4_C10, X4_C11, X4_C12, X4_C13, X4_C14, X4_C15, X4_C16, X4_C17, X4_C18, X4_C19, X4_C20, X4_C21)
  ] =
    new Plus4[
      (X1_C1, X1_C2, X1_C3, X1_C4, X1_C5, X1_C6, X1_C7, X1_C8, X1_C9, X1_C10, X1_C11, X1_C12, X1_C13, X1_C14, X1_C15, X1_C16, X1_C17, X1_C18, X1_C19, X1_C20, X1_C21),
      (X2_C1, X2_C2, X2_C3, X2_C4, X2_C5, X2_C6, X2_C7, X2_C8, X2_C9, X2_C10, X2_C11, X2_C12, X2_C13, X2_C14, X2_C15, X2_C16, X2_C17, X2_C18, X2_C19, X2_C20, X2_C21),
      (X3_C1, X3_C2, X3_C3, X3_C4, X3_C5, X3_C6, X3_C7, X3_C8, X3_C9, X3_C10, X3_C11, X3_C12, X3_C13, X3_C14, X3_C15, X3_C16, X3_C17, X3_C18, X3_C19, X3_C20, X3_C21),
      (X4_C1, X4_C2, X4_C3, X4_C4, X4_C5, X4_C6, X4_C7, X4_C8, X4_C9, X4_C10, X4_C11, X4_C12, X4_C13, X4_C14, X4_C15, X4_C16, X4_C17, X4_C18, X4_C19, X4_C20, X4_C21),
      Y1,
      Y2,
      Y3,
      Y4,
      (Y1, X1_C1, X1_C2, X1_C3, X1_C4, X1_C5, X1_C6, X1_C7, X1_C8, X1_C9, X1_C10, X1_C11, X1_C12, X1_C13, X1_C14, X1_C15, X1_C16, X1_C17, X1_C18, X1_C19, X1_C20, X1_C21),
      (Y2, X2_C1, X2_C2, X2_C3, X2_C4, X2_C5, X2_C6, X2_C7, X2_C8, X2_C9, X2_C10, X2_C11, X2_C12, X2_C13, X2_C14, X2_C15, X2_C16, X2_C17, X2_C18, X2_C19, X2_C20, X2_C21),
      (Y3, X3_C1, X3_C2, X3_C3, X3_C4, X3_C5, X3_C6, X3_C7, X3_C8, X3_C9, X3_C10, X3_C11, X3_C12, X3_C13, X3_C14, X3_C15, X3_C16, X3_C17, X3_C18, X3_C19, X3_C20, X3_C21),
      (Y4, X4_C1, X4_C2, X4_C3, X4_C4, X4_C5, X4_C6, X4_C7, X4_C8, X4_C9, X4_C10, X4_C11, X4_C12, X4_C13, X4_C14, X4_C15, X4_C16, X4_C17, X4_C18, X4_C19, X4_C20, X4_C21)
    ] {
      final override def takeHead1(
        z: (
          Y1,
          X1_C1,
          X1_C2,
          X1_C3,
          X1_C4,
          X1_C5,
          X1_C6,
          X1_C7,
          X1_C8,
          X1_C9,
          X1_C10,
          X1_C11,
          X1_C12,
          X1_C13,
          X1_C14,
          X1_C15,
          X1_C16,
          X1_C17,
          X1_C18,
          X1_C19,
          X1_C20,
          X1_C21
        )
      ): (X1_C1, X1_C2, X1_C3, X1_C4, X1_C5, X1_C6, X1_C7, X1_C8, X1_C9, X1_C10, X1_C11, X1_C12, X1_C13, X1_C14, X1_C15, X1_C16, X1_C17, X1_C18, X1_C19, X1_C20, X1_C21) =
        (z._2, z._3, z._4, z._5, z._6, z._7, z._8, z._9, z._10, z._11, z._12, z._13, z._14, z._15, z._16, z._17, z._18, z._19, z._20, z._21, z._22)
      final override def takeTail1(
        z: (
          Y1,
          X1_C1,
          X1_C2,
          X1_C3,
          X1_C4,
          X1_C5,
          X1_C6,
          X1_C7,
          X1_C8,
          X1_C9,
          X1_C10,
          X1_C11,
          X1_C12,
          X1_C13,
          X1_C14,
          X1_C15,
          X1_C16,
          X1_C17,
          X1_C18,
          X1_C19,
          X1_C20,
          X1_C21
        )
      ): Y1 = z._1
      final override def plus1(
        x: (X1_C1, X1_C2, X1_C3, X1_C4, X1_C5, X1_C6, X1_C7, X1_C8, X1_C9, X1_C10, X1_C11, X1_C12, X1_C13, X1_C14, X1_C15, X1_C16, X1_C17, X1_C18, X1_C19, X1_C20, X1_C21),
        y: Y1
      ): (
        Y1,
        X1_C1,
        X1_C2,
        X1_C3,
        X1_C4,
        X1_C5,
        X1_C6,
        X1_C7,
        X1_C8,
        X1_C9,
        X1_C10,
        X1_C11,
        X1_C12,
        X1_C13,
        X1_C14,
        X1_C15,
        X1_C16,
        X1_C17,
        X1_C18,
        X1_C19,
        X1_C20,
        X1_C21
      ) =
        (y, x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8, x._9, x._10, x._11, x._12, x._13, x._14, x._15, x._16, x._17, x._18, x._19, x._20, x._21)
      final override def takeHead2(
        z: (
          Y2,
          X2_C1,
          X2_C2,
          X2_C3,
          X2_C4,
          X2_C5,
          X2_C6,
          X2_C7,
          X2_C8,
          X2_C9,
          X2_C10,
          X2_C11,
          X2_C12,
          X2_C13,
          X2_C14,
          X2_C15,
          X2_C16,
          X2_C17,
          X2_C18,
          X2_C19,
          X2_C20,
          X2_C21
        )
      ): (X2_C1, X2_C2, X2_C3, X2_C4, X2_C5, X2_C6, X2_C7, X2_C8, X2_C9, X2_C10, X2_C11, X2_C12, X2_C13, X2_C14, X2_C15, X2_C16, X2_C17, X2_C18, X2_C19, X2_C20, X2_C21) =
        (z._2, z._3, z._4, z._5, z._6, z._7, z._8, z._9, z._10, z._11, z._12, z._13, z._14, z._15, z._16, z._17, z._18, z._19, z._20, z._21, z._22)
      final override def takeTail2(
        z: (
          Y2,
          X2_C1,
          X2_C2,
          X2_C3,
          X2_C4,
          X2_C5,
          X2_C6,
          X2_C7,
          X2_C8,
          X2_C9,
          X2_C10,
          X2_C11,
          X2_C12,
          X2_C13,
          X2_C14,
          X2_C15,
          X2_C16,
          X2_C17,
          X2_C18,
          X2_C19,
          X2_C20,
          X2_C21
        )
      ): Y2 = z._1
      final override def plus2(
        x: (X2_C1, X2_C2, X2_C3, X2_C4, X2_C5, X2_C6, X2_C7, X2_C8, X2_C9, X2_C10, X2_C11, X2_C12, X2_C13, X2_C14, X2_C15, X2_C16, X2_C17, X2_C18, X2_C19, X2_C20, X2_C21),
        y: Y2
      ): (
        Y2,
        X2_C1,
        X2_C2,
        X2_C3,
        X2_C4,
        X2_C5,
        X2_C6,
        X2_C7,
        X2_C8,
        X2_C9,
        X2_C10,
        X2_C11,
        X2_C12,
        X2_C13,
        X2_C14,
        X2_C15,
        X2_C16,
        X2_C17,
        X2_C18,
        X2_C19,
        X2_C20,
        X2_C21
      ) =
        (y, x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8, x._9, x._10, x._11, x._12, x._13, x._14, x._15, x._16, x._17, x._18, x._19, x._20, x._21)
      final override def takeHead3(
        z: (
          Y3,
          X3_C1,
          X3_C2,
          X3_C3,
          X3_C4,
          X3_C5,
          X3_C6,
          X3_C7,
          X3_C8,
          X3_C9,
          X3_C10,
          X3_C11,
          X3_C12,
          X3_C13,
          X3_C14,
          X3_C15,
          X3_C16,
          X3_C17,
          X3_C18,
          X3_C19,
          X3_C20,
          X3_C21
        )
      ): (X3_C1, X3_C2, X3_C3, X3_C4, X3_C5, X3_C6, X3_C7, X3_C8, X3_C9, X3_C10, X3_C11, X3_C12, X3_C13, X3_C14, X3_C15, X3_C16, X3_C17, X3_C18, X3_C19, X3_C20, X3_C21) =
        (z._2, z._3, z._4, z._5, z._6, z._7, z._8, z._9, z._10, z._11, z._12, z._13, z._14, z._15, z._16, z._17, z._18, z._19, z._20, z._21, z._22)
      final override def takeTail3(
        z: (
          Y3,
          X3_C1,
          X3_C2,
          X3_C3,
          X3_C4,
          X3_C5,
          X3_C6,
          X3_C7,
          X3_C8,
          X3_C9,
          X3_C10,
          X3_C11,
          X3_C12,
          X3_C13,
          X3_C14,
          X3_C15,
          X3_C16,
          X3_C17,
          X3_C18,
          X3_C19,
          X3_C20,
          X3_C21
        )
      ): Y3 = z._1
      final override def plus3(
        x: (X3_C1, X3_C2, X3_C3, X3_C4, X3_C5, X3_C6, X3_C7, X3_C8, X3_C9, X3_C10, X3_C11, X3_C12, X3_C13, X3_C14, X3_C15, X3_C16, X3_C17, X3_C18, X3_C19, X3_C20, X3_C21),
        y: Y3
      ): (
        Y3,
        X3_C1,
        X3_C2,
        X3_C3,
        X3_C4,
        X3_C5,
        X3_C6,
        X3_C7,
        X3_C8,
        X3_C9,
        X3_C10,
        X3_C11,
        X3_C12,
        X3_C13,
        X3_C14,
        X3_C15,
        X3_C16,
        X3_C17,
        X3_C18,
        X3_C19,
        X3_C20,
        X3_C21
      ) =
        (y, x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8, x._9, x._10, x._11, x._12, x._13, x._14, x._15, x._16, x._17, x._18, x._19, x._20, x._21)
      final override def takeHead4(
        z: (
          Y4,
          X4_C1,
          X4_C2,
          X4_C3,
          X4_C4,
          X4_C5,
          X4_C6,
          X4_C7,
          X4_C8,
          X4_C9,
          X4_C10,
          X4_C11,
          X4_C12,
          X4_C13,
          X4_C14,
          X4_C15,
          X4_C16,
          X4_C17,
          X4_C18,
          X4_C19,
          X4_C20,
          X4_C21
        )
      ): (X4_C1, X4_C2, X4_C3, X4_C4, X4_C5, X4_C6, X4_C7, X4_C8, X4_C9, X4_C10, X4_C11, X4_C12, X4_C13, X4_C14, X4_C15, X4_C16, X4_C17, X4_C18, X4_C19, X4_C20, X4_C21) =
        (z._2, z._3, z._4, z._5, z._6, z._7, z._8, z._9, z._10, z._11, z._12, z._13, z._14, z._15, z._16, z._17, z._18, z._19, z._20, z._21, z._22)
      final override def takeTail4(
        z: (
          Y4,
          X4_C1,
          X4_C2,
          X4_C3,
          X4_C4,
          X4_C5,
          X4_C6,
          X4_C7,
          X4_C8,
          X4_C9,
          X4_C10,
          X4_C11,
          X4_C12,
          X4_C13,
          X4_C14,
          X4_C15,
          X4_C16,
          X4_C17,
          X4_C18,
          X4_C19,
          X4_C20,
          X4_C21
        )
      ): Y4 = z._1
      final override def plus4(
        x: (X4_C1, X4_C2, X4_C3, X4_C4, X4_C5, X4_C6, X4_C7, X4_C8, X4_C9, X4_C10, X4_C11, X4_C12, X4_C13, X4_C14, X4_C15, X4_C16, X4_C17, X4_C18, X4_C19, X4_C20, X4_C21),
        y: Y4
      ): (
        Y4,
        X4_C1,
        X4_C2,
        X4_C3,
        X4_C4,
        X4_C5,
        X4_C6,
        X4_C7,
        X4_C8,
        X4_C9,
        X4_C10,
        X4_C11,
        X4_C12,
        X4_C13,
        X4_C14,
        X4_C15,
        X4_C16,
        X4_C17,
        X4_C18,
        X4_C19,
        X4_C20,
        X4_C21
      ) =
        (y, x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8, x._9, x._10, x._11, x._12, x._13, x._14, x._15, x._16, x._17, x._18, x._19, x._20, x._21)
    }
}
