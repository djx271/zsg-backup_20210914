@(maxAsunaTupleNum: Int, maxAsunaContext: Int)

package asuna.support

import scala.language.higherKinds

import asuna.TupleTag1
import asuna.TupleTag2

import asuna.AsunaTuple0
import asuna.AsunaTuple1
import asuna.AsunaTuple2

@for(i <- 1 to maxAsunaContext) {
import asuna.Application@{i}
import asuna.Plus@{i}
import asuna.Context@{i}
}

class TupleTag1ApplicationCompanion {

    @for(typeParamNum <- 1 to maxAsunaContext) {
        inline given tupleTagApplicationImplicit_tagNum1_typeParamNum@{typeParamNum}[
        F[_ @for(i <- 2 to typeParamNum) { , _ }],
        H1
        @for(ii <- 1 to typeParamNum) { , X1_C@{ii} }
        ](given
            t1: Application@{typeParamNum}[
            F,
            H1 @for(i <- 1 to typeParamNum) { , X1_C@{i} }]
        )
        : Application@{typeParamNum}[
        F,
        TupleTag1[H1] @for(i <- 1 to typeParamNum) { , AsunaTuple1[X1_C@{i}] }] = {
            new Application@{typeParamNum}[
                F,
                TupleTag1[H1] @for(i <- 1 to typeParamNum) { , AsunaTuple1[X1_C@{i}] }
            ] {
                override def application(context: Context@{typeParamNum}[F]): F[AsunaTuple1[X1_C1]
                @for(i <- 2 to typeParamNum) { , AsunaTuple1[X1_C@{i}] }] = {
                    @* @asuna.codegen.tuple.utils.txt.ContextAppend(max = tagNum)(currentItem = 1)(plusNum = typeParamNum) *@
                    context.append(context.start, t1.application(context))(Plus@{typeParamNum}.cachePlusWithTypeParameter0)
                }
            }
        }
    }

}

class TupleTag2ApplicationCompanion {

    @for(typeParamNum <- 1 to maxAsunaContext) {
        inline given tupleTagApplicationImplicit_tagNum2_typeParamNum@{typeParamNum}[
            F[_ @for(i <- 2 to typeParamNum) { , _ }],
            H1, H2
            @for(ii <- 1 to typeParamNum) { , X1_C@{ii} }
            @for(ii <- 1 to typeParamNum) { , X2_C@{ii} }
        ](given
        t1: Application@{typeParamNum}[
        F,
        H1 @for(i <- 1 to typeParamNum) { , X1_C@{i} }],
        t2: Application@{typeParamNum}[
        F,
        H2 @for(i <- 1 to typeParamNum) { , X2_C@{i} }])
        : Application@{typeParamNum}[
        F,
        TupleTag2[H1, H2] @for(i <- 1 to typeParamNum) { , AsunaTuple2[X1_C@{i}, X2_C@{i}] }] = {
            new Application@{typeParamNum}[
                F,
                TupleTag2[H1, H2] @for(i <- 1 to typeParamNum) { , AsunaTuple2[X1_C@{i}, X2_C@{i}] }
            ] {
                override def application(context: Context@{typeParamNum}[F]): F[AsunaTuple2[X1_C1, X2_C1]
                @for(i <- 2 to typeParamNum) { , AsunaTuple2[X1_C@{i}, X2_C@{i}] }] = {
                    context.append(t2.application(context), t1.application(context))(Plus@{typeParamNum}.cachePlusWithTypeParameter1)
                }
            }
        }
    }

}