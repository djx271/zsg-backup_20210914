@(tagNum: Int)

package asuna

@for(i <- 1 to tagNum) {
import asuna.support.TypeHListPlus@{i}
}

import impl._

final class TupleTag@{tagNum}[@for(ii <- 1 to tagNum){ T@{ii}, M@{ii} <: Message @if(ii < tagNum) { , } }] extends TupleTag {

    override final type M[M <: Message] = TupleTag@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii}, M :-<>-: M@{ii} @if(ii < tagNum) { , } }]

    def debug[K <: KindContext @for(ii <- 1 to tagNum) { , I@{ii} <: TypeHList }](c: Context[K])(implicit @for(ii <- 1 to tagNum) {
        dapp@{ii}: DebugItemApplication[K, T@{ii}, I@{ii}, M@{ii}] @if(ii < tagNum) { , }
        }): Application[K, TupleTag@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii}, M@{ii} @if(ii < tagNum) { , } }], TupleTypeHList@{tagNum}[@for(ii <- 1 to tagNum) { I@{ii} @if(ii < tagNum) { , } }]] =
    TupleTag@{tagNum}.tupleTagApplicationImplicit@{tagNum}(@for(ii <- 1 to tagNum) { dapp@{ii} @if(ii < tagNum) { , } })

}

final object TupleTag@{tagNum} {

    final implicit def tupleTagApplicationImplicit@{tagNum}[K <: KindContext @for(ii <- 1 to tagNum) { , H@{ii} }
    @for(ii <- 1 to tagNum) { , T@{ii} <: TypeHList }
    @for(ii <- 1 to tagNum) { , M@{ii} <: Message }]
    (implicit @for(ii <- 1 to tagNum) { t@{ii}: Application[K, H@{ii}, T@{ii}] @if(ii < tagNum) { , } })
    : Application[K, TupleTag@{tagNum}[@for(ii <- 1 to tagNum) { H@{ii}, M@{ii} @if(ii < tagNum) { , } }], TupleTypeHList@{tagNum}[@for(ii <- 1 to tagNum) { T@{ii} @if(ii < tagNum) { , } }]] =
    { context =>
        @asuna.codegen.tuple.utils.txt.ContextAppend2(max = tagNum)(currentItem = tagNum)
    }

}