@(tagNum: Int, maxTagNum: Int)

package asuna

import debug._

final class NodeTag@{tagNum}[T1 <: TupleTag @for(ii <- 2 to tagNum){ , T@{ii} <: TupleTag }] extends TupleTag {
    @for(ii <- 1 to tagNum) {
        def find@{ii}: T@{ii} = throw new Exception("Debuging...")
    }
    @for(contextIndex <- 1 to maxTagNum) {
        def debug[F[_ @for(_ <- 2 to contextIndex) { , _ }] @for(iii <- 1 to contextIndex) { @for(iiii <- 1 to tagNum) { , X@{iiii}_C@{iii} } }](c: Context@{contextIndex}[F])(implicit
        app1: asuna.debug.NodeDebugApplication@{contextIndex}[`The implicit not founded property's index is 1. Please change .debug(context@{contextIndex}) to .find1.debug(context@{contextIndex}) to continue.`,
        F, T1 @for(iii <- 1 to contextIndex) { , X1_C@{iii} }]
        @for(iiii <- 2 to tagNum) { , app@{iiii}: asuna.debug.NodeDebugApplication@{contextIndex}[`The implicit not founded property's index is @{iiii}. Please change .debug(context@{contextIndex}) to .find@{iiii}.debug(context@{contextIndex}) to continue.`,
        F , T@{iiii} @for(iii <- 1 to contextIndex) { , X@{iiii}_C@{iii} }] }):
        F[AsunaTuple@{tagNum}[X1_C1 @for(iii <- 2 to tagNum) { , X@{iii}_C1 }] @for(iiii <- 2 to contextIndex) { , AsunaTuple@{tagNum}[X1_C@{iiii} @for(iii <- 2 to tagNum) { , X@{iii}_C@{iiii} }] }] = {
            NodeTag@{tagNum}.noteTagApplicationImplicit_tagNum@{tagNum}_typeParamNum@{contextIndex}(app1 @for(iii <- 2 to tagNum) { , app@{iii} }).application(c)
        }
    }
}

final object NodeTag@{tagNum} extends support.NodeTag@{tagNum}ApplicationCompanion