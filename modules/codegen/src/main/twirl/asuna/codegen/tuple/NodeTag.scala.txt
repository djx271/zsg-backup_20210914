@(tagNum: Int, maxAsunaTupleNum: Int)

package asuna

import scala.language.higherKinds

import impl._

final class NodeTag@{tagNum}[T1 <: TupleTag @for(ii <- 2 to tagNum){ , T@{ii} <: TupleTag }] extends TupleTag

final object NodeTag@{tagNum} {

    @for(typeParamNum <- 1 to maxAsunaTupleNum) {
        final implicit def noteTagApplicationImplicit_tagNum@{tagNum}_typeParamNum@{typeParamNum}[
        F[_ @for(i <- 2 to typeParamNum) { , _ }]
        @for(ii <- 1 to tagNum) { , H@{ii} <: TupleTag }
        @for(i <- 1 to tagNum) {
            @for(ii <- 1 to typeParamNum) { , X@{i}_C@{ii} }
        }]
        (implicit
        t1: Application@{typeParamNum}[F, H1 @for(i <- 1 to typeParamNum) { , X1_C@{i} }]
        @for(ii <- 2 to tagNum) { , t@{ii}: Application@{typeParamNum}[F, H@{ii} @for(i <- 1 to typeParamNum) { , X@{ii}_C@{i} }] })
        : Application@{typeParamNum}[
        F,
        NodeTag@{tagNum}[H1 @for(ii <- 2 to tagNum) { , H@{ii} }] @for(i <- 1 to typeParamNum) { , AsunaTuple@{tagNum}[X1_C@{i} @for(ii <- 2 to tagNum) { , X@{ii}_C@{i} }] }] =
        { context: Context@{typeParamNum}[F] =>
            @asuna.codegen.tuple.utils.txt.ContextAppend(max = tagNum)(currentItem = 1)(plusNum = typeParamNum)
        }
    }

}