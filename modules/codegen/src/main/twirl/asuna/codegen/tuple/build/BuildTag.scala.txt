@(maxItem: Int)(isDotty: Boolean)(maxContextNum: Int)(maxPropertyNum: Int)

package asuna

object BuildTag {

    final @if(isDotty) { inline } def lift[T](tag : => AppendTag[T]): AppendTag[T] = AppendTag[T]

    @for(i <- 1 to maxItem) {
        final @if(isDotty) { inline } def tag[T1 @for(ii <- 2 to i) { , T@{ii} }](t1 : AppendTag[T1] @for(ii <- 2 to i) { , t@{ii} : AppendTag[T@{ii}] }):
        AppendTag[TupleTag@{i}[T1 @for(ii <- 2 to i) { , T@{ii} }]] =
            AppendTag[TupleTag@{i}[T1 @for(ii <- 2 to i) { , T@{ii} }]]

        final @if(isDotty) { inline } def nodeTag[T1 <: TupleTag @for(ii <- 2 to i) { , T@{ii} <: TupleTag }](t1: AppendTag[T1] @for(ii <- 2 to i) { , t@{ii} : AppendTag[T@{ii}] }):
        AppendTag[NodeTag@{i}[T1 @for(ii <- 2 to i) { , T@{ii}}]] =
            AppendTag[NodeTag@{i}[T1 @for(ii <- 2 to i) { , T@{ii} }]]

    }

    @for(i <- 2 to maxPropertyNum) {
        final @if(isDotty) { inline } def mergeTag[T1 <: TupleTag @for(ii <- 2 to i) { , T@{ii} <: TupleTag }, Target <: TupleTag](t1: AppendTag[T1] @for(ii <- 2 to i) { , t@{ii} : AppendTag[T@{ii}] })
            (implicit i: Merge@{i}[T1 @for(ii <- 2 to i) { , T@{ii} }, Target]): AppendTag[Target] = AppendTag[Target]
    }

    @for(i <- 1 to maxContextNum) {
        final @if(isDotty) { inline } def liftTag@{i}[F[@{(1 to i).map(_ => "_").mkString(" , ")}], Tag @{asuna.codegen.SnippetUtil.XI_Snippet(1 to i).mkString(", ", " , ", "")}](context: Context@{i}[F])(t1: AppendTag[Tag])
            (implicit app: Application@{i}[F, Tag @{asuna.codegen.SnippetUtil.XI_Snippet(1 to i).mkString(", ", " , ", "")}]): F[@{asuna.codegen.SnippetUtil.XI_Snippet(1 to i).mkString(" , ")}] =
            app.application(context)
    }

}