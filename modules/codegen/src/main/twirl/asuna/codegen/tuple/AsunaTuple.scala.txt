@(tagNum: Int)(maxAsunaTupleNum: Int, maxAsunaContext: Int)(isDotty: Boolean)

package asuna

final class AsunaTuple@{tagNum}[@{asuna.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString(" , ")}](@{asuna.codegen.SnippetUtil.II_Snippet(1 to tagNum).mkString(" , ")})

object AsunaTuple@{tagNum} {

    @if(tagNum == 1) {
        @for(typeParamNum <- 1 to maxAsunaContext) {
            @if(isDotty) { given } else { implicit def } tupleTagApplicationImplicit_tagNum1_typeParamNum@{typeParamNum}[F[_ @for(i <- 2 to typeParamNum) { , _ }] @for(ii <- 1 to typeParamNum) { , X1_C@{ii} }](@if(isDotty) { using } else { implicit } t1: Application@{typeParamNum}[F @for(i <- 1 to typeParamNum) { , X1_C@{i} }]
            ) @if(isDotty) { as } else { : } Application@{typeParamNum}[F @for(i <- 1 to typeParamNum) { , AsunaTuple1[X1_C@{i}] }] = {
                new Application@{typeParamNum}[F @for(i <- 1 to typeParamNum) { , AsunaTuple1[X1_C@{i}] }] {
                    override def application(context: Context@{typeParamNum}[F]): F[AsunaTuple1[X1_C1]
                    @for(i <- 2 to typeParamNum) { , AsunaTuple1[X1_C@{i}] }] = {
                        context.append(context.start, t1.application(context))(AsunaTuple1.cachePlus@{typeParamNum}WithTypeParameter0)
                    }
                }
            }
        }
    } else {
        @for(typeParamNum <- 1 to maxAsunaContext) {
            @if(isDotty) { given } else { implicit def } tupleTagApplicationImplicit_tagNum2_typeParamNum@{typeParamNum}[F[_ @for(i <- 2 to typeParamNum) { , _ }] @for(ii <- 1 to typeParamNum) { , X1_C@{ii} } @for(ii <- 1 to typeParamNum) { , X2_C@{ii} }](@if(isDotty) { using } else { implicit } t1: Application@{typeParamNum}[F @for(i <- 1 to typeParamNum) { , X1_C@{i} }], t2: Application@{typeParamNum}[F @for(i <- 1 to typeParamNum) { , X2_C@{i} }]
            ) @if(isDotty) { as } else { : } Application@{typeParamNum}[F @for(i <- 1 to typeParamNum) { , AsunaTuple2[X1_C@{i}, X2_C@{i}] }] = {
                new Application@{typeParamNum}[F @for(i <- 1 to typeParamNum) { , AsunaTuple2[X1_C@{i}, X2_C@{i}] }] {
                    override def application(context: Context@{typeParamNum}[F]): F[AsunaTuple2[X1_C1, X2_C1]
                    @for(i <- 2 to typeParamNum) { , AsunaTuple2[X1_C@{i}, X2_C@{i}] }] = {
                        context.append(t2.application(context), t1.application(context))(AsunaTuple2.cachePlus@{typeParamNum}WithTypeParameter1)
                    }
                }
            }
        }
    }

    @for(eachContextNum <- 1 to maxAsunaContext) {
        @if(tagNum == 1) {
            final def cachePlus@{eachContextNum}WithTypeParameter0Dynamic[@{asuna.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")}]: Plus@{eachContextNum}[
                @{asuna.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.AsunaTuple1_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ] = new Plus@{eachContextNum}[
                @{asuna.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.AsunaTuple1_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ] {
                @for(i <- 1 to eachContextNum) {
                    final override def takeHead@{i}(z: AsunaTuple1[Y@{i}]): AsunaTuple0 = AsunaTuple0.value
                    final override def takeTail@{i}(z: AsunaTuple1[Y@{i}]): Y@{i} = z.i1
                    final override def plus@{i}(x: AsunaTuple0, y: Y@{i}): AsunaTuple1[Y@{i}] = new AsunaTuple1(y)
                }
            }

            final val cachePlus@{eachContextNum}WithTypeParameter0Strict: Plus@{eachContextNum}[
                @{asuna.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.Any_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.AsunaTuple1_Any_Snippet(1 to eachContextNum).mkString(" , ")}
            ] = cachePlus@{eachContextNum}WithTypeParameter0Dynamic[@{asuna.codegen.SnippetUtil.Any_Snippet(1 to eachContextNum).mkString(" , ")}]

            final def cachePlus@{eachContextNum}WithTypeParameter0[@{asuna.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")}]: Plus@{eachContextNum}[
                @{asuna.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to eachContextNum).mkString("", " , ", ",")}
                @{asuna.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString("", " , ", ",")}
                @{asuna.codegen.SnippetUtil.AsunaTuple1_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ] = cachePlus@{eachContextNum}WithTypeParameter0Strict.asInstanceOf[Plus@{eachContextNum}[
                @{asuna.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to eachContextNum).mkString("", " , ", ",")}
                @{asuna.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString("", " , ", ",")}
                @{asuna.codegen.SnippetUtil.AsunaTuple1_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ]]
        } else {
            final def cachePlus@{eachContextNum}WithTypeParameter1Dynamic[
                @{asuna.codegen.SnippetUtil.XI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ]: Plus@{eachContextNum}[
                @{asuna.codegen.SnippetUtil.XI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.AsunaTuple2_XI_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ] = new Plus@{eachContextNum}[
                @{asuna.codegen.SnippetUtil.XI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.AsunaTuple2_XI_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ] {
                @for(i <- 1 to eachContextNum) {
                    final override def takeHead@{i}(z: AsunaTuple2[Y@{i}, X@{i}]): X@{i} = z.i2
                    final override def takeTail@{i}(z: AsunaTuple2[Y@{i}, X@{i}]): Y@{i} = z.i1
                    final override def plus@{i}(x: X@{i}, y: Y@{i}): AsunaTuple2[Y@{i}, X@{i}] = new AsunaTuple2(y, x)
                }
            }

            final val cachePlus@{eachContextNum}WithTypeParameter1Strict: Plus@{eachContextNum}[
                @{asuna.codegen.SnippetUtil.Any_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.Any_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.AsunaTuple2_Any_Any_Snippet(1 to eachContextNum).mkString(" , ")}
            ] = cachePlus@{eachContextNum}WithTypeParameter1Dynamic[
                @{asuna.codegen.SnippetUtil.Any_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.Any_Snippet(1 to eachContextNum).mkString(" , ")}
            ]

            final def cachePlus@{eachContextNum}WithTypeParameter1[
                @{asuna.codegen.SnippetUtil.XI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ]: Plus@{eachContextNum}[
                @{asuna.codegen.SnippetUtil.XI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.AsunaTuple2_XI_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ] = cachePlus@{eachContextNum}WithTypeParameter1Strict.asInstanceOf[Plus@{eachContextNum}[
                @{asuna.codegen.SnippetUtil.XI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{asuna.codegen.SnippetUtil.AsunaTuple2_XI_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ]]
        }
    }

}