@(maxItem: Int)(isDotty: Boolean)(maxContextNum: Int)(maxPropertyNum: Int)

package asuna

final class AppendTag[T] {
  type Tag = T
  def tag: T = throw new Exception("debuging...")
}

object AppendTag {
  final val tag                            = new AppendTag[Any]
  @if(isDotty) { inline } else { @@inline } final def apply[T]: AppendTag[T] = tag.asInstanceOf[AppendTag[T]]

  @if(isDotty) { inline } else { @@inline } final def lift[T](tag : => AppendTag[T]): AppendTag[T] = AppendTag[T]

  @for(i <- 1 to maxItem) {
      @if(isDotty) { inline } else { @@inline } final def tag[T1 @for(ii <- 2 to i) { , T@{ii} }](t1 : AppendTag[T1] @for(ii <- 2 to i) { , t@{ii} : AppendTag[T@{ii}] }): AppendTag[TupleTag@{i}[T1 @for(ii <- 2 to i) { , T@{ii} }]] = AppendTag[TupleTag@{i}[T1 @for(ii <- 2 to i) { , T@{ii} }]]
      @if(isDotty) { inline } else { @@inline } final def nodeTag[T1 <: TupleTag @for(ii <- 2 to i) { , T@{ii} <: TupleTag }](t1: AppendTag[T1] @for(ii <- 2 to i) { , t@{ii} : AppendTag[T@{ii}] }): AppendTag[NodeTag@{i}[T1 @for(ii <- 2 to i) { , T@{ii}}]] = AppendTag[NodeTag@{i}[T1 @for(ii <- 2 to i) { , T@{ii} }]]
  }

  @for(i <- 2 to maxPropertyNum) {
      @if(isDotty) { inline } else { @@inline } final def mergeTag[T1 <: TupleTag @for(ii <- 2 to i) { , T@{ii} <: TupleTag }, Target <: TupleTag](t1: AppendTag[T1] @for(ii <- 2 to i) { , t@{ii} : AppendTag[T@{ii}] })(@if(isDotty) { given } else { implicit } i: Merge@{i}[T1 @for(ii <- 2 to i) { , T@{ii} }, Target]): AppendTag[Target] = AppendTag[Target]
  }

  @for(i <- 1 to maxContextNum) {
      @if(isDotty) { inline } else { @@inline } final def liftTag[F[@{(1 to i).map(_ => "_").mkString(" , ")}], Tag @{asuna.codegen.SnippetUtil.XI_Snippet(1 to i).mkString(", ", " , ", "")}](context: Context@{i}[F])(t1: AppendTag[Tag])(@if(isDotty) { given } else { implicit } app: Application@{i}[F, Tag @{asuna.codegen.SnippetUtil.XI_Snippet(1 to i).mkString(", ", " , ", "")}]): F[@{asuna.codegen.SnippetUtil.XI_Snippet(1 to i).mkString(" , ")}] = app.application(context)
  }
}