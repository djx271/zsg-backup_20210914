@(tagNum: Int, maxAsunaTupleNum: Int)

package asuna

trait Plus@{tagNum}[X1 @for(i <- 2 to tagNum) { , X@{i} } @for(i <- 1 to tagNum) { , Y@{i} } @for(i <- 1 to tagNum) { , Z@{i} }] {
    @for(i <- 1 to tagNum) {
        def takeHead@{i}(z: Z@{i}): X@{i}
        def takeTail@{i}(z: Z@{i}): Y@{i}
        def plus@{i}(x: X@{i}, y: Y@{i}): Z@{i}
    }
}

final object Plus@{tagNum} {
    final def cachePlusWithTypeParameter0[X1_C1 @for(i <- 2 to tagNum) { , X@{i}_C1 }
    @for(i <- 1 to tagNum) { , Y@{i} } ]:
    Plus@{tagNum}[
        AsunaTuple0 @for(i <- 2 to tagNum) { , AsunaTuple0 }
        @for(i <- 1 to tagNum) { , Y@{i} }
        @for(i <- 1 to tagNum) { , AsunaTuple1[Y@{i}] }
    ] = new Plus@{tagNum}[
        AsunaTuple0 @for(i <- 2 to tagNum) { , AsunaTuple0 }
        @for(i <- 1 to tagNum) { , Y@{i} }
        @for(i <- 1 to tagNum) { , AsunaTuple1[Y@{i}] }
    ] {
        @for(i <- 1 to tagNum) {
            final override def takeHead@{i}(z: AsunaTuple1[Y@{i}]): AsunaTuple0 = z.tail
            final override def takeTail@{i}(z: AsunaTuple1[Y@{i}]): Y@{i} = z.head
            final override def plus@{i}(x: AsunaTuple0, y: Y@{i}): AsunaTuple1[Y@{i}] = x.::(y)
        }
    }

    private final val valPlusWithTypeParameter0: Plus@{tagNum}[
            AsunaTuple0 @for(i <- 2 to tagNum) { , AsunaTuple0 }
            @for(i <- 1 to tagNum) { , Any }
            @for(i <- 1 to tagNum) { , AsunaTuple1[Any] }
        ] = cachePlusWithTypeParameter0

    final def plusWithTypeParameter0[X1_C1 @for(i <- 2 to tagNum) { , X@{i}_C1 }
    @for(i <- 1 to tagNum) { , Y@{i} } ]:
    Plus@{tagNum}[
        AsunaTuple0 @for(i <- 2 to tagNum) { , AsunaTuple0 }
        @for(i <- 1 to tagNum) { , Y@{i} }
        @for(i <- 1 to tagNum) { , AsunaTuple1[Y@{i}] }
    ] = valPlusWithTypeParameter0.asInstanceOf[Plus@{tagNum}[
        AsunaTuple0 @for(i <- 2 to tagNum) { , AsunaTuple0 }
        @for(i <- 1 to tagNum) { , Y@{i} }
        @for(i <- 1 to tagNum) { , AsunaTuple1[Y@{i}] }
    ]]

    @for(caseClassNum <- 1 to (maxAsunaTupleNum - 1)) {
        final def cachePlusWithTypeParameter@{caseClassNum}[X1_C1 @for(i <- 2 to caseClassNum) { , X1_C@{i} }
        @for(i <- 2 to tagNum) { @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } }
        @for(i <- 1 to tagNum) { , Y@{i} } ]:
        Plus@{tagNum}[
            AsunaTuple@{caseClassNum}[X1_C1 @for(ii <- 2 to caseClassNum) { , X1_C@{ii} } ]
            @for(i <- 2 to tagNum) { , AsunaTuple@{caseClassNum}[X@{i}_C1 @for(ii <- 2 to caseClassNum) { , X@{i}_C@{ii} } ] }
            @for(i <- 1 to tagNum) { , Y@{i} }
            @for(i <- 1 to tagNum) { , AsunaTuple@{caseClassNum + 1}[Y@{i} @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } ] }
        ] = new Plus@{tagNum}[
            AsunaTuple@{caseClassNum}[X1_C1 @for(ii <- 2 to caseClassNum) { , X1_C@{ii} } ]
            @for(i <- 2 to tagNum) { , AsunaTuple@{caseClassNum}[X@{i}_C1 @for(ii <- 2 to caseClassNum) { , X@{i}_C@{ii} } ] }
            @for(i <- 1 to tagNum) { , Y@{i} }
            @for(i <- 1 to tagNum) { , AsunaTuple@{caseClassNum + 1}[Y@{i} @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } ] }
        ] {
            @for(i <- 1 to tagNum) {
                final override def takeHead@{i}(z: AsunaTuple@{caseClassNum + 1}[Y@{i} @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } ]): AsunaTuple@{caseClassNum}[X@{i}_C1 @for(ii <- 2 to caseClassNum) { , X@{i}_C@{ii} } ] = z.tail
                final override def takeTail@{i}(z: AsunaTuple@{caseClassNum + 1}[Y@{i} @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } ]): Y@{i} = z.head
                final override def plus@{i}(x: AsunaTuple@{caseClassNum}[X@{i}_C1 @for(ii <- 2 to caseClassNum) { , X@{i}_C@{ii} } ], y: Y@{i}): AsunaTuple@{caseClassNum + 1}[Y@{i} @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } ] = x.::(y)
            }
        }

        private final val valPlusWithTypeParameter@{caseClassNum}: Plus@{tagNum}[
            AsunaTuple@{caseClassNum}[Any @for(ii <- 2 to caseClassNum) { , Any } ]
            @for(i <- 2 to tagNum) { , AsunaTuple@{caseClassNum}[Any @for(ii <- 2 to caseClassNum) { , Any } ] }
            @for(i <- 1 to tagNum) { , Any }
            @for(i <- 1 to tagNum) { , AsunaTuple@{caseClassNum + 1}[Any @for(ii <- 1 to caseClassNum) { , Any } ] }
        ] = cachePlusWithTypeParameter@{caseClassNum}

        final def plusWithTypeParameter@{caseClassNum}[X1_C1 @for(i <- 2 to caseClassNum) { , X1_C@{i} }
            @for(i <- 2 to tagNum) { @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } }
            @for(i <- 1 to tagNum) { , Y@{i} } ]: Plus@{tagNum}[
            AsunaTuple@{caseClassNum}[X1_C1 @for(ii <- 2 to caseClassNum) { , X1_C@{ii} } ]
            @for(i <- 2 to tagNum) { , AsunaTuple@{caseClassNum}[X@{i}_C1 @for(ii <- 2 to caseClassNum) { , X@{i}_C@{ii} } ] }
            @for(i <- 1 to tagNum) { , Y@{i} }
            @for(i <- 1 to tagNum) { , AsunaTuple@{caseClassNum + 1}[Y@{i} @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } ] }
        ] = valPlusWithTypeParameter@{caseClassNum}.asInstanceOf[Plus@{tagNum}[
            AsunaTuple@{caseClassNum}[X1_C1 @for(ii <- 2 to caseClassNum) { , X1_C@{ii} } ]
            @for(i <- 2 to tagNum) { , AsunaTuple@{caseClassNum}[X@{i}_C1 @for(ii <- 2 to caseClassNum) { , X@{i}_C@{ii} } ] }
            @for(i <- 1 to tagNum) { , Y@{i} }
            @for(i <- 1 to tagNum) { , AsunaTuple@{caseClassNum + 1}[Y@{i} @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } ] }
        ]]

}
}