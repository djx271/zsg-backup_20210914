@(tagNum: Int, maxAsunaTupleNum: Int)

package asuna

abstract class Plus@{tagNum}[
    @{asuna.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString("", " , ", ",")}
    @{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString("", " , ", ",")}
    @{asuna.codegen.SnippetUtil.ZI_Snippet(1 to tagNum).mkString(" , ")}
] {
    @for(i <- 1 to tagNum) {
        def takeHead@{i}(z: Z@{i}): X@{i}
        def takeTail@{i}(z: Z@{i}): Y@{i}
        def plus@{i}(x: X@{i}, y: Y@{i}): Z@{i}
    }
}

object Plus@{tagNum} {
    final def cachePlusWithTypeParameter0Dynamic[@{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString(" , ")}]: Plus@{tagNum}[
        @{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.AsunaTuple1_YI_Snippet(1 to tagNum).mkString(" , ")}
    ] = new Plus@{tagNum}[
        @{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.AsunaTuple1_YI_Snippet(1 to tagNum).mkString(" , ")}
    ] {
        @for(i <- 1 to tagNum) {
            final override def takeHead@{i}(z: AsunaTuple1[Y@{i}]): Y@{i} = z.i1
            final override def takeTail@{i}(z: AsunaTuple1[Y@{i}]): AsunaTuple0 = AsunaTuple0.value
            final override def plus@{i}(y: Y@{i}, x: AsunaTuple0): AsunaTuple1[Y@{i}] = new AsunaTuple1(y)
        }
    }

    final val cachePlusWithTypeParameter0Strict: Plus@{tagNum}[
        @{asuna.codegen.SnippetUtil.Any_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.AsunaTuple1_Any_Snippet(1 to tagNum).mkString(" , ")}
    ] = cachePlusWithTypeParameter0Dynamic[@{asuna.codegen.SnippetUtil.Any_Snippet(1 to tagNum).mkString(" , ")}]

    final def cachePlusWithTypeParameter0[@{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString(" , ")}]: Plus@{tagNum}[
        @{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString("", " , ", ",")}
        @{asuna.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to tagNum).mkString("", " , ", ",")}
        @{asuna.codegen.SnippetUtil.AsunaTuple1_YI_Snippet(1 to tagNum).mkString(" , ")}
    ] = cachePlusWithTypeParameter0Strict.asInstanceOf[Plus@{tagNum}[
        @{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString("", " , ", ",")}
        @{asuna.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to tagNum).mkString("", " , ", ",")}
        @{asuna.codegen.SnippetUtil.AsunaTuple1_YI_Snippet(1 to tagNum).mkString(" , ")}
    ]]

    @* @for(caseClassNum <- 1 to (maxAsunaTupleNum - 1)) {
        final def cachePlusWithTypeParameter@{caseClassNum}[X1_C1 @for(i <- 2 to caseClassNum) { , X1_C@{i} }
        @for(i <- 2 to tagNum) { @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } }
        @for(i <- 1 to tagNum) { , Y@{i} } ]:
        Plus@{tagNum}[
            AsunaTuple@{caseClassNum}[X1_C1 @for(ii <- 2 to caseClassNum) { , X1_C@{ii} } ]
            @for(i <- 2 to tagNum) { , AsunaTuple@{caseClassNum}[X@{i}_C1 @for(ii <- 2 to caseClassNum) { , X@{i}_C@{ii} } ] }
            @for(i <- 1 to tagNum) { , Y@{i} }
            @for(i <- 1 to tagNum) { , AsunaTuple@{caseClassNum + 1}[Y@{i} @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } ] }
        ] = new Plus@{tagNum}[
            AsunaTuple@{caseClassNum}[X1_C1 @for(ii <- 2 to caseClassNum) { , X1_C@{ii} } ]
            @for(i <- 2 to tagNum) { , AsunaTuple@{caseClassNum}[X@{i}_C1 @for(ii <- 2 to caseClassNum) { , X@{i}_C@{ii} } ] }
            @for(i <- 1 to tagNum) { , Y@{i} }
            @for(i <- 1 to tagNum) { , AsunaTuple@{caseClassNum + 1}[Y@{i} @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } ] }
        ] {
            @for(i <- 1 to tagNum) {
                final override def takeHead@{i}(z: AsunaTuple@{caseClassNum + 1}[Y@{i} @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } ]): AsunaTuple@{caseClassNum}[X@{i}_C1 @for(ii <- 2 to caseClassNum) { , X@{i}_C@{ii} } ] = new AsunaTuple@{caseClassNum}(z.i2 @for(ii <- 3 to caseClassNum + 1) { , z.i@{ii} })
                final override def takeTail@{i}(z: AsunaTuple@{caseClassNum + 1}[Y@{i} @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } ]): Y@{i} = z.i1
                final override def plus@{i}(x: AsunaTuple@{caseClassNum}[X@{i}_C1 @for(ii <- 2 to caseClassNum) { , X@{i}_C@{ii} } ], y: Y@{i}): AsunaTuple@{caseClassNum + 1}[Y@{i} @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } ] = new AsunaTuple@{caseClassNum + 1}(y @for(ii <- 1 to caseClassNum) { , x.i@{ii} })
            }
        }
    } *@

    final def cachePlusWithTypeParameter1Dynamic[
        @{asuna.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString(" , ")}
    ]: Plus@{tagNum}[
        @{asuna.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.AsunaTuple2_XI_YI_Snippet(1 to tagNum).mkString(" , ")}
    ] = new Plus@{tagNum}[
        @{asuna.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.AsunaTuple2_XI_YI_Snippet(1 to tagNum).mkString(" , ")}
    ] {
        @for(i <- 1 to tagNum) {
            final override def takeHead@{i}(z: AsunaTuple2[Y@{i}, X@{i}]): X@{i} = z.i2
            final override def takeTail@{i}(z: AsunaTuple2[Y@{i}, X@{i}]): Y@{i} = z.i1
            final override def plus@{i}(x: X@{i}, y: Y@{i}): AsunaTuple2[Y@{i}, X@{i}] = new AsunaTuple2(y, x)
        }
    }

    final val cachePlusWithTypeParameter1Strict: Plus@{tagNum}[
        @{asuna.codegen.SnippetUtil.Any_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.Any_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.AsunaTuple2_Any_Any_Snippet(1 to tagNum).mkString(" , ")}
    ] = cachePlusWithTypeParameter1Dynamic[
        @{asuna.codegen.SnippetUtil.Any_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.Any_Snippet(1 to tagNum).mkString(" , ")}
    ]

    final def cachePlusWithTypeParameter1[
        @{asuna.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString(" , ")}
    ]: Plus@{tagNum}[
        @{asuna.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.AsunaTuple2_XI_YI_Snippet(1 to tagNum).mkString(" , ")}
    ] = cachePlusWithTypeParameter1Strict.asInstanceOf[Plus@{tagNum}[
        @{asuna.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString(" , ")},
        @{asuna.codegen.SnippetUtil.AsunaTuple2_XI_YI_Snippet(1 to tagNum).mkString(" , ")}
    ]]

}