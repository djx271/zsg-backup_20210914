@(tagNum: Int)

package asuna

import scala.language.higherKinds

abstract class Context@{tagNum}[F[_ @for(i <- 2 to tagNum) { , _ }]] {

    def append[
        @{asuna.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString("", " , ", ",")}
        @{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString("", " , ", ",")}
        @{asuna.codegen.SnippetUtil.ZI_Snippet(1 to tagNum).mkString(" , ")}
    ](
        x: F[@{asuna.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString(" , ")}],
        y: F[@{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString(" , ")}]
    )(p: Plus@{tagNum}[
        @{asuna.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString("", " , ", ",")}
        @{asuna.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString("", " , ", ",")}
        @{asuna.codegen.SnippetUtil.ZI_Snippet(1 to tagNum).mkString(" , ")}
    ]): F[@{asuna.codegen.SnippetUtil.ZI_Snippet(1 to tagNum).mkString(" , ")}]

    def start: F[@{asuna.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to tagNum).mkString(" , ")}]

}