@(maxAsunaTupleNum: Int, maxAsunaContext: Int)

package asuna.support

import scala.language.higherKinds

import asuna.TupleTag@{tagNum}

import asuna.AsunaTuple1
import asuna.AsunaTuple2

@for(i <- 1 to maxAsunaContext) {
import asuna.Application@{i}
import asuna.Plus@{i}
import asuna.Context@{i}
}

class TupleTag@{tagNum}ApplicationCompanion {

    @*
    @for(typeParamNum <- 1 to maxAsunaContext) {
        final implicit def tupleTagApplicationImplicit_tagNum@{tagNum}_typeParamNum@{typeParamNum}[
        F[_ @for(i <- 2 to typeParamNum) { , _ }]
        @for(ii <- 1 to tagNum) { , H@{ii} }
        @for(i <- 1 to tagNum) {
            @for(ii <- 1 to typeParamNum) { , X@{i}_C@{ii} }
        }]
        (implicit
        t1: Application@{typeParamNum}[F, H1 @for(i <- 1 to typeParamNum) { , X1_C@{i} }]
        @for(ii <- 2 to tagNum) { , t@{ii}: Application@{typeParamNum}[F, H@{ii} @for(i <- 1 to typeParamNum) { , X@{ii}_C@{i} }] })
        : Application@{typeParamNum}[
        F,
        TupleTag@{tagNum}[H1 @for(ii <- 2 to tagNum) { , H@{ii} }] @for(i <- 1 to typeParamNum) { , AsunaTuple@{tagNum}[X1_C@{i} @for(ii <- 2 to tagNum) { , X@{ii}_C@{i} }] }] = {

            val plus@{typeParamNum}_parameter0: Plus@{typeParamNum}[
                AsunaTuple0
                @for(iiii <- 2 to typeParamNum) { , AsunaTuple0 }
                @for(iiii <- 1 to typeParamNum) { , X1_C@{iiii} }
                @for(iiii <- 1 to typeParamNum) { , AsunaTuple1[X@{tagNum}_C@{iiii}] }
                ] = Plus@{typeParamNum}.cachePlusWithTypeParameter0

            @for(ii <- 1 to tagNum - 1) {
                val plus@{typeParamNum}_parameter@{ii}: Plus@{typeParamNum}[
                AsunaTuple@{ii}[X@{tagNum - ii + 1}_C1 @for(iii <- (tagNum - ii + 2) to tagNum) { , X@{iii}_C1 }]
                @for(iiii <- 2 to typeParamNum) { , AsunaTuple@{ii}[X@{tagNum - ii + 1}_C@{iiii} @for(iii <- (tagNum - ii + 2) to tagNum) { , X@{iii}_C@{iiii} }] }
                @for(iiii <- 1 to typeParamNum) { , X@{tagNum - ii}_C@{iiii} }
                @for(iiii <- 1 to typeParamNum) { , AsunaTuple@{ii + 1}[X@{tagNum - ii}_C@{iiii} @for(iii <- (tagNum - ii + 1) to tagNum) { , X@{iii}_C@{iiii} }] }
                ] = Plus@{typeParamNum}.cachePlusWithTypeParameter@{ii}
            }

            new Application@{typeParamNum}[
            F,
            TupleTag@{tagNum}[H1 @for(ii <- 2 to tagNum) { , H@{ii} }] @for(i <- 1 to typeParamNum) { , AsunaTuple@{tagNum}[X1_C@{i} @for(ii <- 2 to tagNum) { , X@{ii}_C@{i} }] }]
            {
                override def application(context: Context@{typeParamNum}[F]): F[AsunaTuple@{tagNum}[X1_C1 @for(ii <- 2 to tagNum) { , X@{ii}_C1 }]
                @for(i <- 2 to typeParamNum) { , AsunaTuple@{tagNum}[X1_C@{i} @for(ii <- 2 to tagNum) { , X@{ii}_C@{i} }] }] = {
                    @asuna.codegen.tuple.utils.txt.ContextAppend(max = tagNum)(currentItem = 1)(plusNum = typeParamNum)
                }
            }
        }
    }
    *@

    @for(typeParamNum <- 1 to maxAsunaContext) {
        final implicit def tupleTagApplicationImplicit_tagNum1_typeParamNum@{typeParamNum}[
        F[_ @for(i <- 2 to typeParamNum) { , _ }],
        H1
        @for(ii <- 1 to typeParamNum) { , X1_C@{ii} }
        ](implicit
        t1: Application@{typeParamNum}[
        F,
        TupleTag@{tagNum}[H1] @for(i <- 1 to typeParamNum) { , AsunaTuple1[X1_C@{i}] }])
        : Application@{typeParamNum}[
        F,
        TupleTag@{tagNum}[H1] , AsunaTuple@{tagNum}[X1_C1]] = {

            val plus@{typeParamNum}_parameter0: Plus@{typeParamNum}[
                AsunaTuple0
                @for(iiii <- 2 to typeParamNum) { , AsunaTuple0 }
                @for(iiii <- 1 to typeParamNum) { , X@{tagNum}_C@{iiii} }
                @for(iiii <- 1 to typeParamNum) { , AsunaTuple1[X@{tagNum}_C@{iiii}] }
                ] = Plus@{typeParamNum}.cachePlusWithTypeParameter0

            new Application@{typeParamNum}[
            F,
            TupleTag@{tagNum}[H1] @for(i <- 1 to typeParamNum) { , AsunaTuple@{tagNum}[X@{i}_C1] }]
            {
                override def application(context: Context@{typeParamNum}[F]): F[AsunaTuple@{tagNum}[X1_C1 @for(ii <- 2 to tagNum) { , X@{ii}_C1 }]
                @for(i <- 2 to typeParamNum) { , AsunaTuple@{tagNum}[X1_C@{i} @for(ii <- 2 to tagNum) { , X@{ii}_C@{i} }] }] = {
                    @* @asuna.codegen.tuple.utils.txt.ContextAppend(max = tagNum)(currentItem = 1)(plusNum = typeParamNum) *@
                    context.append(t1, context.start)(plus@{typeParamNum}_parameter0)
                }
            }
        }
    }

    @for(typeParamNum <- 1 to maxAsunaContext) {
        implicit final def tupleTagApplicationImplicit_tagNum2_typeParamNum@{typeParamNum}[
            F[_ @for(i <- 2 to typeParamNum) { , _ }],
            H1, H2
            @for(ii <- 1 to typeParamNum) { , X1_C@{ii} }
            @for(ii <- 1 to typeParamNum) { , X2_C@{ii} }
        ](implicit
        t1: Application@{typeParamNum}[
        F,
        TupleTag2[H1, H2] @for(i <- 1 to typeParamNum) { , AsunaTuple2[X1_C@{i}, X2_C@{i}] }])
        : Application@{typeParamNum}[
        F,
        TupleTag@{tagNum}[H1] , AsunaTuple@{tagNum}[X1_C1]] = {
            val plus@{typeParamNum}_parameter1: Plus@{typeParamNum}[
                X1_C1
                @for(iiii <- 2 to typeParamNum) { , X1_C@{iiii} }
                @for(iiii <- 1 to typeParamNum) { , X2_C@{iiii} }
                @for(iiii <- 1 to typeParamNum) { , AsunaTuple2[X1_C@{iiii}, X2_C@{iiii}] }
            ] = Plus@{typeParamNum}.cachePlusWithTypeParameter1

            new Application@{typeParamNum}[
            F,
            TupleTag2[H1, H2] @for(i <- 1 to typeParamNum) { , AsunaTuple2[X1_C@{i}, X2_C@{i}] }]
            {
                override def application(context: Context@{typeParamNum}[F]): F[AsunaTuple@{tagNum}[X1_C1 @for(ii <- 2 to tagNum) { , X@{ii}_C1 }]
                @for(i <- 2 to typeParamNum) { , AsunaTuple@{tagNum}[X1_C@{i} @for(ii <- 2 to tagNum) { , X@{ii}_C@{i} }] }] = {
                    @* @asuna.codegen.tuple.utils.txt.ContextAppend(max = tagNum)(currentItem = 1)(plusNum = typeParamNum) *@
                    context.append(t2, t1)(plus@{typeParamNum}_parameter1)
                }
            }
        }
    }

}