@(tagNum: Int, caseClassNum: Int)

package asuna.scala_tuple.tuple_support

@* import asuna.Plus@{tagNum}

import asuna.support.heterogeneous._ *@

trait HListPlus_@{caseClassNum}_@{tagNum} @* {

    @if(caseClassNum == 0) {
        final def plusWithTypeParameter0[Y1 @for(i <- 2 to tagNum) { , Y@{i} } ]:
        Plus@{tagNum}[
            asuna.AsunaTuple0 @for(i <- 2 to tagNum) { , asuna.AsunaTuple0 }
            @for(i <- 1 to tagNum) { , Y@{i} }
            @for(i <- 1 to tagNum) { , Y@{i} :: HNil }
        ] = new Plus@{tagNum}[
            asuna.AsunaTuple0 @for(i <- 2 to tagNum) { , asuna.AsunaTuple0 }
            @for(i <- 1 to tagNum) { , Y@{i} }
            @for(i <- 1 to tagNum) { , Y@{i} :: HNil }
        ] {
            @for(i <- 1 to tagNum) {
                final override def takeHead@{i}(z: Y@{i} :: HNil): asuna.AsunaTuple0 = asuna.AsunaTuple0.value
                final override def takeTail@{i}(z: Y@{i} :: HNil): Y@{i} = z.head
                final override def plus@{i}(x: asuna.AsunaTuple0, y: Y@{i}): Y@{i} :: HNil = y :: HNil.value
            }
        }
    } else {
        final def plusWithTypeParameter@{caseClassNum}[X1_C1 @for(i <- 2 to caseClassNum) { , X1_C@{i} }
        @for(i <- 2 to tagNum) { @for(ii <- 1 to caseClassNum) { , X@{i}_C@{ii} } }
        @for(i <- 1 to tagNum) { , Y@{i} } ]:
        Plus@{tagNum}[
            @for(ii <- 1 to caseClassNum) { X1_C@{ii} :: } HNil
            @for(i <- 2 to tagNum) { , @for(ii <- 1 to caseClassNum) { X@{i}_C@{ii} :: } HNil }
            @for(i <- 1 to tagNum) { , Y@{i} }
            @for(i <- 1 to tagNum) { , Y@{i} :: @for(ii <- 1 to caseClassNum) { X@{i}_C@{ii} :: } HNil }
        ] = new Plus@{tagNum}[
            @for(ii <- 1 to caseClassNum) { X1_C@{ii} :: } HNil
            @for(i <- 2 to tagNum) { , @for(ii <- 1 to caseClassNum) { X@{i}_C@{ii} :: } HNil }
            @for(i <- 1 to tagNum) { , Y@{i} }
            @for(i <- 1 to tagNum) { , Y@{i} :: @for(ii <- 1 to caseClassNum) { X@{i}_C@{ii} :: } HNil }
        ] {
            @for(i <- 1 to tagNum) {
                final override def takeHead@{i}(z: Y@{i} :: @for(ii <- 1 to caseClassNum) { X@{i}_C@{ii} :: } HNil): @for(ii <- 1 to caseClassNum) { X@{i}_C@{ii} :: } HNil = z.tail
                final override def takeTail@{i}(z: Y@{i} :: @for(ii <- 1 to caseClassNum) { X@{i}_C@{ii} :: } HNil): Y@{i} = z.head
                final override def plus@{i}(x: @for(ii <- 1 to caseClassNum) { X@{i}_C@{ii} :: } HNil, y: Y@{i}): Y@{i} :: @for(ii <- 1 to caseClassNum) { X@{i}_C@{ii} :: } HNil = x.::(y)
            }
        }
    }

} *@