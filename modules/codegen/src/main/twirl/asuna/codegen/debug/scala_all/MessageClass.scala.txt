@(maxContextIndex: Int, maxPropertyNum: Int)

package asuna.message

@for(contextIndex <- 1 to maxContextIndex) {
    @for(nodeIndex <- 1 to maxPropertyNum) {
        class `The implicit not founded property's index is @{nodeIndex}. Please change findX(context@{contextIndex}) to .findX.find@{nodeIndex}(context@{contextIndex}) to continue debug.`
    }

    @@scala.annotation.implicitNotFound(msg = "${Message}")
    trait NodeDebugApplication@{contextIndex}[Message, F[_ @for(_ <- 2 to contextIndex) { , _ }], Tag @for(i <- 1 to contextIndex) { , X@{i} }] extends asuna.Application@{contextIndex}[F, Tag @for(i <- 1 to contextIndex) { , X@{i} }] {
        override def application(context: asuna.Context@{contextIndex}[F]): F[X1 @for(i <- 2 to contextIndex) { , X@{i} }]
    }

    object NodeDebugApplication@{contextIndex} {
        implicit def nodeDebugApplication@{contextIndex}Implicit[Message, F[_ @for(_ <- 2 to contextIndex) { , _ }], Tag @for(i <- 1 to contextIndex) { , X@{i} }](implicit app: asuna.Application@{contextIndex}[F, Tag @for(i <- 1 to contextIndex) { , X@{i} }]): NodeDebugApplication@{contextIndex}[Message, F, Tag @for(i <- 1 to contextIndex) { , X@{i} }] = {
            new NodeDebugApplication@{contextIndex}[Message, F, Tag @for(i <- 1 to contextIndex) { , X@{i} }] {
                override def application(context: asuna.Context@{contextIndex}[F]): F[X1 @for(i <- 2 to contextIndex) { , X@{i} }] = app.application(context)
            }
        }
    }
}