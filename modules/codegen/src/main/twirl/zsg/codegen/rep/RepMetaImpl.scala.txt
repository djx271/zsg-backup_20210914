@(contextNum: Int)(maxZTupleNum: Int)

package zsg.rep.impl

class RepMetaImpl@{contextNum}[@for(i <- 1 to contextNum) { @if(i > 1) { , } T@{i} }](@for(i <- 1 to contextNum) { @if(i > 1) { , } override val rep@{i}: T@{i} }) extends zsg.rep.RepMeta@{contextNum}(@for(i <- 1 to contextNum) { @if(i > 1) { , } rep@{i} = rep@{i} }) {
    @for(i <- 1 to maxZTupleNum) {
        override def rep[@for(ii <- 1 to i) { @if(ii > 1) { , } Tu@{ii} }
            @for(ii <- 1 to i) {
                @for(iii <- 1 to contextNum) {
                    , Out_@{ii}_@{iii}
                }
            }
        ](@if(i == 1) {
            tuple: Tu1
        } else {
            tuple: Tuple@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } Tu@{ii} }]
        })(implicit
            @for(ii <- 1 to i) {
                @for(iii <- 1 to contextNum) {
                    @if(ii == 1) {
                        @if(iii > 1) { , } repFunction_@{iii}_@{ii}: zsg.rep.RepFunction[T@{iii}, Tu@{ii}, Out_@{ii}_@{iii}]
                    } else {
                        , repFunction_@{iii}_@{ii}: zsg.rep.RepFunction[Out_@{ii - 1}_@{iii}, Tu@{ii}, Out_@{ii}_@{iii}]
                    }
                }
            }
        ): zsg.rep.RepMeta@{contextNum}[@for(iii <- 1 to contextNum) { @if(iii > 1) { , } Out_@{i}_@{iii} }] = {
            @if(i == 1) {
                @for(iii <- 1 to contextNum) {
                    val i@{iii} = repFunction_@{iii}_1.function(rep@{iii}, tuple)
                }
            } else {
                @for(iii <- 1 to contextNum) {
                    val i@{iii} = @for(ii <- i to 1 by - 1) { repFunction_@{iii}_@{ii}.function( } rep@{iii} @for(ii <- 1 to i) { , tuple._@{ii}) }
                }
            }
            new RepMetaImpl@{contextNum}(@for(ii <- 1 to contextNum) { @if(ii > 1) { , } rep@{ii} = i@{ii} })
        }
    }
}