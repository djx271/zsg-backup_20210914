@(ZTupleNum: Int, maxContextNum: Int)(isDotty: Boolean)
package zsg

@Plus1Name(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } ZsgTuple0 } @for(ii <- 1 to contextCount) { , I@{ii} }  @for(ii <- 1 to contextCount) { , ZTuple@{tupleNum}[I@{ii}] }] }
@Plus1NameAny(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } ZsgTuple0 } @for(ii <- 1 to contextCount) { , Any }  @for(ii <- 1 to contextCount) { , ZTuple@{tupleNum}[Any] }] }

@* @Plus2Name(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } K@{ii} } @for(ii <- 1 to contextCount) { , I@{ii} }  @for(ii <- 1 to contextCount) { , ZTuple@{tupleNum}[K@{ii}, I@{ii}] }] } *@
@* @Plus2NameAny(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } Any } @for(ii <- 1 to contextCount) { , Any }  @for(ii <- 1 to contextCount) { , ZTuple@{tupleNum}[Any, Any] }] } *@

@NodePlus1Name(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } ZsgTuple0 } @for(ii <- 1 to contextCount) { , I@{ii} }  @for(ii <- 1 to contextCount) { , ZNode@{tupleNum}[I@{ii}] }] }
@NodePlus1NameAny(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } ZsgTuple0 } @for(ii <- 1 to contextCount) { , TupleTag }  @for(ii <- 1 to contextCount) { , ZNode@{tupleNum}[TupleTag] }] }

@* @NodePlus2Name(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } K@{ii} } @for(ii <- 1 to contextCount) { , I@{ii} }  @for(ii <- 1 to contextCount) { , ZNode@{tupleNum}[K@{ii}, I@{ii}] }] } *@
@* @NodePlus2NameAny(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } TupleTag } @for(ii <- 1 to contextCount) { , TupleTag }  @for(ii <- 1 to contextCount) { , ZNode@{tupleNum}[TupleTag, TupleTag] }] } *@

@PlusNName(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } HighTupleAlias@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} } ] } @for(ii <- 1 to contextCount) { , I@{ii} }  @for(ii <- 1 to contextCount) { , ZTuple@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }, I@{ii}] }] }
@PlusNNameAny(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } HighTupleAlias@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } Any } ] } @for(ii <- 1 to contextCount) { , Any }  @for(ii <- 1 to contextCount) { , ZTuple@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } Any }, Any ] }] }

@NodePlusNName(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } HighTupleAlias@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} } ] } @for(ii <- 1 to contextCount) { , I@{ii} }  @for(ii <- 1 to contextCount) { , ZNode@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }, I@{ii}] }] }
@NodePlusNNameAny(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } HighTupleAlias@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } TupleTag } ] } @for(ii <- 1 to contextCount) { , TupleTag }  @for(ii <- 1 to contextCount) { , ZNode@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } TupleTag }, TupleTag ] }] }

object PlusInstanceTuple@{ZTupleNum} {
    @if(ZTupleNum == 1) {
        @for(i <- 1 to maxContextNum) {
            def pContextNum@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } I@{ii} }]: @Plus1Name(contextCount = i, tupleNum = ZTupleNum) =  new @Plus1Name(contextCount = i, tupleNum = ZTupleNum) @* *@ {
                @for(ii <- 1 to i) {
                    override def takeHead@{ii}(n: ZTuple@{ZTupleNum}[I@{ii}]): ZsgTuple0 = ZsgTuple0.value
                }
                @for(ii <- 1 to i) {
                    override def takeTail@{ii}(n: ZTuple@{ZTupleNum}[I@{ii}]): I@{ii} = n.i1
                }
                @for(ii <- 1 to i) {
                    override def plus@{ii}(m: ZsgTuple0, n: I@{ii}): ZTuple@{ZTupleNum}[I@{ii}] = new ZTuple@{ZTupleNum}(n)
                }
            }
            val cacheContextNum@{i}: @Plus1NameAny(contextCount = i, tupleNum = ZTupleNum) = pContextNum@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } Any }]
            def contextNum@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } I@{ii} }]: @Plus1Name(contextCount = i, tupleNum = ZTupleNum) = cacheContextNum@{i}.asInstanceOf[@Plus1Name(contextCount = i, tupleNum = ZTupleNum)]
        }
    } else {
        type HighTupleAlias@{ZTupleNum}[@for(ii <- 1 to ZTupleNum - 1) { @if(ii > 1) { , } I@{ii} }] = @{zsg.codegen.JinzhiTree.treeToType(ZTupleNum - 1)}
        type HighTupleAliasUpper@{ZTupleNum}[@for(ii <- 1 to ZTupleNum) { @if(ii > 1) { , } I@{ii} }] = @{zsg.codegen.JinzhiTree.treeToType(ZTupleNum)}
        @for(i <- 1 to maxContextNum) {
            class PContextNum@{i}[
                @for(ii <- 1 to i) {
                    @if(ii > 1) { , }
                    @for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }
                }
                @for(ii <- 1 to i) {
                    , I@{ii}
                }
            ] extends @PlusNName(contextCount = i, tupleNum = ZTupleNum) @* *@ {
                @for(ii <- 1 to i) {
                    @if(isDotty) { inline } override def takeHead@{ii}(n: ZTuple@{ZTupleNum}[@for(iii <- 1 to ZTupleNum - 1) { Tuple@{iii}_Context@{ii} , } I@{ii}]): HighTupleAlias@{ZTupleNum}[@for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }] = @{zsg.codegen.JinzhiTree.treeBuildModel(ZTupleNum - 1)}
                }
                @for(ii <- 1 to i) {
                    @if(isDotty) { inline } override def takeTail@{ii}(n: ZTuple@{ZTupleNum}[@for(iii <- 1 to ZTupleNum - 1) { Tuple@{iii}_Context@{ii} , } I@{ii}]): I@{ii} = n.i@{ZTupleNum}
                }
                @for(ii <- 1 to i) {
                    @if(isDotty) { inline } override def plus@{ii}(m: HighTupleAlias@{ZTupleNum}[@for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }], n: I@{ii}): ZTuple@{ZTupleNum}[@for(iii <- 1 to ZTupleNum - 1) { Tuple@{iii}_Context@{ii} , } I@{ii}] = @{zsg.codegen.JinzhiTree.treeIndex(i = ZTupleNum, className = "ZTuple" + ZTupleNum)}
                }
            }
            val cacheContextNum@{i}: PContextNum@{i}[@for(ii <- 1 to i * ZTupleNum) { @if(ii > 1) { , } Any }] = new PContextNum@{i}[@for(ii <- 1 to i * ZTupleNum) { @if(ii > 1) { , } Any }]
            def contextNum@{i}[@for(ii <- 1 to i) {
                @if(ii > 1) { , }
                    @for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }
                }
                @for(ii <- 1 to i) {
                    , I@{ii}
            }]: PContextNum@{i}[
                @for(ii <- 1 to i) {
                    @if(ii > 1) { , }
                    @for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }
                }
                @for(ii <- 1 to i) {
                    , I@{ii}
                }
            ] = cacheContextNum@{i}.asInstanceOf[PContextNum@{i}[
                @for(ii <- 1 to i) {
                    @if(ii > 1) { , }
                    @for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }
                }
                @for(ii <- 1 to i) {
                    , I@{ii}
                }
            ]]
        }
    }

    @if(ZTupleNum == 1) {
        @for(i <- 1 to maxContextNum) {
            def pNodeContextNum@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } I@{ii} <: TupleTag }]: @NodePlus1Name(contextCount = i, tupleNum = ZTupleNum) =  new @NodePlus1Name(contextCount = i, tupleNum = ZTupleNum) @* *@ {
                @for(ii <- 1 to i) {
                    override def takeHead@{ii}(n: ZNode@{ZTupleNum}[I@{ii}]): ZsgTuple0 = ZsgTuple0.value
                }
                @for(ii <- 1 to i) {
                    override def takeTail@{ii}(n: ZNode@{ZTupleNum}[I@{ii}]): I@{ii} = n.i1
                }
                @for(ii <- 1 to i) {
                    override def plus@{ii}(m: ZsgTuple0, n: I@{ii}): ZNode@{ZTupleNum}[I@{ii}] = new ZNode@{ZTupleNum}(i1 = n)
                }
            }
            val cacheNodeContextNum@{i}: @NodePlus1NameAny(contextCount = i, tupleNum = ZTupleNum) = pNodeContextNum@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } TupleTag }]
            def nodeContextNum@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } I@{ii} <: TupleTag }]: @NodePlus1Name(contextCount = i, tupleNum = ZTupleNum) = cacheNodeContextNum@{i}.asInstanceOf[@NodePlus1Name(contextCount = i, tupleNum = ZTupleNum)]
        }
    } else {
        type NodeHighTupleAlias@{ZTupleNum}[@for(ii <- 1 to ZTupleNum - 1) { @if(ii > 1) { , } I@{ii} <: TupleTag }] = @{zsg.codegen.JinzhiTree.treeToType(ZTupleNum - 1)}
        type NodeHighTupleAliasUpper@{ZTupleNum}[@for(ii <- 1 to ZTupleNum) { @if(ii > 1) { , } I@{ii} <: TupleTag }] = @{zsg.codegen.JinzhiTree.treeToType(ZTupleNum)}
        @for(i <- 1 to maxContextNum) {
            class PNodeContextNum@{i}[
                @for(ii <- 1 to i) {
                    @if(ii > 1) { , }
                    @for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} <: TupleTag }
                }
                @for(ii <- 1 to i) {
                    , I@{ii} <: TupleTag
                }
            ] extends @NodePlusNName(contextCount = i, tupleNum = ZTupleNum) @* *@ {
                @for(ii <- 1 to i) {
                    @if(isDotty) { inline } override def takeHead@{ii}(n: ZNode@{ZTupleNum}[@for(iii <- 1 to ZTupleNum - 1) { Tuple@{iii}_Context@{ii} , } I@{ii}]): NodeHighTupleAlias@{ZTupleNum}[@for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }] = @{zsg.codegen.JinzhiTree.treeBuildModel(ZTupleNum - 1)}
                }
                @for(ii <- 1 to i) {
                    @if(isDotty) { inline } override def takeTail@{ii}(n: ZNode@{ZTupleNum}[@for(iii <- 1 to ZTupleNum - 1) { Tuple@{iii}_Context@{ii} , } I@{ii}]): I@{ii} = n.i@{ZTupleNum}
                }
                @for(ii <- 1 to i) {
                    @if(isDotty) { inline } override def plus@{ii}(m: NodeHighTupleAlias@{ZTupleNum}[@for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }], n: I@{ii}): ZNode@{ZTupleNum}[@for(iii <- 1 to ZTupleNum - 1) { Tuple@{iii}_Context@{ii} , } I@{ii}] = @{zsg.codegen.JinzhiTree.treeIndex(i = ZTupleNum, className = "ZNode" + ZTupleNum)}
                }
            }
            val cacheNodeContextNum@{i}: PNodeContextNum@{i}[@for(ii <- 1 to i * ZTupleNum) { @if(ii > 1) { , } TupleTag }] = new PNodeContextNum@{i}[@for(ii <- 1 to i * ZTupleNum) { @if(ii > 1) { , } TupleTag }]
            def nodeContextNum@{i}[@for(ii <- 1 to i) {
                @if(ii > 1) { , }
                    @for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} <: TupleTag }
                }
                @for(ii <- 1 to i) {
                    , I@{ii} <: TupleTag
            }]: PNodeContextNum@{i}[
                @for(ii <- 1 to i) {
                    @if(ii > 1) { , }
                    @for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }
                }
                @for(ii <- 1 to i) {
                    , I@{ii}
                }
            ] = cacheNodeContextNum@{i}.asInstanceOf[PNodeContextNum@{i}[
                @for(ii <- 1 to i) {
                    @if(ii > 1) { , }
                    @for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }
                }
                @for(ii <- 1 to i) {
                    , I@{ii}
                }
            ]]
        }
    }

}