@(tagNum: Int)(maxAsunaTupleNum: Int, maxAsunaContext: Int)(isDotty: Boolean)

package zsg

final class ZsgTuple@{tagNum}[@{zsg.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString(" , ")}](@{zsg.codegen.SnippetUtil.II_Snippet(1 to tagNum).mkString(" , ")}) extends TupleTag

object ZsgTuple@{tagNum} {

    @if(tagNum == 1) {
        @for(typeParamNum <- 1 to maxAsunaContext) {
            @if(isDotty) { given } else { implicit def tupleTagApplicationImplicit_tagNum1_typeParamNum@{typeParamNum} } [F[@for(i <- 1 to typeParamNum) { @if(i > 1) { , } _ }], T <: Context@{typeParamNum}[F]
            @for(ii <- 1 to typeParamNum) { , X1_C@{ii} }](@if(isDotty) { using } else { implicit }
                t1: F[@for(i <- 1 to typeParamNum) { @if(i > 1) { , } X1_C@{i} }],
                context: T
            ) @if(isDotty) { as } else { : } Application@{typeParamNum}[F, T @for(i <- 1 to typeParamNum) { , ZsgTuple1[X1_C@{i}] }] =
                new Application@{typeParamNum}(context.append(context.start, t1)(ZsgTuple1.cachePlus@{typeParamNum}WithTypeParameter0))
        }
    } else {
        @for(typeParamNum <- 1 to maxAsunaContext) {
            @if(isDotty) { given } else { implicit def tupleTagApplicationImplicit_tagNum2_typeParamNum@{typeParamNum} } [F[@for(i <- 1 to typeParamNum) { @if(i > 1) { , } _ }], T <: Context@{typeParamNum}[F]
            @for(ii <- 1 to typeParamNum) { , X1_C@{ii} } @for(ii <- 1 to typeParamNum) { , X2_C@{ii} }](@if(isDotty) { using } else { implicit }
                t1: F[@for(i <- 1 to typeParamNum) { @if(i > 1) { , } X1_C@{i} }],
                t2: F[@for(i <- 1 to typeParamNum) { @if(i > 1) { , } X2_C@{i} }],
                context: T
            ) @if(isDotty) { as } else { : } Application@{typeParamNum}[F, T @for(i <- 1 to typeParamNum) { , ZsgTuple2[X1_C@{i}, X2_C@{i}] }] =
                new Application@{typeParamNum}(context.append(t2, t1)(ZsgTuple2.cachePlus@{typeParamNum}WithTypeParameter1))
        }
    }

    @for(eachContextNum <- 1 to maxAsunaContext) {
        @if(tagNum == 1) {
            @if(isDotty) { inline } else { @@inline } def cachePlus@{eachContextNum}WithTypeParameter0Dynamic[@{zsg.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")}]: Plus@{eachContextNum}[
                @{zsg.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.AsunaTuple1_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ] = new Plus@{eachContextNum}[
                @{zsg.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.AsunaTuple1_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ] {
                @for(i <- 1 to eachContextNum) {
                    final override def takeHead@{i}(z: ZsgTuple1[Y@{i}]): ZsgTuple0 = ZsgTuple0.value
                    final override def takeTail@{i}(z: ZsgTuple1[Y@{i}]): Y@{i} = z.i1
                    final override def plus@{i}(x: ZsgTuple0, y: Y@{i}): ZsgTuple1[Y@{i}] = new ZsgTuple1(y)
                }
            }

            val cachePlus@{eachContextNum}WithTypeParameter0Strict: Plus@{eachContextNum}[
                @{zsg.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.Any_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.AsunaTuple1_Any_Snippet(1 to eachContextNum).mkString(" , ")}
            ] = cachePlus@{eachContextNum}WithTypeParameter0Dynamic[@{zsg.codegen.SnippetUtil.Any_Snippet(1 to eachContextNum).mkString(" , ")}]

            @if(isDotty) { inline } else { @@inline } def cachePlus@{eachContextNum}WithTypeParameter0[@{zsg.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")}]: Plus@{eachContextNum}[
                @{zsg.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to eachContextNum).mkString("", " , ", ",")}
                @{zsg.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString("", " , ", ",")}
                @{zsg.codegen.SnippetUtil.AsunaTuple1_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ] = cachePlus@{eachContextNum}WithTypeParameter0Strict.asInstanceOf[Plus@{eachContextNum}[
                @{zsg.codegen.SnippetUtil.AsunaTuple0_Snippet(1 to eachContextNum).mkString("", " , ", ",")}
                @{zsg.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString("", " , ", ",")}
                @{zsg.codegen.SnippetUtil.AsunaTuple1_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ]]
        } else {
            @if(isDotty) { inline } else { @@inline } def cachePlus@{eachContextNum}WithTypeParameter1Dynamic[
                @{zsg.codegen.SnippetUtil.XI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ]: Plus@{eachContextNum}[
                @{zsg.codegen.SnippetUtil.XI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.AsunaTuple2_XI_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ] = new Plus@{eachContextNum}[
                @{zsg.codegen.SnippetUtil.XI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.AsunaTuple2_XI_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ] {
                @for(i <- 1 to eachContextNum) {
                    final override def takeHead@{i}(z: ZsgTuple2[Y@{i}, X@{i}]): X@{i} = z.i2
                    final override def takeTail@{i}(z: ZsgTuple2[Y@{i}, X@{i}]): Y@{i} = z.i1
                    final override def plus@{i}(x: X@{i}, y: Y@{i}): ZsgTuple2[Y@{i}, X@{i}] = new ZsgTuple2(y, x)
                }
            }

            val cachePlus@{eachContextNum}WithTypeParameter1Strict: Plus@{eachContextNum}[
                @{zsg.codegen.SnippetUtil.Any_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.Any_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.AsunaTuple2_Any_Any_Snippet(1 to eachContextNum).mkString(" , ")}
            ] = cachePlus@{eachContextNum}WithTypeParameter1Dynamic[
                @{zsg.codegen.SnippetUtil.Any_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.Any_Snippet(1 to eachContextNum).mkString(" , ")}
            ]

            @if(isDotty) { inline } else { @@inline } def cachePlus@{eachContextNum}WithTypeParameter1[
                @{zsg.codegen.SnippetUtil.XI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ]: Plus@{eachContextNum}[
                @{zsg.codegen.SnippetUtil.XI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.AsunaTuple2_XI_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ] = cachePlus@{eachContextNum}WithTypeParameter1Strict.asInstanceOf[Plus@{eachContextNum}[
                @{zsg.codegen.SnippetUtil.XI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.YI_Snippet(1 to eachContextNum).mkString(" , ")},
                @{zsg.codegen.SnippetUtil.AsunaTuple2_XI_YI_Snippet(1 to eachContextNum).mkString(" , ")}
            ]]
        }
    }

}