@(maxContextCount: Int)

package zsg

object BuildContextApply {

    @for(tagNum <- 1 to maxContextCount) {
        final class BuildContextApply@{tagNum}[F[@{(1 to tagNum).map(_ => "_").mkString(" , ")}]](val context: Context@{tagNum}[F]) {
            def tuple[@{zsg.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString(" , ")}](
                i: F[@{zsg.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString(" , ")}]
            ): F[@{zsg.codegen.SnippetUtil.AsunaTuple1_XI_Snippet(1 to tagNum).mkString(" , ")}] = {
                context.append(context.start, i)(ZsgTuple1.cachePlus@{tagNum}WithTypeParameter0)
            }
            def tuple[@{zsg.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString(" , ")}, @{zsg.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString(" , ")}](
                i1: F[@{zsg.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString(" , ")}],
                i2: F[@{zsg.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString(" , ")}]
            ): F[@{zsg.codegen.SnippetUtil.AsunaTuple2_XI_YI_Snippet(1 to tagNum).mkString(" , ")}] = {
                context.append(i2, i1)(ZsgTuple2.cachePlus@{tagNum}WithTypeParameter1)
            }
            def nodeTuple[@{zsg.codegen.SnippetUtil.XI_TupleTag_Snippet(1 to tagNum).mkString(" , ")}](
                i: F[@{zsg.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString(" , ")}]
            ): F[@{zsg.codegen.SnippetUtil.NodeTuple1_XI_Snippet(1 to tagNum).mkString(" , ")}] = {
                context.append(context.start, i)(NodeTuple1.cachePlus@{tagNum}WithTypeParameter0)
            }
            def nodeTuple[@{zsg.codegen.SnippetUtil.YI_TupleTag_Snippet(1 to tagNum).mkString(" , ")}, @{zsg.codegen.SnippetUtil.XI_TupleTag_Snippet(1 to tagNum).mkString(" , ")}](
                i1: F[@{zsg.codegen.SnippetUtil.YI_Snippet(1 to tagNum).mkString(" , ")}],
                i2: F[@{zsg.codegen.SnippetUtil.XI_Snippet(1 to tagNum).mkString(" , ")}]
            ): F[@{zsg.codegen.SnippetUtil.NodeTuple2_XI_YI_Snippet(1 to tagNum).mkString(" , ")}] = {
                context.append(i2, i1)(NodeTuple2.cachePlus@{tagNum}WithTypeParameter1)
            }
        }
    }

    @for(tagNum <- 1 to maxContextCount) {
        def apply[F[@{(1 to tagNum).map(_ => "_").mkString(" , ")}]](context: Context@{tagNum}[F]): BuildContextApply@{tagNum}[F] = new BuildContextApply@{tagNum}(context)
    }

}