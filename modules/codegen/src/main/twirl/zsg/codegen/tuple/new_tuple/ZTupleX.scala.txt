@(ZTupleNum: Int)(maxContextNum: Int)
package zsg
class ZTuple@{ZTupleNum}[@for(i <- 1 to ZTupleNum) { @if(i > 1) { , } I@{i} }](@for(i <- 1 to ZTupleNum) { @if(i > 1) { , } val i@{i}: I@{i} }) extends zsg.TupleTag

@ApplicationType(tupleNum: Int, contextNum: Int) = {
    ApplicationX@{contextNum}[F, T
        @for(i <- 1 to contextNum) {
            , ZTuple@{tupleNum}[@for(ii <- 1 to tupleNum) { @if(ii > 1) { , } Tuple@{ii}_Context@{i} }]
        }
    ]
}

@ApplicationTypeParameter(tupleNum: Int, contextNum: Int) = {
    [F[@for(i <- 1 to contextNum) { @if(i > 1) { , } _ }], T <: Context@{contextNum}[F]
        @for(i <- 1 to contextNum) {
            @for(ii <-1 to tupleNum) { , Tuple@{ii}_Context@{i} }
        }
    ]
}

@ApplicationTypeResult(tupleNum: Int, contextNum: Int) = {
    F[
        @for(i <- 1 to contextNum) {
            @if(i > 1) { , } ZTuple@{tupleNum}[@for(ii <- 1 to tupleNum) { @if(ii > 1) { , } Tuple@{ii}_Context@{i} }]
        }
    ]
}

@ApplicationParameter(tupleNum: Int, contextNum: Int) = {
    @for(tupleIndex <- 1 to tupleNum) {
        @if(tupleIndex > 1) { , } t@{tupleIndex}: F[
            @for(i <- 1 to contextNum) {
                @if(i > 1) { , } Tuple@{tupleIndex}_Context@{i}
            }
        ]
    }
}

object ZTuple@{ZTupleNum} {

    @for(contextNum <- 1 to maxContextNum) {
        @if(ZTupleNum == 1) {
            implicit def context@{contextNum}Implicit@ApplicationTypeParameter(tupleNum = ZTupleNum, contextNum = contextNum)
            (implicit @ApplicationParameter(tupleNum = ZTupleNum, contextNum = contextNum)): @ApplicationType(tupleNum = ZTupleNum, contextNum = contextNum) = new @ApplicationType(tupleNum = ZTupleNum, contextNum = contextNum) @* *@ {
                override def application(context: T): @ApplicationTypeResult(tupleNum = ZTupleNum, contextNum = contextNum) = {
                    context.append(context.start, t1)(PlusInstanceTuple@{ZTupleNum}.contextNum@{contextNum})
                }
            }
        } else if(ZTupleNum == 2) {
            implicit def context@{contextNum}Implicit@ApplicationTypeParameter(tupleNum = ZTupleNum, contextNum = contextNum)
            (implicit @ApplicationParameter(tupleNum = ZTupleNum, contextNum = contextNum)): @ApplicationType(tupleNum = ZTupleNum, contextNum = contextNum) = new @ApplicationType(tupleNum = ZTupleNum, contextNum = contextNum) @* *@ {
                override def application(context: T): @ApplicationTypeResult(tupleNum = ZTupleNum, contextNum = contextNum) = {
                    context.append(t1, t2)(PlusInstanceTuple@{ZTupleNum}.contextNum@{contextNum})
                }
            }
        }
    }

}