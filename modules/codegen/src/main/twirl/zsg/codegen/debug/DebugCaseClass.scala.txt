@(maxPropertyNum: Int)(proNum: Int)(isDotty: Boolean)

package zsg.debug

trait DebugCaseClass@{proNum}Instance {
    @if(isDotty) {
        given zsgTupleToDebugCaseClass@{proNum}InstanceImplicit[@{(1 to proNum).map(i => s"D${i}").mkString(" , ")}] as ZsgTupleToDebugCaseClass[
            @{zsg.codegen.SnippetUtil.Tuple_To_AsunaTuple2((1 to proNum).map(i => s"D${i}"))(maxPropertyNum)(true)},
            DebugCaseClass@{proNum}[@{(1 to proNum).map(i => s"D${i}").mkString(" , ")}]
        ] {
            override def tupleToCaseClass(tuple: @{zsg.codegen.SnippetUtil.Tuple_To_AsunaTuple2((1 to proNum).map(i => s"D${i}"))(maxPropertyNum)(true)}
            ): DebugCaseClass@{proNum}[@{(1 to proNum).map(i => s"D${i}").mkString(" , ")}] = {
                DebugCaseClass@{proNum}(@{zsg.codegen.SnippetUtil.Tuple2_Index_To_DebugCaseClass_Index(proNum)})
            }
        }
    } else {
        implicit def zsgTupleToDebugCaseClass@{proNum}InstanceImplicit[@{(1 to proNum).map(i => s"D${i}").mkString(" , ")}
        ]: ZsgTupleToDebugCaseClass[
            @{zsg.codegen.SnippetUtil.Tuple_To_AsunaTuple2((1 to proNum).map(i => s"D${i}"))(maxPropertyNum)(true)},
            DebugCaseClass@{proNum}[@{(1 to proNum).map(i => s"D${i}").mkString(" , ")}]
        ] = new ZsgTupleToDebugCaseClass[
            @{zsg.codegen.SnippetUtil.Tuple_To_AsunaTuple2((1 to proNum).map(i => s"D${i}"))(maxPropertyNum)(true)},
            DebugCaseClass@{proNum}[@{(1 to proNum).map(i => s"D${i}").mkString(" , ")}]
        ] {
            override def tupleToCaseClass(tuple: @{zsg.codegen.SnippetUtil.Tuple_To_AsunaTuple2((1 to proNum).map(i => s"D${i}"))(maxPropertyNum)(true)}
            ): DebugCaseClass@{proNum}[@{(1 to proNum).map(i => s"D${i}").mkString(" , ")}] = {
                DebugCaseClass@{proNum}(@{zsg.codegen.SnippetUtil.Tuple2_Index_To_DebugCaseClass_Index(proNum)})
            }
        }
    }
}

case class DebugCaseClass@{proNum}[@{(1 to proNum).map(i => s"D${i}").mkString(" , ")}](@{(1 to proNum).map(i => s"d${i}: D${i}").mkString(" , ")}) {
    def infer(@if(isDotty) { using } else { implicit }
        @{(1 to proNum).map(i => s"d${i}: D${i}").mkString(" , ")}): DebugCaseClass@{proNum}[@{(1 to proNum).map(i => s"D${i}").mkString(" , ")}] = {
        DebugCaseClass@{proNum}(@{(1 to proNum).map(i => s"d${i} = d${i}").mkString(" , ")})
    }
}