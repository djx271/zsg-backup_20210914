@(maxPropertyNum: Int)(proNum: Int)(isDotty: Boolean)

package zsg.debug

import scala.annotation.implicitNotFound

trait DebugCaseClass@{proNum}TupleTagInstance {
    @if(isDotty) {
        given zsgTupleToDebugCaseClass@{proNum}TupleTagInstanceImplicit[@{(1 to proNum).map(i => s"D${i} <: zsg.TupleTag").mkString(" , ")}] as ZsgTupleToDebugCaseClass[
                @{zsg.codegen.SnippetUtil.Tuple_To_AsunaTuple2((1 to proNum).map(i => s"D${i}"))(maxPropertyNum)(false)},
                DebugCaseClassTupleTag@{proNum}[@{(1 to proNum).map(i => s"D${i}").mkString(" , ")}]
            ] {
                override def tupleToCaseClass(tuple: @{zsg.codegen.SnippetUtil.Tuple_To_AsunaTuple2((1 to proNum).map(i => s"D${i}"))(maxPropertyNum)(false)}
                ): DebugCaseClassTupleTag@{proNum}[@{(1 to proNum).map(i => s"D${i}").mkString(" , ")}] = {
                    DebugCaseClassTupleTag@{proNum}(@{zsg.codegen.SnippetUtil.Tuple2_Index_To_DebugCaseClass_Index(proNum)})
                }
            }
    } else {
        implicit def zsgTupleToDebugCaseClass@{proNum}TupleTagInstanceImplicit[@{(1 to proNum).map(i => s"D${i} <: zsg.TupleTag").mkString(" , ")}
        ]:ZsgTupleToDebugCaseClass[
            @{zsg.codegen.SnippetUtil.Tuple_To_AsunaTuple2((1 to proNum).map(i => s"D${i}"))(maxPropertyNum)(false)},
            DebugCaseClassTupleTag@{proNum}[@{(1 to proNum).map(i => s"D${i}").mkString(" , ")}]
        ] = new ZsgTupleToDebugCaseClass[
            @{zsg.codegen.SnippetUtil.Tuple_To_AsunaTuple2((1 to proNum).map(i => s"D${i}"))(maxPropertyNum)(false)},
            DebugCaseClassTupleTag@{proNum}[@{(1 to proNum).map(i => s"D${i}").mkString(" , ")}]
        ] {
            override def tupleToCaseClass(tuple: @{zsg.codegen.SnippetUtil.Tuple_To_AsunaTuple2((1 to proNum).map(i => s"D${i}"))(maxPropertyNum)(false)}
            ): DebugCaseClassTupleTag@{proNum}[@{(1 to proNum).map(i => s"D${i}").mkString(" , ")}] = {
                DebugCaseClassTupleTag@{proNum}(@{zsg.codegen.SnippetUtil.Tuple2_Index_To_DebugCaseClass_Index(proNum)})
            }
        }
    }
}

case class DebugCaseClassTupleTag@{proNum}[@{(1 to proNum).map(i => s"D${i} <: zsg.TupleTag").mkString(" , ")}](@{(1 to proNum).map(i => s"d${i}: D${i}").mkString(" , ")}) {
    def infer(@if(isDotty) { using } else { implicit }
        @{(1 to proNum).map(i => s"d${i}: D${i}").mkString(" , ")}): DebugCaseClass@{proNum}[@{(1 to proNum).map(i => s"D${i}").mkString(" , ")}] = {
        DebugCaseClass@{proNum}(@{(1 to proNum).map(i => s"d${i} = d${i}").mkString(" , ")})
    }
}