@(tagNum: Int)

package zsg.scala.tuple

import zsg.TypeFunction
import zsg.TypeHList
import zsg.Application
import zsg.Context
import zsg.Plus

@tagSeq1(i: Int) = @{
    val b = 1 to i
    b.map(s => s"v$s.application(context)")
}

trait TupleHelper {
    @for(i <- 2 to tagNum) {
        implicit def applicationScalaTupleImplicit@{i}[F <: TypeFunction @for(ii <- 1 to i) { , Boot@{ii}, Target@{ii} <: TypeHList }]
            (implicit @for(ii <- 1 to i) { @if(ii > 1) { , } v@{ii}: Application[F, Boot@{ii}, Target@{ii}] }):
        Application[F, Tuple@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } Boot@{ii} }],
            Tuple@{i}TypeHList[@for(ii <- 1 to i) { @if(ii > 1) { , } Target@{ii} }]] =
        new Application[F, Tuple@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } Boot@{ii} }],
            Tuple@{i}TypeHList[@for(ii <- 1 to i) { @if(ii > 1) { , } Target@{ii} }]] {
            override def application(context: Context[F]): F#H[Tuple@{i}TypeHList[@for(ii <- 1 to i) { @if(ii > 1) { , } Target@{ii} }]] =
                context.append(@zsg.codegen.ZsgScalaTupleCodeGeneration.genHListString5(tagSeq1(i - 1)), v@{i}.application(context))(Tuple22Plus.tuple22Plus@{i - 1})
        }
    }
}

object TupleHelper extends TupleHelper