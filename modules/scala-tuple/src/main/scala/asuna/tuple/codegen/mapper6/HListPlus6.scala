package asuna
import asuna.support.heterogeneous._
final object HListPlus6 {
final def plusWithTypeParameter1[X1_C1  , X2_C1  , X3_C1  , X4_C1  , X5_C1  , X6_C1
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1  , X2_C1  , X3_C1  , X4_C1  , X5_C1  , X6_C1
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 :: X1_C1 :: HNil  , Y2 :: X2_C1 :: HNil  , Y3 :: X3_C1 :: HNil  , Y4 :: X4_C1 :: HNil  , Y5 :: X5_C1 :: HNil  , Y6 :: X6_C1 :: HNil
] = new Plus6[
X1_C1  , X2_C1  , X3_C1  , X4_C1  , X5_C1  , X6_C1
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 :: X1_C1 :: HNil  , Y2 :: X2_C1 :: HNil  , Y3 :: X3_C1 :: HNil  , Y4 :: X4_C1 :: HNil  , Y5 :: X5_C1 :: HNil  , Y6 :: X6_C1 :: HNil
] {
final override def takeHead1(z: Y1 :: X1_C1 :: HNil): X1_C1 = z.tail.head
final override def takeTail1(z: Y1 :: X1_C1 :: HNil): Y1 = z.head
final override def plus1(x: X1_C1, y: Y1): Y1 :: X1_C1 :: HNil = y :: x :: HNil
final override def takeHead2(z: Y2 :: X2_C1 :: HNil): X2_C1 = z.tail.head
final override def takeTail2(z: Y2 :: X2_C1 :: HNil): Y2 = z.head
final override def plus2(x: X2_C1, y: Y2): Y2 :: X2_C1 :: HNil = y :: x :: HNil
final override def takeHead3(z: Y3 :: X3_C1 :: HNil): X3_C1 = z.tail.head
final override def takeTail3(z: Y3 :: X3_C1 :: HNil): Y3 = z.head
final override def plus3(x: X3_C1, y: Y3): Y3 :: X3_C1 :: HNil = y :: x :: HNil
final override def takeHead4(z: Y4 :: X4_C1 :: HNil): X4_C1 = z.tail.head
final override def takeTail4(z: Y4 :: X4_C1 :: HNil): Y4 = z.head
final override def plus4(x: X4_C1, y: Y4): Y4 :: X4_C1 :: HNil = y :: x :: HNil
final override def takeHead5(z: Y5 :: X5_C1 :: HNil): X5_C1 = z.tail.head
final override def takeTail5(z: Y5 :: X5_C1 :: HNil): Y5 = z.head
final override def plus5(x: X5_C1, y: Y5): Y5 :: X5_C1 :: HNil = y :: x :: HNil
final override def takeHead6(z: Y6 :: X6_C1 :: HNil): X6_C1 = z.tail.head
final override def takeTail6(z: Y6 :: X6_C1 :: HNil): Y6 = z.head
final override def plus6(x: X6_C1, y: Y6): Y6 :: X6_C1 :: HNil = y :: x :: HNil
}
final def plusWithTypeParameter1[X1_C1
, X2_C1    , X3_C1    , X4_C1    , X5_C1    , X6_C1
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  HNil
,  X2_C1 ::  HNil  ,  X3_C1 ::  HNil  ,  X4_C1 ::  HNil  ,  X5_C1 ::  HNil  ,  X6_C1 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  HNil  , Y2 ::  X2_C1 ::  HNil  , Y3 ::  X3_C1 ::  HNil  , Y4 ::  X4_C1 ::  HNil  , Y5 ::  X5_C1 ::  HNil  , Y6 ::  X6_C1 ::  HNil
] = new Plus6[
X1_C1 ::  HNil
,  X2_C1 ::  HNil  ,  X3_C1 ::  HNil  ,  X4_C1 ::  HNil  ,  X5_C1 ::  HNil  ,  X6_C1 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  HNil  , Y2 ::  X2_C1 ::  HNil  , Y3 ::  X3_C1 ::  HNil  , Y4 ::  X4_C1 ::  HNil  , Y5 ::  X5_C1 ::  HNil  , Y6 ::  X6_C1 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  HNil):  X1_C1 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  HNil):  X2_C1 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  HNil):  X3_C1 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  HNil):  X4_C1 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  HNil):  X5_C1 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  HNil):  X6_C1 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  HNil = x.::(y)
}
final def plusWithTypeParameter2[X1_C1  , X1_C2
, X2_C1  , X2_C2    , X3_C1  , X3_C2    , X4_C1  , X4_C2    , X5_C1  , X5_C2    , X6_C1  , X6_C2
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  HNil
,  X2_C1 ::  X2_C2 ::  HNil  ,  X3_C1 ::  X3_C2 ::  HNil  ,  X4_C1 ::  X4_C2 ::  HNil  ,  X5_C1 ::  X5_C2 ::  HNil  ,  X6_C1 ::  X6_C2 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  HNil
,  X2_C1 ::  X2_C2 ::  HNil  ,  X3_C1 ::  X3_C2 ::  HNil  ,  X4_C1 ::  X4_C2 ::  HNil  ,  X5_C1 ::  X5_C2 ::  HNil  ,  X6_C1 ::  X6_C2 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  HNil):  X1_C1 ::  X1_C2 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  HNil):  X2_C1 ::  X2_C2 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  HNil):  X3_C1 ::  X3_C2 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  HNil):  X4_C1 ::  X4_C2 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  HNil):  X5_C1 ::  X5_C2 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  HNil):  X6_C1 ::  X6_C2 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  HNil = x.::(y)
}
final def plusWithTypeParameter3[X1_C1  , X1_C2  , X1_C3
, X2_C1  , X2_C2  , X2_C3    , X3_C1  , X3_C2  , X3_C3    , X4_C1  , X4_C2  , X4_C3    , X5_C1  , X5_C2  , X5_C3    , X6_C1  , X6_C2  , X6_C3
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  HNil = x.::(y)
}
final def plusWithTypeParameter4[X1_C1  , X1_C2  , X1_C3  , X1_C4
, X2_C1  , X2_C2  , X2_C3  , X2_C4    , X3_C1  , X3_C2  , X3_C3  , X3_C4    , X4_C1  , X4_C2  , X4_C3  , X4_C4    , X5_C1  , X5_C2  , X5_C3  , X5_C4    , X6_C1  , X6_C2  , X6_C3  , X6_C4
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  HNil = x.::(y)
}
final def plusWithTypeParameter5[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  HNil = x.::(y)
}
final def plusWithTypeParameter6[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  HNil = x.::(y)
}
final def plusWithTypeParameter7[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6  , X1_C7
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6  , X2_C7    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6  , X3_C7    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6  , X4_C7    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6  , X5_C7    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6  , X6_C7
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  HNil = x.::(y)
}
final def plusWithTypeParameter8[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6  , X1_C7  , X1_C8
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6  , X2_C7  , X2_C8    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6  , X3_C7  , X3_C8    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6  , X4_C7  , X4_C8    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6  , X5_C7  , X5_C8    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6  , X6_C7  , X6_C8
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  HNil = x.::(y)
}
final def plusWithTypeParameter9[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6  , X1_C7  , X1_C8  , X1_C9
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6  , X2_C7  , X2_C8  , X2_C9    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6  , X3_C7  , X3_C8  , X3_C9    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6  , X4_C7  , X4_C8  , X4_C9    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6  , X5_C7  , X5_C8  , X5_C9    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6  , X6_C7  , X6_C8  , X6_C9
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  HNil = x.::(y)
}
final def plusWithTypeParameter10[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6  , X1_C7  , X1_C8  , X1_C9  , X1_C10
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6  , X2_C7  , X2_C8  , X2_C9  , X2_C10    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6  , X3_C7  , X3_C8  , X3_C9  , X3_C10    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6  , X4_C7  , X4_C8  , X4_C9  , X4_C10    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6  , X5_C7  , X5_C8  , X5_C9  , X5_C10    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6  , X6_C7  , X6_C8  , X6_C9  , X6_C10
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  HNil = x.::(y)
}
final def plusWithTypeParameter11[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6  , X1_C7  , X1_C8  , X1_C9  , X1_C10  , X1_C11
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6  , X2_C7  , X2_C8  , X2_C9  , X2_C10  , X2_C11    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6  , X3_C7  , X3_C8  , X3_C9  , X3_C10  , X3_C11    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6  , X4_C7  , X4_C8  , X4_C9  , X4_C10  , X4_C11    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6  , X5_C7  , X5_C8  , X5_C9  , X5_C10  , X5_C11    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6  , X6_C7  , X6_C8  , X6_C9  , X6_C10  , X6_C11
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  HNil = x.::(y)
}
final def plusWithTypeParameter12[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6  , X1_C7  , X1_C8  , X1_C9  , X1_C10  , X1_C11  , X1_C12
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6  , X2_C7  , X2_C8  , X2_C9  , X2_C10  , X2_C11  , X2_C12    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6  , X3_C7  , X3_C8  , X3_C9  , X3_C10  , X3_C11  , X3_C12    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6  , X4_C7  , X4_C8  , X4_C9  , X4_C10  , X4_C11  , X4_C12    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6  , X5_C7  , X5_C8  , X5_C9  , X5_C10  , X5_C11  , X5_C12    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6  , X6_C7  , X6_C8  , X6_C9  , X6_C10  , X6_C11  , X6_C12
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  HNil = x.::(y)
}
final def plusWithTypeParameter13[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6  , X1_C7  , X1_C8  , X1_C9  , X1_C10  , X1_C11  , X1_C12  , X1_C13
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6  , X2_C7  , X2_C8  , X2_C9  , X2_C10  , X2_C11  , X2_C12  , X2_C13    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6  , X3_C7  , X3_C8  , X3_C9  , X3_C10  , X3_C11  , X3_C12  , X3_C13    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6  , X4_C7  , X4_C8  , X4_C9  , X4_C10  , X4_C11  , X4_C12  , X4_C13    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6  , X5_C7  , X5_C8  , X5_C9  , X5_C10  , X5_C11  , X5_C12  , X5_C13    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6  , X6_C7  , X6_C8  , X6_C9  , X6_C10  , X6_C11  , X6_C12  , X6_C13
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  HNil = x.::(y)
}
final def plusWithTypeParameter14[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6  , X1_C7  , X1_C8  , X1_C9  , X1_C10  , X1_C11  , X1_C12  , X1_C13  , X1_C14
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6  , X2_C7  , X2_C8  , X2_C9  , X2_C10  , X2_C11  , X2_C12  , X2_C13  , X2_C14    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6  , X3_C7  , X3_C8  , X3_C9  , X3_C10  , X3_C11  , X3_C12  , X3_C13  , X3_C14    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6  , X4_C7  , X4_C8  , X4_C9  , X4_C10  , X4_C11  , X4_C12  , X4_C13  , X4_C14    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6  , X5_C7  , X5_C8  , X5_C9  , X5_C10  , X5_C11  , X5_C12  , X5_C13  , X5_C14    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6  , X6_C7  , X6_C8  , X6_C9  , X6_C10  , X6_C11  , X6_C12  , X6_C13  , X6_C14
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  HNil = x.::(y)
}
final def plusWithTypeParameter15[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6  , X1_C7  , X1_C8  , X1_C9  , X1_C10  , X1_C11  , X1_C12  , X1_C13  , X1_C14  , X1_C15
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6  , X2_C7  , X2_C8  , X2_C9  , X2_C10  , X2_C11  , X2_C12  , X2_C13  , X2_C14  , X2_C15    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6  , X3_C7  , X3_C8  , X3_C9  , X3_C10  , X3_C11  , X3_C12  , X3_C13  , X3_C14  , X3_C15    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6  , X4_C7  , X4_C8  , X4_C9  , X4_C10  , X4_C11  , X4_C12  , X4_C13  , X4_C14  , X4_C15    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6  , X5_C7  , X5_C8  , X5_C9  , X5_C10  , X5_C11  , X5_C12  , X5_C13  , X5_C14  , X5_C15    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6  , X6_C7  , X6_C8  , X6_C9  , X6_C10  , X6_C11  , X6_C12  , X6_C13  , X6_C14  , X6_C15
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  HNil = x.::(y)
}
final def plusWithTypeParameter16[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6  , X1_C7  , X1_C8  , X1_C9  , X1_C10  , X1_C11  , X1_C12  , X1_C13  , X1_C14  , X1_C15  , X1_C16
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6  , X2_C7  , X2_C8  , X2_C9  , X2_C10  , X2_C11  , X2_C12  , X2_C13  , X2_C14  , X2_C15  , X2_C16    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6  , X3_C7  , X3_C8  , X3_C9  , X3_C10  , X3_C11  , X3_C12  , X3_C13  , X3_C14  , X3_C15  , X3_C16    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6  , X4_C7  , X4_C8  , X4_C9  , X4_C10  , X4_C11  , X4_C12  , X4_C13  , X4_C14  , X4_C15  , X4_C16    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6  , X5_C7  , X5_C8  , X5_C9  , X5_C10  , X5_C11  , X5_C12  , X5_C13  , X5_C14  , X5_C15  , X5_C16    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6  , X6_C7  , X6_C8  , X6_C9  , X6_C10  , X6_C11  , X6_C12  , X6_C13  , X6_C14  , X6_C15  , X6_C16
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  HNil = x.::(y)
}
final def plusWithTypeParameter17[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6  , X1_C7  , X1_C8  , X1_C9  , X1_C10  , X1_C11  , X1_C12  , X1_C13  , X1_C14  , X1_C15  , X1_C16  , X1_C17
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6  , X2_C7  , X2_C8  , X2_C9  , X2_C10  , X2_C11  , X2_C12  , X2_C13  , X2_C14  , X2_C15  , X2_C16  , X2_C17    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6  , X3_C7  , X3_C8  , X3_C9  , X3_C10  , X3_C11  , X3_C12  , X3_C13  , X3_C14  , X3_C15  , X3_C16  , X3_C17    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6  , X4_C7  , X4_C8  , X4_C9  , X4_C10  , X4_C11  , X4_C12  , X4_C13  , X4_C14  , X4_C15  , X4_C16  , X4_C17    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6  , X5_C7  , X5_C8  , X5_C9  , X5_C10  , X5_C11  , X5_C12  , X5_C13  , X5_C14  , X5_C15  , X5_C16  , X5_C17    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6  , X6_C7  , X6_C8  , X6_C9  , X6_C10  , X6_C11  , X6_C12  , X6_C13  , X6_C14  , X6_C15  , X6_C16  , X6_C17
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  HNil = x.::(y)
}
final def plusWithTypeParameter18[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6  , X1_C7  , X1_C8  , X1_C9  , X1_C10  , X1_C11  , X1_C12  , X1_C13  , X1_C14  , X1_C15  , X1_C16  , X1_C17  , X1_C18
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6  , X2_C7  , X2_C8  , X2_C9  , X2_C10  , X2_C11  , X2_C12  , X2_C13  , X2_C14  , X2_C15  , X2_C16  , X2_C17  , X2_C18    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6  , X3_C7  , X3_C8  , X3_C9  , X3_C10  , X3_C11  , X3_C12  , X3_C13  , X3_C14  , X3_C15  , X3_C16  , X3_C17  , X3_C18    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6  , X4_C7  , X4_C8  , X4_C9  , X4_C10  , X4_C11  , X4_C12  , X4_C13  , X4_C14  , X4_C15  , X4_C16  , X4_C17  , X4_C18    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6  , X5_C7  , X5_C8  , X5_C9  , X5_C10  , X5_C11  , X5_C12  , X5_C13  , X5_C14  , X5_C15  , X5_C16  , X5_C17  , X5_C18    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6  , X6_C7  , X6_C8  , X6_C9  , X6_C10  , X6_C11  , X6_C12  , X6_C13  , X6_C14  , X6_C15  , X6_C16  , X6_C17  , X6_C18
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  HNil = x.::(y)
}
final def plusWithTypeParameter19[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6  , X1_C7  , X1_C8  , X1_C9  , X1_C10  , X1_C11  , X1_C12  , X1_C13  , X1_C14  , X1_C15  , X1_C16  , X1_C17  , X1_C18  , X1_C19
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6  , X2_C7  , X2_C8  , X2_C9  , X2_C10  , X2_C11  , X2_C12  , X2_C13  , X2_C14  , X2_C15  , X2_C16  , X2_C17  , X2_C18  , X2_C19    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6  , X3_C7  , X3_C8  , X3_C9  , X3_C10  , X3_C11  , X3_C12  , X3_C13  , X3_C14  , X3_C15  , X3_C16  , X3_C17  , X3_C18  , X3_C19    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6  , X4_C7  , X4_C8  , X4_C9  , X4_C10  , X4_C11  , X4_C12  , X4_C13  , X4_C14  , X4_C15  , X4_C16  , X4_C17  , X4_C18  , X4_C19    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6  , X5_C7  , X5_C8  , X5_C9  , X5_C10  , X5_C11  , X5_C12  , X5_C13  , X5_C14  , X5_C15  , X5_C16  , X5_C17  , X5_C18  , X5_C19    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6  , X6_C7  , X6_C8  , X6_C9  , X6_C10  , X6_C11  , X6_C12  , X6_C13  , X6_C14  , X6_C15  , X6_C16  , X6_C17  , X6_C18  , X6_C19
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  HNil = x.::(y)
}
final def plusWithTypeParameter20[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6  , X1_C7  , X1_C8  , X1_C9  , X1_C10  , X1_C11  , X1_C12  , X1_C13  , X1_C14  , X1_C15  , X1_C16  , X1_C17  , X1_C18  , X1_C19  , X1_C20
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6  , X2_C7  , X2_C8  , X2_C9  , X2_C10  , X2_C11  , X2_C12  , X2_C13  , X2_C14  , X2_C15  , X2_C16  , X2_C17  , X2_C18  , X2_C19  , X2_C20    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6  , X3_C7  , X3_C8  , X3_C9  , X3_C10  , X3_C11  , X3_C12  , X3_C13  , X3_C14  , X3_C15  , X3_C16  , X3_C17  , X3_C18  , X3_C19  , X3_C20    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6  , X4_C7  , X4_C8  , X4_C9  , X4_C10  , X4_C11  , X4_C12  , X4_C13  , X4_C14  , X4_C15  , X4_C16  , X4_C17  , X4_C18  , X4_C19  , X4_C20    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6  , X5_C7  , X5_C8  , X5_C9  , X5_C10  , X5_C11  , X5_C12  , X5_C13  , X5_C14  , X5_C15  , X5_C16  , X5_C17  , X5_C18  , X5_C19  , X5_C20    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6  , X6_C7  , X6_C8  , X6_C9  , X6_C10  , X6_C11  , X6_C12  , X6_C13  , X6_C14  , X6_C15  , X6_C16  , X6_C17  , X6_C18  , X6_C19  , X6_C20
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  HNil = x.::(y)
}
final def plusWithTypeParameter21[X1_C1  , X1_C2  , X1_C3  , X1_C4  , X1_C5  , X1_C6  , X1_C7  , X1_C8  , X1_C9  , X1_C10  , X1_C11  , X1_C12  , X1_C13  , X1_C14  , X1_C15  , X1_C16  , X1_C17  , X1_C18  , X1_C19  , X1_C20  , X1_C21
, X2_C1  , X2_C2  , X2_C3  , X2_C4  , X2_C5  , X2_C6  , X2_C7  , X2_C8  , X2_C9  , X2_C10  , X2_C11  , X2_C12  , X2_C13  , X2_C14  , X2_C15  , X2_C16  , X2_C17  , X2_C18  , X2_C19  , X2_C20  , X2_C21    , X3_C1  , X3_C2  , X3_C3  , X3_C4  , X3_C5  , X3_C6  , X3_C7  , X3_C8  , X3_C9  , X3_C10  , X3_C11  , X3_C12  , X3_C13  , X3_C14  , X3_C15  , X3_C16  , X3_C17  , X3_C18  , X3_C19  , X3_C20  , X3_C21    , X4_C1  , X4_C2  , X4_C3  , X4_C4  , X4_C5  , X4_C6  , X4_C7  , X4_C8  , X4_C9  , X4_C10  , X4_C11  , X4_C12  , X4_C13  , X4_C14  , X4_C15  , X4_C16  , X4_C17  , X4_C18  , X4_C19  , X4_C20  , X4_C21    , X5_C1  , X5_C2  , X5_C3  , X5_C4  , X5_C5  , X5_C6  , X5_C7  , X5_C8  , X5_C9  , X5_C10  , X5_C11  , X5_C12  , X5_C13  , X5_C14  , X5_C15  , X5_C16  , X5_C17  , X5_C18  , X5_C19  , X5_C20  , X5_C21    , X6_C1  , X6_C2  , X6_C3  , X6_C4  , X6_C5  , X6_C6  , X6_C7  , X6_C8  , X6_C9  , X6_C10  , X6_C11  , X6_C12  , X6_C13  , X6_C14  , X6_C15  , X6_C16  , X6_C17  , X6_C18  , X6_C19  , X6_C20  , X6_C21
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6  ]:
Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  X1_C21 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  X2_C21 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  X3_C21 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  X4_C21 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  X5_C21 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  X6_C21 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  X1_C21 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  X2_C21 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  X3_C21 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  X4_C21 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  X5_C21 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  X6_C21 ::  HNil
] = new Plus6[
X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  X1_C21 ::  HNil
,  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  X2_C21 ::  HNil  ,  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  X3_C21 ::  HNil  ,  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  X4_C21 ::  HNil  ,  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  X5_C21 ::  HNil  ,  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  X6_C21 ::  HNil
, Y1  , Y2  , Y3  , Y4  , Y5  , Y6
, Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  X1_C21 ::  HNil  , Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  X2_C21 ::  HNil  , Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  X3_C21 ::  HNil  , Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  X4_C21 ::  HNil  , Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  X5_C21 ::  HNil  , Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  X6_C21 ::  HNil
] {
final override def takeHead1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  X1_C21 ::  HNil):  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  X1_C21 ::  HNil = z.tail
final override def takeTail1(z: Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  X1_C21 ::  HNil): Y1 = z.head
final override def plus1(x:  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  X1_C21 ::  HNil, y: Y1): Y1 ::  X1_C1 ::  X1_C2 ::  X1_C3 ::  X1_C4 ::  X1_C5 ::  X1_C6 ::  X1_C7 ::  X1_C8 ::  X1_C9 ::  X1_C10 ::  X1_C11 ::  X1_C12 ::  X1_C13 ::  X1_C14 ::  X1_C15 ::  X1_C16 ::  X1_C17 ::  X1_C18 ::  X1_C19 ::  X1_C20 ::  X1_C21 ::  HNil = x.::(y)
final override def takeHead2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  X2_C21 ::  HNil):  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  X2_C21 ::  HNil = z.tail
final override def takeTail2(z: Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  X2_C21 ::  HNil): Y2 = z.head
final override def plus2(x:  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  X2_C21 ::  HNil, y: Y2): Y2 ::  X2_C1 ::  X2_C2 ::  X2_C3 ::  X2_C4 ::  X2_C5 ::  X2_C6 ::  X2_C7 ::  X2_C8 ::  X2_C9 ::  X2_C10 ::  X2_C11 ::  X2_C12 ::  X2_C13 ::  X2_C14 ::  X2_C15 ::  X2_C16 ::  X2_C17 ::  X2_C18 ::  X2_C19 ::  X2_C20 ::  X2_C21 ::  HNil = x.::(y)
final override def takeHead3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  X3_C21 ::  HNil):  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  X3_C21 ::  HNil = z.tail
final override def takeTail3(z: Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  X3_C21 ::  HNil): Y3 = z.head
final override def plus3(x:  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  X3_C21 ::  HNil, y: Y3): Y3 ::  X3_C1 ::  X3_C2 ::  X3_C3 ::  X3_C4 ::  X3_C5 ::  X3_C6 ::  X3_C7 ::  X3_C8 ::  X3_C9 ::  X3_C10 ::  X3_C11 ::  X3_C12 ::  X3_C13 ::  X3_C14 ::  X3_C15 ::  X3_C16 ::  X3_C17 ::  X3_C18 ::  X3_C19 ::  X3_C20 ::  X3_C21 ::  HNil = x.::(y)
final override def takeHead4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  X4_C21 ::  HNil):  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  X4_C21 ::  HNil = z.tail
final override def takeTail4(z: Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  X4_C21 ::  HNil): Y4 = z.head
final override def plus4(x:  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  X4_C21 ::  HNil, y: Y4): Y4 ::  X4_C1 ::  X4_C2 ::  X4_C3 ::  X4_C4 ::  X4_C5 ::  X4_C6 ::  X4_C7 ::  X4_C8 ::  X4_C9 ::  X4_C10 ::  X4_C11 ::  X4_C12 ::  X4_C13 ::  X4_C14 ::  X4_C15 ::  X4_C16 ::  X4_C17 ::  X4_C18 ::  X4_C19 ::  X4_C20 ::  X4_C21 ::  HNil = x.::(y)
final override def takeHead5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  X5_C21 ::  HNil):  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  X5_C21 ::  HNil = z.tail
final override def takeTail5(z: Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  X5_C21 ::  HNil): Y5 = z.head
final override def plus5(x:  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  X5_C21 ::  HNil, y: Y5): Y5 ::  X5_C1 ::  X5_C2 ::  X5_C3 ::  X5_C4 ::  X5_C5 ::  X5_C6 ::  X5_C7 ::  X5_C8 ::  X5_C9 ::  X5_C10 ::  X5_C11 ::  X5_C12 ::  X5_C13 ::  X5_C14 ::  X5_C15 ::  X5_C16 ::  X5_C17 ::  X5_C18 ::  X5_C19 ::  X5_C20 ::  X5_C21 ::  HNil = x.::(y)
final override def takeHead6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  X6_C21 ::  HNil):  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  X6_C21 ::  HNil = z.tail
final override def takeTail6(z: Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  X6_C21 ::  HNil): Y6 = z.head
final override def plus6(x:  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  X6_C21 ::  HNil, y: Y6): Y6 ::  X6_C1 ::  X6_C2 ::  X6_C3 ::  X6_C4 ::  X6_C5 ::  X6_C6 ::  X6_C7 ::  X6_C8 ::  X6_C9 ::  X6_C10 ::  X6_C11 ::  X6_C12 ::  X6_C13 ::  X6_C14 ::  X6_C15 ::  X6_C16 ::  X6_C17 ::  X6_C18 ::  X6_C19 ::  X6_C20 ::  X6_C21 ::  HNil = x.::(y)
}
}
