package aa.bb.cc

import java.util.Locale

import com.github.javafaker.Faker
import io.circe.Encoder
import net.scalax.asuna.circe.aaaa.CirceAsunaEncoder
import net.scalax.asuna.circe.another.CirceEncoderConfirmOrder
import net.scalax.asuna.circe.{ CirceAsunaEncoderHelper, EmptyCirceTable }
import net.scalax.asuna.core.common.Placeholder
import net.scalax.asuna.helper.MacroColumnInfoImpl
import org.scalatest.concurrent.ScalaFutures
import org.scalatest._

import scala.language.reflectiveCalls

case class TestModel1(
  name: String, /*
  olim: Long,*/ test3: TestModel3)

case class TestModel2(
  name: String,
  accdef: Int)

case class TestModel4(nickName: String)

case class TestModel3(
  nickName: String, /*
  maxAge: Int,*/ test4: TestModel1)

case class TestModel(
  /*name: String,
  key: String,
  TagTagTag: Int,*/
  olim: Long,
  test4: TestModel4 /*,
  test2: TestModel2*/ )

class CirceEncoderTest extends FlatSpec
  with Matchers
  with EitherValues
  with ScalaFutures
  with BeforeAndAfterAll
  with BeforeAndAfter
  with CirceAsunaEncoderHelper {

  /*
  testModel
  -> shapeEncoderImplicit[TestModel]
  test1
  -> shapeEncoderImplicit[TestModel1]
  test3
  -> shapeEncoderImplicit[TestModel3]
  test1
  -> shapeEncoderImplicit[TestModel1]
   */

  lazy val local = new Locale("zh", "CN")
  lazy val faker = new Faker(local)

  //"circe encoder" should "auto mapping case class with empty table" in {
  /*val test3 = TestModel3(faker.address.fullAddress, 461, ???)
    val test1 = TestModel1(faker.weather.description, 793, test3)

    val test2 = TestModel2(faker.book.title, 967)
    val model = TestModel(faker.name.name, faker.address.cityName, 123, 456L, test1, test2)*/

  /*implicit val implicit1 = {
      import io.circe.generic.auto._
      implicitly[Encoder[TestModel3]]
    }

    import io.circe.syntax._

    implicitly[CirceEncoderConfirmOrder[TestModel1]]


    val jsonObject = circeEncoder.write(test1)

    val circeEncodeResult = {
      import io.circe.generic.auto._
      model.asJsonObject
    }

    println("11" * 100)
    println(jsonObject.asJson.spaces2)
    jsonObject should be(circeEncodeResult)*/
  //}

  //val circeEncoder1111 = asunaCirce.caseOnly[EmptyCirceTable, TestModel].input(EmptyCirceTable.value)

  /*
  testModel: caseOnly
  testModel1: caseOnly
  testModel3: caseOnly
  testModel1: inputTable
   */

  trait kfike[Poly] {
    type Out
    val out: Out
  }

  object kfike {
    type Aux[P, T] = kfike[P] { type Out = T }
    type Aux2[P] = kfike[P]
  }

  object sdfjsofjweifj extends sdfjsejfweohjrfjihjwerhwerh {
    implicit def sfejrwewurhw: kfike.Aux[sdfjsofjweifj.type, String] = new kfike[sdfjsofjweifj.type] {
      override type Out = String
      override val out = "sdfrertert"
    }
  }

  trait sdfjsejfweohjrfjihjwerhwerh {
    implicit def sdfwsegsrtrstr: kfike.Aux[sdfjsofjweifj.type, Int] = new kfike[sdfjsofjweifj.type] {
      override type Out = Int
      override val out = 33453
    }
  }

  "circe encoder" should "auto mapping case class with empty table" in {
    def sfsfsfsf[A](implicit sfserr: kfike.Aux2[A]): sfserr.Out = sfserr.out

    println("aaaa" * 100)
    //println(sfsfsfsf[sdfjsofjweifj.type])

    def sokfjawoerhjawr[T, D](dfas: T)(implicit sfjfwshtfwe: efabc[T, D]): D = sfjfwshtfwe.out

    println(sokfjawoerhjawr("sdfsdrerse"))

  }

  trait efabc[In, Out] {
    val out: Out
  }

  object efabc extends sdfjsdofhefghseruighteurisgtgbreui {
    implicit def lewrhguilerhguiergbhtgrbsetiges(implicit sdfwserf: TestModel1): efabc[String, Int] = new efabc[String, Int] {
      override val out: Int = 2333
    }
  }

  trait sdfjsdofhefghseruighteurisgtgbreui extends asgerstyreydrtyhrtdhurtyujht {
    implicit def vargfdsgsdfgbvsertsrtg(implicit sdfwserf: TestModel1): efabc[String, String] = new efabc[String, String] {
      override val out: String = "sdfdstgrestsert"
    }
  }

  trait asgerstyreydrtyhrtdhurtyujht {
    implicit def awrtfsertgsertgsedrtesrtfaer: efabc[String, TestModel2] = new efabc[String, TestModel2] {
      override val out: TestModel2 = TestModel2("dfsdfgsertert", 4564)
    }
  }

}